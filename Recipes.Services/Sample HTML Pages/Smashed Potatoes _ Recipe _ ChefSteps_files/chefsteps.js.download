var fixInsaneAngularBrowswerExtensionIncompatibility, fixMissingLodash;

this.app = angular.module('freshSteps', ['LocalStorageModule', 'ui.router', 'csConfig', 'ngResource', 'ngAnimate', 'ngSanitize', 'cs-shared', 'cs.api', 'textAngular', 'templates', 'Scope.safeApply', 'bc.Flickity']);

angular.module('csConfig', []).constant('csConfig', window.csConfig);

fixInsaneAngularBrowswerExtensionIncompatibility = function() {
  var head, i, kid, len, name, results, rootKids;
  rootKids = $('html').children();
  head = $('head');
  results = [];
  for (i = 0, len = rootKids.length; i < len; i++) {
    kid = rootKids[i];
    name = kid.nodeName;
    if (name !== 'BODY' && name !== 'HEAD') {
      results.push(head.append(kid));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

fixMissingLodash = function() {
  if (window._ == null) {
    if (!window.save_underscore) {
      return Rollbar.error("window.save_underscore missing!");
    } else {
      Rollbar.debug("Lodash missing, restoring");
      return window._ = window.save_underscore;
    }
  }
};

this.app.config(["$stateProvider", "$urlRouterProvider", "$sceProvider", "$locationProvider", "csConfig", function($stateProvider, $urlRouterProvider, $sceProvider, $locationProvider, csConfig) {
  var footerView, galleryView, homeViews, loadPricingData, navView, pageViewSlug, params, state, states;
  fixInsaneAngularBrowswerExtensionIncompatibility();
  fixMissingLodash();
  $locationProvider.html5Mode({
    enabled: true,
    requireBase: false,
    rewriteLinks: true
  });
  navView = {
    controller: 'NavController as nav',
    templateUrl: "/assets/templates/directives/nav/nav.html"
  };
  footerView = {
    templateUrl: "/assets/templates/directives/footer/footer.html"
  };
  galleryView = {
    templateUrl: "/assets/templates/pages/gallery/gallery.html",
    controller: 'GalleryController as gallery'
  };
  pageViewSlug = function(slug) {
    return {
      nav: navView,
      main: {
        controller: 'PagesController as page',
        templateUrl: "/assets/templates/pages/show.html",
        data: {
          pageId: slug
        }
      },
      footer: footerView
    };
  };
  homeViews = {
    nav: navView,
    main: {
      controller: 'PagesController as page',
      templateUrl: "/assets/templates/pages/show.html",
      data: {
        pageId: 'home'
      }
    },
    footer: footerView
  };
  loadPricingData = function(PricingService) {
    return PricingService.loadData();
  };
  states = {
    '404': {
      url: '/404',
      views: {
        nav: navView,
        main: {
          templateUrl: "/assets/templates/pages/404/404.html"
        }
      },
      experiment: {
        name: 'Four Oh Four Fun',
        variations: {
          'Control': {},
          'Matrix': {
            views: {
              nav: navView,
              main: {
                templateUrl: "/assets/templates/pages/404/alt404.html"
              }
            }
          }
        }
      }
    },
    'logout': {
      url: '/logout',
      onEnter: function(authenticationService, $state, $rootScope) {
        return authenticationService.logout().then(function() {
          delete $state['currentUser'];
          return window.location = csConfig.shopifyEndpoint + '/account/logout';
        });
      }
    },
    'passwordReset': {
      url: '/password-reset',
      onEnter: function(ModalService) {
        return ModalService.open('recover');
      },
      views: homeViews
    },
    'main': {
      abstract: true,
      resolve: {
        currentUser: function(authenticationService, $state, $rootScope, AnalyticsService) {
          var authenticationError, authenticationSuccess;
          authenticationSuccess = function(user) {
            $state.currentUser = user;
            AnalyticsService.identify(user);
            return user;
          };
          authenticationError = function(response) {};
          return authenticationService.me().then(authenticationSuccess, authenticationError);
        },
        locationData: function(LocationService) {
          return LocationService.loadData();
        },
        shopifyData: function(ShopifyService, currentUser) {
          return ShopifyService.loadData(currentUser);
        },
        discountData: function(DiscountService, $location) {
          var discountId;
          discountId = $location.search().discount_id;
          if (discountId) {
            return DiscountService.get(discountId);
          }
        }
      },
      views: {
        main: {
          template: "<div ui-view='nav'></div><flags></flags><div ui-view='main' class='main-view'></div><div ui-view='footer'></div>"
        }
      }
    },
    'main.home': {
      url: '/',
      resolve: {
        currentUser: function(currentUser) {
          return currentUser;
        },
        pricingData: loadPricingData
      },
      views: homeViews
    },
    'main.gallery': {
      url: '/gallery?tag&generator&published_status&difficulty&sort&search_all&premium',
      reloadOnSearch: false,
      views: {
        nav: navView,
        main: galleryView
      }
    },
    'main.activity': {
      url: '/activities/:slug?context&version',
      views: {
        nav: navView,
        main: {
          templateUrl: "/assets/templates/pages/activities/activity.html",
          controller: "ActivityController as activity"
        },
        footer: footerView
      },
      resolve: {
        pricingData: loadPricingData
      }
    },
    'main.gift': {
      url: '/gift/:gift_token',
      views: {
        nav: navView,
        main: {
          templateUrl: "/assets/templates/pages/gift/gift.html",
          controller: "GiftController as gift"
        },
        footer: footerView
      }
    },
    'main.ordersUpdateAddress': {
      url: '/orders/:id/update-address',
      views: {
        nav: navView,
        main: {
          templateUrl: "/assets/templates/pages/orders/updateAddress.html",
          controller: "updateAddressController as updateAddress"
        },
        footer: footerView
      },
      resolve: {
        currentUser: function(currentUser) {
          return currentUser;
        },
        customerOrder: function(CustomerOrderService, $stateParams) {
          return CustomerOrderService.show({
            id: $stateParams.id
          });
        }
      }
    },
    'main.ordersAddressConfirmed': {
      url: '/orders/:id/address-confirmed',
      views: {
        nav: navView,
        main: {
          templateUrl: "/assets/templates/pages/orders/addressConfirmed.html",
          controller: "addressConfirmedController as addressConfirmed"
        },
        footer: footerView
      },
      resolve: {
        addressConfirmed: function(CustomerOrderService, $stateParams) {
          return CustomerOrderService.confirmAddress({
            id: $stateParams.id
          }).$promise;
        }
      }
    },
    'fs_activity': {
      url: '/fs_activities/:slug',
      views: {
        nav: navView,
        main: {
          templateUrl: "/assets/templates/pages/activities/activity.html",
          controller: "ActivityController as activity"
        },
        footer: footerView
      }
    },
    'main.joule': {
      url: '/joule',
      resolve: {
        pricingData: loadPricingData
      },
      views: pageViewSlug('joule-split-food')
    },
    'main.jouleDiscussion': {
      url: '/joule/discussion',
      onEnter: function($location) {
        return $location.path('/forum/categories/joule');
      }
    },
    'main.jouleLanding': {
      url: '/joule/:slug',
      resolve: {
        pricingData: loadPricingData
      },
      views: {
        nav: navView,
        main: {
          controller: 'PagesController as page',
          templateUrl: "/assets/templates/pages/show.html"
        },
        footer: footerView
      }
    },
    'main.gifting': {
      url: '/gifting',
      resolve: {
        pricingData: loadPricingData
      },
      views: pageViewSlug('gifting')
    },
    'main.jouleContest': {
      url: '/preorder-sweepstakes',
      views: pageViewSlug('preorder-sweepstakes')
    },
    'main.jouleContestLegal': {
      url: '/preorder-sweepstakes-legal',
      views: pageViewSlug('preorder-sweepstakes-legal')
    },
    'main.about': {
      url: '/about',
      views: pageViewSlug('about')
    },
    'main.press': {
      url: '/press',
      views: pageViewSlug('press')
    },
    'main.jobs': {
      url: '/jobs',
      views: pageViewSlug('new-jobs')
    },
    'main.sso': {
      url: '/sso',
      views: {
        main: {
          controller: 'SSOController as sso',
          templateUrl: "/assets/templates/pages/sso/sso.html"
        }
      }
    },
    'main.recommendedCookbooks': {
      url: '/recommended/cookbooks',
      views: pageViewSlug('cookbooks')
    },
    'main.recommendedThermometers': {
      url: '/recommended/thermometers',
      views: pageViewSlug('thermometers')
    },
    'main.recommendedSpherificationKits': {
      url: '/recommended/spherification-kits',
      views: pageViewSlug('spherification-kits')
    },
    'main.recommendedTools': {
      url: '/recommended/tools-we-love',
      views: pageViewSlug('tools-we-love')
    },
    'main.marketPorkshoulder': {
      url: '/market/pork-shoulder',
      resolve: {
        pricingData: loadPricingData
      },
      views: pageViewSlug('market2')
    },
    'main.marketSalmon': {
      url: '/market/salmon',
      resolve: {
        pricingData: loadPricingData
      },
      views: pageViewSlug('market-salmon')
    },
    'main.butchersDiscount': {
      url: '/butchers/:discountCode',
      resolve: {
        pricingData: loadPricingData,
        discountCode: function(DiscountService, $stateParams) {
          var discountCode;
          discountCode = $stateParams.discountCode;
          return DiscountService.setCode(discountCode);
        }
      },
      views: pageViewSlug('butchers-code')
    },
    'main.pages': {
      url: '/:id',
      resolve: {
        pricingData: loadPricingData
      },
      views: {
        nav: navView,
        main: {
          controller: 'PagesController as page',
          templateUrl: "/assets/templates/pages/show.html"
        },
        footer: footerView
      }
    },
    'main.classes': {
      url: '/classes/:id',
      resolve: {
        pricingData: loadPricingData
      },
      views: {
        nav: navView,
        main: {
          controller: 'PagesController as page',
          templateUrl: "/assets/templates/pages/show.html"
        },
        footer: footerView
      }
    },
    'main.classesLanding': {
      url: '/classes/:id/{extra:.*}',
      onEnter: function($state, $stateParams, $timeout) {
        return $timeout(function() {
          return $state.go('main.classes', {
            id: $stateParams['id']
          });
        });
      }
    },
    'main.fs_pages': {
      url: '/fs_pages/:id',
      resolve: {
        pricingData: loadPricingData,
        currentAdmin: function(currentUser, $state) {
          if (currentUser.admin) {
            return true;
          } else {
            return $state.go('main.home');
          }
        }
      },
      views: {
        nav: navView,
        main: {
          controller: 'PagesController as page',
          templateUrl: "/assets/templates/pages/show.html"
        },
        footer: footerView
      }
    },
    'docs': {
      abstract: true,
      url: '/docs',
      views: {
        main: {
          templateUrl: "/assets/templates/pages/docs/index.html"
        }
      }
    },
    'docs.typography': {
      url: '/typography',
      views: {
        main: {
          templateUrl: "/assets/templates/pages/docs/typography.html"
        }
      }
    },
    'docs.components': {
      url: '/components',
      views: {
        main: {
          templateUrl: "/assets/templates/pages/docs/components.html"
        }
      }
    },
    'debug': {
      url: '/debug',
      templateUrl: "/assets/templates/pages/debug/index.html"
    },
    'admin': {
      url: '/admin',
      resolve: {
        currentUser: function(authenticationService, $state, $rootScope, AnalyticsService) {
          var authenticationError, authenticationSuccess;
          authenticationSuccess = function(user) {
            $state.currentUser = user;
            AnalyticsService.identify(user);
            return user;
          };
          authenticationError = function(response) {};
          return authenticationService.me().then(authenticationSuccess, authenticationError);
        },
        shopifyData: function(ShopifyService) {
          return ShopifyService.loadData();
        }
      },
      views: {
        main: {
          templateUrl: "/assets/templates/admin/index.html"
        }
      }
    },
    'admin.components': {
      abstract: true,
      url: '/components',
      resolve: {
        currentAdmin: function(currentUser, $state) {
          if (currentUser != null ? currentUser.admin : void 0) {
            return true;
          } else {
            return $state.go('main.home');
          }
        }
      },
      views: {
        main: {
          template: "<div ui-view='main'><h1>HELLO</h1></div>"
        }
      }
    },
    'admin.components.index': {
      url: '',
      views: {
        main: {
          controller: 'ComponentsIndexController as components',
          templateUrl: "/assets/templates/admin/components/index.html"
        }
      }
    },
    'admin.components.edit': {
      url: '/:id/edit',
      views: {
        main: {
          controller: 'ComponentEditController as editComponent',
          templateUrl: "/assets/templates/admin/components/edit.html"
        }
      }
    },
    'admin.components.new': {
      url: '/new?componentParentType&componentParentId',
      views: {
        main: {
          controller: 'ComponentNewController as newComponent',
          templateUrl: "/assets/templates/admin/components/new.html"
        }
      }
    }
  };
  for (state in states) {
    params = states[state];
    $stateProvider.state(state, params);
  }
  $urlRouterProvider.when('/joule/', ["$state", function($state) {
    return $state.go('main.joule');
  }]);
  return $urlRouterProvider.otherwise(function($injector, $location) {
    return window.location.assign(csConfig.chefstepsEndpoint + $location.url());
  });
}]);

this.app.config(["$sceDelegateProvider", function($sceDelegateProvider) {
  return $sceDelegateProvider.resourceUrlWhitelist(['self', 'http://localhost:4000/**', 'http://freshsteps-staging.s3-website-us-east-1.amazonaws.com/**', 'http://freshsteps-production.s3-website-us-east-1.amazonaws.com/**', 'http://s3.amazonaws.com/freshsteps-staging/**', 'http://s3.amazonaws.com/freshsteps-production/**', 'https://s3.amazonaws.com/freshsteps-staging/**', 'https://s3.amazonaws.com/freshsteps-production/**', 'http://d2w4l5nz3qs7iy.cloudfront.net/**', 'https://d2w4l5nz3qs7iy.cloudfront.net/**', 'http://d3ro0sksttkvbt.cloudfront.net/**', 'https://d3ro0sksttkvbt.cloudfront.net/**', 'https://d3874mzg2llbaz.cloudfront.net/**']);
}]);

this.app.config(["$provide", function($provide) {
  return $provide.decorator('$state', ["$delegate", "$location", function($delegate, $location) {
    var state;
    state = $delegate;
    state.baseTransitionTo = state.transitionTo;
    state.transitionTo = function(to, params, options) {
      var ref, ref1;
      if (to.name === 'main.activity' && !(params != null ? params['context'] : void 0) && ((ref = state.params) != null ? ref['context'] : void 0)) {
        params = params || {};
        params['context'] = params['context'] || ((ref1 = state.params) != null ? ref1['context'] : void 0);
        $location.replace();
        $location.search(_.extend($location.search(), {
          context: params['context']
        }));
      }
      return this.baseTransitionTo(to, params, options);
    };
    return $delegate;
  }]);
}]);

this.app.config(["$compileProvider", function($compileProvider) {
  $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|blob):/);
  return $compileProvider.debugInfoEnabled(false);
}]);




this.app.animation('.collapsible', function() {
  return {
    addClass: function(element, className, doneFn) {
      if (className === 'ng-hide') {
        return $(element).slideUp('fast', doneFn);
      }
    },
    removeClass: function(element, className, doneFn) {
      if (className === 'ng-hide') {
        return $(element).slideDown('fast', doneFn);
      }
    }
  };
});




this.app.controller('AppController', ["AnalyticsService", "ExperimentService", "csConfig", "mobileDetectionService", "$scope", "$rootScope", "$state", "$window", "$timeout", "navService", "$location", "$anchorScroll", function(AnalyticsService, ExperimentService, csConfig, mobileDetectionService, $scope, $rootScope, $state, $window, $timeout, navService, $location, $anchorScroll) {
  var windowElement;
  this.csConfig = csConfig;
  AnalyticsService.init();
  ExperimentService.init();
  this.isMobile = mobileDetectionService.detect();
  this.isDesktop = !this.isMobile;
  this.showFlag = false;
  this.mobileClass = function() {
    if (this.isMobile) {
      return 'is-mobile';
    } else {
      return '';
    }
  };
  windowElement = angular.element($window);
  windowElement.on('scroll', _.throttle(function() {
    return $rootScope.$broadcast('throttledScroll');
  }, 100));
  $rootScope.$on('modals.open', (function(_this) {
    return function(event, modalType) {
      $timeout((function() {
        _this.showModals = true;
        if (modalType !== 'content') {
          return _this.modalsClass = 'show-modals';
        }
      }), 100);
      return _this.activeModal = modalType;
    };
  })(this));
  $rootScope.$on('modals.close', (function(_this) {
    return function(event) {
      _this.activeModal = null;
      return $timeout((function() {
        _this.showModals = false;
        return _this.modalsClass = '';
      }), 100);
    };
  })(this));
  $rootScope.$on('$stateChangeStart', (function(_this) {
    return function() {
      return _this.navClass = '';
    };
  })(this));
  $rootScope.$on('collectionNav.openState', (function(_this) {
    return function(event, state) {
      return _this.showCollectionNav = state;
    };
  })(this));
  $rootScope.$on('$stateChangeSuccess', (function(_this) {
    return function() {
      _this.currentUser = $state.currentUser;
      return window.scrollTo(0, 0);
    };
  })(this));
  $rootScope.$on('nav.stateChange', (function(_this) {
    return function() {
      return _this.navClass = navService.navState;
    };
  })(this));
  $rootScope.$on('flag.stateChange', (function(_this) {
    return function() {
      return _this.showFlag = !_this.showFlag;
    };
  })(this));
  $rootScope.$on('$viewContentLoaded', function() {
    if ($location.hash()) {
      return $timeout((function() {
        return $anchorScroll();
      }), 3000);
    }
  });
  return this;
}]);




this.app.factory('$exceptionHandler', ["$log", function($log) {
  return function(exception, cause) {
    exception.message += ' (caused by "' + cause + '")';
    if (typeof Rollbar !== "undefined" && Rollbar !== null) {
      Rollbar.error(exception);
    }
    $log.error(exception);
  };
}]);




this.app.controller('HeadController', ["MetadataService", "$state", function(MetadataService, $state) {
  this.meta = MetadataService;
  this.is404 = function() {
    return $state.current.name === '404';
  };
  return this;
}]);




this.app.factory('csRollbarInterceptor', ["$q", "csConfig", function($q, csConfig) {
  var apiRE, logError, urlFromRejection;
  apiRE = new RegExp(csConfig.chefstepsEndpoint + "/api/");
  logError = function(msg, rejection) {
    var rejection_info;
    rejection_info = angular.copy(rejection);
    delete rejection_info.config.headers['Authorization'];
    return typeof Rollbar !== "undefined" && Rollbar !== null ? Rollbar.info(msg, {
      rejection_info: rejection_info
    }) : void 0;
  };
  urlFromRejection = function(rejection) {
    var url;
    url = rejection.config.url;
    if (!url) {
      return '';
    }
    if (url.indexOf(csConfig.chefstepsEndpoint + "/api/") === 0) {
      url = url.replace("" + csConfig.chefstepsEndpoint, '');
      url = url.replace(/(activities|ingredients|users)\/([^\/]+)/, "$1/SLUG");
    }
    return url;
  };
  return {
    'requestError': function(rejection) {
      logError("Request error: " + (urlFromRejection(rejection)), rejection);
      return $q.reject(rejection);
    },
    'responseError': function(rejection) {
      var msg, ref;
      msg = "Response error " + rejection.status + " " + rejection.config.method + " " + (urlFromRejection(rejection));
      if (((ref = rejection.data) != null ? ref.message : void 0) != null) {
        msg = msg + (" - " + rejection.data.message);
      }
      logError(msg, rejection);
      return $q.reject(rejection);
    }
  };
}]);

this.app.config(["$provide", "$httpProvider", function($provide, $httpProvider) {
  return $httpProvider.interceptors.push('csRollbarInterceptor');
}]);




this.app.filter('ago', function() {
  return function(input) {
    if (input) {
      return moment(input).from(+Date.now());
    }
  };
});

moment.locale("en", {
  relativeTime: {
    future: "%s",
    past: "%s",
    s: "just now",
    m: "1 min ago",
    mm: "%d min ago",
    h: "1 hr ago",
    hh: "%d hrs ago",
    d: "1 day ago",
    dd: "%d days ago",
    M: "1 mo ago",
    MM: "%d mo ago",
    y: "1 yr ago",
    yy: "%d yr ago"
  }
});




this.app.filter('linkToText', function() {
  return function(input) {
    var anchorTagRegex;
    anchorTagRegex = /<a+(>|.*?[^?]>).*<\/a+(>|.*?[^?]>)/g;
    input = input.replace(anchorTagRegex, function(match) {
      return match.replace(/<[^>]+>/gm, '');
    });
    return input;
  };
});

this.app.filter('removeTextDecoration', function() {
  return function(input) {
    var regexString, removeTagRegex, removeTags;
    removeTags = ['strong', 'em', 'i'];
    regexString = removeTags.map(function(tag) {
      return "<" + tag + "+(>|.*?[^?]>).*<\\/" + tag + "+(>|.*?[^?]>)";
    }).join('|');
    removeTagRegex = new RegExp(regexString, 'g');
    input = input.replace(removeTagRegex, function(match) {
      return match.replace(/<[^>]+>/gm, '');
    });
    return input;
  };
});

this.app.filter('charLimit', function() {
  return function(input, maxCharNum) {
    var closingTagRegex, lastFragment, lastOpeningTagIndex, lastchar, lastspace;
    if (!input) {
      '';
    }
    maxCharNum = parseInt(maxCharNum, 10);
    if (!maxCharNum) {
      input;
    }
    if (input.length <= maxCharNum) {
      input;
    }
    if (input.length > maxCharNum) {
      input = input.substr(0, maxCharNum);
      lastOpeningTagIndex = input.lastIndexOf('<');
      if (lastOpeningTagIndex > 0) {
        lastFragment = input.substr(lastOpeningTagIndex, input.length);
        if (lastFragment[1] !== '/') {
          closingTagRegex = /<\/[a-zA-Z]+(>|.*?[^?]>)/;
          if (!lastFragment.match(closingTagRegex)) {
            input = input.substr(0, lastOpeningTagIndex);
          }
        }
      }
      lastspace = input.lastIndexOf(' ');
      if (lastspace !== -1) {
        input = input.substr(0, lastspace);
      }
      lastchar = input.slice(-1);
      if (lastchar === '.' || lastchar === '?' || lastchar === '!' || lastchar === ',' || lastchar === ':') {
        input = input.substr(0, input.length - 1);
      }
      input = input + '…';
    }
    if (maxCharNum <= 0) {
      input = '';
    }
    return input;
  };
});

this.app.filter('toTrusted', [
  '$sce', function($sce) {
    return function(input) {
      return $sce.trustAsHtml(input);
    };
  }
]);




this.app.filter('smallImages', function() {
  return function(html) {
    var h;
    h = $("<div>" + html + "</div>");
    h = h.find('img').filter(function() {
      return $(this).attr('src').match(/(filepicker)/);
    }).map(function() {
      var src;
      src = this.src.replace('www.filepicker.io', 'd3awvtnmmsvyot.cloudfront.net');
      return this.src = src + '/convert?fit=crop&w=1000&rotate=exif&quality=60&cache=true&compress=true';
    }).end().end().end();
    return h.html();
  };
});

this.app.filter('smallImagesCDN', function() {
  return function(html) {
    var h;
    h = $("<div>" + html + "</div>");
    h = h.find('img').filter(function() {
      return $(this).attr('src').match(/(d3awvtnmmsvyot.cloudfront.net)/);
    }).map(function() {
      var src;
      src = this.src;
      return this.src = src + '/convert?fit=crop&w=1000&rotate=exif&quality=60&cache=true&compress=true';
    }).end().end().end();
    return h.html();
  };
});




this.app.filter('ingredientQuantity', function() {
  return function(input) {
    input = parseFloat(input);
    if (input === 0) {
      return '';
    } else if (input - Math.floor(input) === 0) {
      return Math.floor(input);
    } else if (input < 0.01) {
      return input.toFixed(3);
    } else if (input < 0.1) {
      return input.toFixed(2);
    } else if (input > 100) {
      return Math.floor(input);
    } else {
      return input.toFixed(1);
    }
  };
});

this.app.filter('ingredientUnit', function() {
  return function(input) {
    if (input === "a/n") {
      return '-';
    } else if (input === "ea") {
      return '';
    } else {
      return input;
    }
  };
});




var converter;

converter = new showdown.Converter();

this.app.filter("markdown", function() {
  return function(input) {
    var result;
    if (input && converter) {
      result = converter.makeHtml(input);
      return result;
    } else {
      return "";
    }
  };
});




this.app.filter("nbsp", function() {
  return function(text) {
    return text.replace(/\s/g, '&nbsp;');
  };
});




this.app.filter("priceConversion", function() {
  return function(text) {
    return parseFloat(text);
  };
});




var convertCtoF, convertFtoC;

convertCtoF = function(c) {
  return Math.round(parseFloat(c * 1.8)) + 32;
};

convertFtoC = function(f) {
  return Math.round(parseFloat(f - 32) / 1.8);
};

this.app.filter("shortcode", function() {
  return function(input) {
    if (input) {
      return input.replace(/\[(\w+)\s+([^\]]*)\]/g, function(orig, shortcode, contents) {
        var anchor_text, arg1, arg2, asin, s;
        arg1 = contents;
        arg2 = null;
        s = contents.match(/([^\s]*)\s(.*)/);
        if (s && s.length === 3) {
          arg1 = s[1];
          arg2 = s[2];
        }
        switch (shortcode) {
          case 'c':
            return "<span class='temperature'>" + (convertCtoF(contents)) + "&nbsp;&deg;F / " + contents + "&nbsp;&deg;C</span>";
          case 'f':
            return "<span class='temperature'>" + contents + "&nbsp;&deg;F / " + (convertFtoC(contents)) + "&nbsp;&deg;C</span>";
          case 'cm':
            return "<a class='length-group'><span class='length' data-orig-value='" + contents + "'>" + contents + "&nbsp;cm</span></a>";
          case 'mm':
            return "<a class='length-group'><span class='length' data-orig-value='" + (contents / 10.0) + "'>" + contents + "&nbsp;mm</span></a>";
          case 'g':
            return "<span cs-quantity-shortcode unit='" + shortcode + "' quantity='" + contents + "' display-unit='containerData.unit' rescale-factor='containerData.rescaleFactor'></span>";
          case 'ea':
            return "<span cs-quantity-shortcode unit='" + shortcode + "' quantity='" + contents + "' display-unit='' rescale-factor='containerData.rescaleFactor'></span>";
          case 'courseActivity':
            if (arg2) {
              return "<a ng-click='loadSubrecipe(" + arg1 + ")'>" + arg2 + "</a>";
            } else {
              return "<b>Badly formatted courseActivity shortcode<b>";
            }
            break;
          case 'link':
            if (arg2) {
              return "<a href='" + arg1 + "' target='_blank'>" + arg2 + "</a>";
            } else {
              return "<a href='" + arg1 + "' target='_blank'>" + arg1 + "</a>";
            }
            break;
          case 'amzn':
            if (arg2) {
              asin = arg1;
              anchor_text = arg2;
              return "<a href='http://www.amazon.com/dp/" + asin + "/?tag=delvkitc-20' target='_blank'>" + anchor_text + "</a>";
            } else {
              return orig;
            }
            break;
          case 'view':
            return "<a ng-click=\"$parent.showNell('" + arg1 + ".html')\">" + arg2 + "</a>";
          case 'fetchIngredient':
            return "<div cs-fetch='" + arg1 + "' type='Ingredient' part='" + arg2 + "' card='_ingredient_embed_card.html'>\n </div>";
          case 'fetchActivity':
            return "<cs-fetch-activity-shortcode slug='" + arg1 + "'></cs-fetch-activity-shortcode>";
          case 'linktocomments':
            return "<a href='#comments'>" + contents + "</a>";
          case 'quote':
            arg1 = arg1.replace('_', ' ');
            return "<div class=\"quote-container\">\n  <hr/>\n  <blockquote>\n    " + arg2 + "\n  </blockquote>\n  <div class=\"quote-source\">\n    " + arg1 + "\n  </div>\n  <hr/>\n</div>";
          case 'fetchTool':
            return "<div cs-fetch-tool='" + arg1 + "'></div>";
          case 'videoLoop':
            return "<div cs-looping-video-player video-name='" + arg1 + "' video-image='" + arg2 + "'></div>";
          case 'followTopic':
            return "<div cs-follow-topic topic='" + arg1 + "' text='" + arg2 + "'></div>";
          default:
            return orig;
        }
      });
    } else {
      return "";
    }
  };
});




this.app.filter('titlecase', function() {
  return function(input) {
    input = input === void 0 || input === null ? '' : input;
    return input.toString().toLowerCase().replace(/\b([a-z])/g, function(character) {
      return character.toUpperCase();
    });
  };
});




this.app.service('ModalService', ["$rootScope", "$q", "$state", "$http", function($rootScope, $q, $state, $http) {
  this.modal = {
    deferred: null,
    params: null
  };
  this.open = (function(_this) {
    return function(type, params) {
      var oldDeferred;
      oldDeferred = _this.modal.deferred;
      _this.modal.deferred = $q.defer();
      if ($state.currentUser && _.contains(['login', 'signup'], type)) {
        _this.modal.deferred.resolve();
      } else {
        _this.modal.params = params;
        $rootScope.$emit('modals.open', type);
      }
      return _this.modal.deferred.promise.then(oldDeferred != null ? oldDeferred.resolve : void 0, oldDeferred != null ? oldDeferred.reject : void 0);
    };
  })(this);
  this.params = (function(_this) {
    return function() {
      return _this.modal.params || {};
    };
  })(this);
  this.reject = (function(_this) {
    return function(reason) {
      if (!_this.modal.deferred) {
        return;
      }
      _this.modal.deferred.reject(reason);
      _this.modal.deferred = null;
      _this.modal.params = null;
      return $rootScope.$emit('modals.close');
    };
  })(this);
  this.resolve = (function(_this) {
    return function(response) {
      if (!_this.modal.deferred) {
        return;
      }
      _this.modal.deferred.resolve(response);
      _this.modal.deferred = null;
      _this.modal.params = null;
      return $rootScope.$emit('modals.close');
    };
  })(this);
  this.reloadAndResolve = (function(_this) {
    return function(response) {
      $rootScope.$on('$stateChangeSuccess', function() {
        return _this.resolve(response);
      });
      return $state.reload();
    };
  })(this);
  this.ftueIfFromNav = (function(_this) {
    return function() {
      if (_this.shouldSendToFTUE()) {
        _this.open('ftue');
        return $state.reload();
      } else {
        return _this.reloadAndResolve();
      }
    };
  })(this);
  this.shouldSendToFTUE = (function(_this) {
    return function() {
      var ref;
      return ((ref = _this.modal.params) != null ? ref.source : void 0) === 'nav';
    };
  })(this);
  this.resolveSuccess = (function(_this) {
    return function(type) {
      if (type == null) {
        type = 'normal';
      }
      $rootScope.$on('$stateChangeSuccess', function() {
        var ref, userToken;
        if ((ref = $state.currentUser) != null ? ref.needs_special_terms : void 0) {
          userToken = localStorageService.get('user.token');
          $http({
            method: 'GET',
            url: '/api/v0/users/shown_terms',
            headers: {
              Authorization: "Bearer " + userToken
            }
          });
          return _this.open('specialTerms');
        } else {
          if (type === 'ftue') {
            return _this.open('ftue');
          } else {
            return _this.resolve();
          }
        }
      });
      return $state.reload();
    };
  })(this);
  return this;
}]);




this.app.directive('modals', ["$rootScope", "ModalService", "$timeout", function($rootScope, ModalService, $timeout) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.params = ModalService.params();
      this.close = function() {
        return ModalService.reject();
      };
      return this;
    },
    controllerAs: 'modals',
    bindToController: {
      showModals: '=',
      activeModal: '='
    },
    link: function(scope, element, attrs) {
      element.on('click', function(event) {
        if (angular.element(event.target).attr('close-on-click')) {
          $rootScope.$safeApply(ModalService.reject);
        }
      });
      return scope.$watch('modals.activeModal', function(newValue, oldValue) {
        if (newValue) {
          return element.addClass("modal-container-" + newValue);
        } else {
          return $timeout(function() {
            return element.removeClass("modal-container-" + oldValue);
          }, 500);
        }
      });
    },
    templateUrl: "/assets/templates/modals/modals.html"
  };
}]);




this.app.controller('PagesController', ["PageService", "$stateParams", "$state", "AnalyticsService", "MetadataService", "ExperimentService", "ModalService", "$filter", "$rootScope", "navService", "$scope", "$location", "$timeout", function(PageService, $stateParams, $state, AnalyticsService, MetadataService, ExperimentService, ModalService, $filter, $rootScope, navService, $scope, $location, $timeout) {
  var handleError, handleSuccess, pageId, ref, ref1, setPositions, slug;
  handleSuccess = (function(_this) {
    return function(data) {
      var blob, canonical, description, discountIdFromURL, exportContent, firstComponent, firstComponentNav, firstComponentType, image, keywords, ref, ref1, title;
      discountIdFromURL = $location.search().discount_id;
      if (data.isPromotion && data.discountId && !discountIdFromURL) {
        $location.search('discount_id', data.discountId);
        $timeout(function() {
          return location.reload(true);
        }, 1);
        return;
      }
      _this.content = data;
      firstComponent = _this.content.components[0];
      firstComponentType = firstComponent.componentType;
      firstComponentNav = firstComponent.meta.nav;
      if ((firstComponentType === 'hero' && ((ref = firstComponent.meta.items[0]) != null ? ref.content.heroType : void 0) !== 'collection') || firstComponentNav === 'ghost') {
        navService.setState('nav-ghost');
      }
      if ($state.currentUser && (firstComponentType === 'banner' && ((ref1 = firstComponent.meta.items[0]) != null ? ref1.content.type : void 0) === 'Madlib')) {
        navService.setState('nav-ghost');
      }
      title = $filter('titlecase')(_this.content.title);
      description = _this.content.shortDescription;
      keywords = _this.content.title;
      image = _this.content.components[0].meta.items[0].content.image;
      canonical = $state.href($state.current.name);
      MetadataService.set({
        title: title,
        description: description,
        keywords: keywords,
        canonical: canonical,
        sousVideTargeted: _.contains(title.toLowerCase(), 'sous vide'),
        og: {
          title: title + " | ChefSteps",
          image: image,
          url: canonical,
          description: description
        },
        twitter: {
          title: title + " | ChefSteps",
          image: image
        }
      });
      exportContent = {};
      angular.copy(_this.content, exportContent);
      delete exportContent.id;
      delete exportContent.shortDescription;
      data = JSON.stringify(_this.content);
      blob = new Blob([data], {
        type: 'application/json'
      });
      _this.exportUrl = (window.URL || window.webkitURL).createObjectURL(blob);
      _this.exportTitle = _this.content.title + "_" + (Date.now()) + ".json";
      return _this.pageRequiresPremium = (_.find(_this.content.components, function(c) {
        return c.meta.showTo === "non-premium";
      })) != null;
    };
  })(this);
  handleError = function(error) {
    return console.log('Error getting page: ', error);
  };
  pageId = ((ref = $state.current.views.main.data) != null ? ref.pageId : void 0) || $stateParams.id || ("joule-" + $stateParams.slug);
  if (pageId === 'premium' && ((ref1 = $state.currentUser) != null ? ref1.premium : void 0)) {
    pageId = 'new-premium-lp';
  }
  pageId = pageId.toLowerCase();
  if (pageId === "!") {
    $state.go('main.home');
  }
  PageService.show({
    id: pageId
  }, handleSuccess, handleError);
  this.moveUp = (function(_this) {
    return function(index) {
      var removed;
      if (index > 0) {
        removed = _this.content.components[index];
        _this.content.components.splice(index, 1);
        _this.content.components.splice(index - 1, 0, removed);
        return setPositions();
      }
    };
  })(this);
  this.moveDown = function(index) {
    var numComponents, removed;
    numComponents = this.content.components.length;
    if (index < (numComponents - 1)) {
      removed = this.content.components[index];
      this.content.components.splice(index, 1);
      this.content.components.splice(index + 1, 0, removed);
      return setPositions();
    }
  };
  setPositions = (function(_this) {
    return function() {
      return angular.forEach(_this.content.components, function(component, index) {
        return component.position = index;
      });
    };
  })(this);
  this.save = (function(_this) {
    return function() {
      var handleUpdateError, handleUpdateSuccess;
      delete _this.content.shortDescription;
      delete _this.content.isPromotion;
      delete _this.content.redirectPath;
      delete _this.content.discountId;
      handleUpdateSuccess = function(data) {
        console.log('saved data: ', data);
        _this.content = data;
        return _this.editing = false;
      };
      handleUpdateError = function() {
        return console.log('Error getting page.');
      };
      return PageService.update({
        id: $stateParams.id,
        page: _this.content
      }, handleUpdateSuccess, handleUpdateError);
    };
  })(this);
  this.cancel = (function(_this) {
    return function() {
      _this.editing = false;
      return $state.go($state.current, {}, {
        reload: true
      });
    };
  })(this);
  this.maybeShowComponent = (function(_this) {
    return function(showTo) {
      showComponent;
      var ref2, ref3, showComponent;
      switch (showTo) {
        case 'everyone':
          showComponent = true;
          break;
        case 'premium':
          showComponent = (ref2 = _this.currentUser) != null ? ref2.premium : void 0;
          break;
        case 'non-premium':
          showComponent = !((ref3 = _this.currentUser) != null ? ref3.premium : void 0);
          break;
        case void 0:
          showComponent = true;
      }
      return showComponent;
    };
  })(this);
  this.showComponent = (function(_this) {
    return function(component) {
      var e, ref2, ref3;
      if (_this.editing) {
        return true;
      }
      if (component._destroy === '1') {
        return false;
      }
      if (!!((ref2 = component.meta) != null ? (ref3 = ref2.experiment) != null ? ref3.experimentName : void 0 : void 0)) {
        e = component.meta.experiment;
        if (!ExperimentService.isInVariation(e.experimentName, e.variationName, e.variationCount)) {
          return false;
        }
      }
      return _this.maybeShowComponent(component.meta.showTo);
    };
  })(this);
  this.currentUser = $state.currentUser;
  $rootScope.$on('$stateChangeSuccess', (function(_this) {
    return function() {
      return _this.currentUser = $state.currentUser;
    };
  })(this));
  $scope.$watch('page.importFile', (function(_this) {
    return function(newValue) {
      var fixedstring, importComponents, newPageContent, oldComponents;
      if (newValue) {
        oldComponents = _this.content.components.map(function(component) {
          return _.extend(component, {
            _destroy: '1'
          });
        });
        fixedstring = decodeURIComponent(escape(newValue));
        newPageContent = JSON.parse(fixedstring);
        console.log('newPageContent: ', newPageContent);
        importComponents = newPageContent.components.map(function(component) {
          return _.extend(component, {
            componentParentId: pageId,
            id: null
          });
        });
        return _this.content.components = _.union(oldComponents, importComponents);
      }
    };
  })(this));
  if ($state.current.name === 'home') {
    AnalyticsService.track('Viewed New Homepage');
  }
  $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
    if (fromState.name === 'main.classes' && toState.name === 'main.activity' && !toParams['context']) {
      toParams['context'] = fromParams.id;
      event.preventDefault();
      return ModalService.open('signup', {
        source: 'freeClass',
        extraText: "A Free Account Is Required To View This Class"
      }).then(function() {
        return $state.go('main.activity', toParams);
      });
    }
  });
  if ($state.current.name === 'main.classes' && $location.hash()[0] === '/') {
    slug = $location.hash().slice(1);
    $state.go('main.activity', {
      slug: slug,
      context: $state.params['id']
    });
  }
  return this;
}]);




this.app.service('CommentService', ["$http", "$state", "csConfig", "$q", function($http, $state, csConfig, $q) {
  var handleError;
  this.toolbar = [['bold', 'italics'], ['csInsertImage']];
  handleError = function(error) {
    console.log('error: ', error);
    return Rollbar.error("CommentService: " + error.data);
  };
  this.like = function(commentId) {
    var bloomAuth, deferred, userData;
    deferred = $q.defer();
    if ($state.currentUser) {
      userData = {
        id: $state.currentUser.id.toString(),
        name: $state.currentUser.name
      };
      bloomAuth = encodeURIComponent($state.currentUser.encrypted_bloom_info);
      $http.post(csConfig.bloomApiEndpoint + "/comments/" + commentId + "/like?apiKey=xchefsteps&auth=" + bloomAuth + "&sso=true").then(function(response) {
        return deferred.resolve(userData);
      });
    } else {
      deferred.reject();
    }
    return deferred.promise;
  };
  this.unlike = function(commentId) {
    var bloomAuth, deferred, userData;
    deferred = $q.defer();
    if ($state.currentUser) {
      userData = {
        id: $state.currentUser.id.toString(),
        name: $state.currentUser.name
      };
      bloomAuth = encodeURIComponent($state.currentUser.encrypted_bloom_info);
      $http["delete"](csConfig.bloomApiEndpoint + "/comments/" + commentId + "/like?apiKey=xchefsteps&auth=" + bloomAuth + "&sso=true").then(function(response) {
        return deferred.resolve(userData);
      });
    } else {
      deferred.reject();
    }
    return deferred.promise;
  };
  this.liked = function(commentLikes) {
    var ref;
    if ($state.currentUser) {
      return _.findWhere(commentLikes, {
        id: (ref = $state.currentUser) != null ? ref.id.toString() : void 0
      });
    } else {
      return false;
    }
  };
  this.post = function(commentData) {
    var bloomAuth, deferred;
    deferred = $q.defer();
    if ($state.currentUser) {
      bloomAuth = encodeURIComponent($state.currentUser.encrypted_bloom_info);
      $http.post(csConfig.bloomApiEndpoint + "/comments?apiKey=xchefsteps&auth=" + bloomAuth + "&sso=true", {
        comment: commentData
      }).then((function(response) {
        return deferred.resolve(response);
      }), function(error) {
        handleError(error);
        return deferred.reject();
      });
    } else {
      deferred.reject();
    }
    return deferred.promise;
  };
  this.put = function(commentId, content) {
    var bloomAuth, deferred;
    deferred = $q.defer();
    if ($state.currentUser) {
      bloomAuth = encodeURIComponent($state.currentUser.encrypted_bloom_info);
      $http.put(csConfig.bloomApiEndpoint + "/comments/" + commentId + "?apiKey=xchefsteps&auth=" + bloomAuth + "&sso=true", {
        content: content
      }).then(function(response) {
        return deferred.resolve(response);
      });
    } else {
      deferred.reject();
    }
    return deferred.promise;
  };
  this["delete"] = function(commentId) {
    var bloomAuth, deferred;
    deferred = $q.defer();
    if ($state.currentUser) {
      bloomAuth = encodeURIComponent($state.currentUser.encrypted_bloom_info);
      $http["delete"](csConfig.bloomApiEndpoint + "/comments/" + commentId + "?apiKey=xchefsteps&auth=" + bloomAuth + "&sso=true").then(function(response) {
        return deferred.resolve(response);
      });
    } else {
      deferred.reject();
    }
    return deferred.promise;
  };
  this.canEdit = function(commentData) {
    var isAdmin, isAuthor, ref;
    if ($state.currentUser) {
      isAuthor = commentData.author.id === ((ref = $state.currentUser) != null ? ref.id.toString() : void 0);
      isAdmin = $state.currentUser.admin;
      return isAuthor || isAdmin;
    } else {
      return false;
    }
  };
  return this;
}]);




this.app.factory('ComponentService', ["$resource", "csConfig", "localStorageService", function($resource, csConfig, localStorageService) {
  var Component, defaultCharLimit, headerParams, itemStructs, userToken;
  userToken = localStorageService.get('user.token');
  headerParams = {
    'Authorization': 'Bearer ' + userToken,
    "x-csrf-token": void 0
  };
  Component = $resource(csConfig.chefstepsEndpoint + "/api/v0/components/:id", {
    id: '@id'
  }, {
    'create': {
      method: 'POST',
      headers: headerParams
    },
    'index': {
      method: 'GET',
      isArray: true,
      headers: headerParams
    },
    'show': {
      method: 'GET',
      isArray: false
    },
    'update': {
      method: 'PUT',
      headers: headerParams
    },
    'destroy': {
      method: 'DELETE',
      headers: headerParams
    }
  });
  defaultCharLimit = 200;
  Component["new"] = function(properties) {
    var component;
    if (properties == null) {
      properties = {};
    }
    component = {
      meta: {
        items: [
          {
            content: {}
          }
        ]
      }
    };
    switch (properties.type) {
      case 'feed':
        component.meta.size = 'standard';
        component.meta.theme = 'light';
        component.meta.rows = 1;
        component.meta.columns = 1;
        component.meta.itemTypeName = 'Media';
        component.meta.descriptionCharLimit = defaultCharLimit;
        break;
      case 'fifty-fifty':
        component.meta.size = 'full';
        component.meta.theme = 'light';
        break;
      case 'header':
        component.meta.size = 'full';
        component.meta.theme = 'light';
        break;
      case 'hero':
        component.meta.size = 'full';
        component.meta.theme = 'light';
        break;
      case 'matrix':
        component.meta.size = 'standard';
        component.meta.theme = 'light';
        component.meta.rows = 1;
        component.meta.columns = 1;
        component.meta.itemTypeName = 'Media';
        component.meta.descriptionCharLimit = defaultCharLimit;
        break;
      case 'matrix-collapsible':
        component.meta.size = 'standard';
        component.meta.theme = 'light';
        component.meta.rows = 1;
        component.meta.columns = 1;
        component.meta.showItemNumbers = false;
        component.meta.itemTypeName = 'List';
        component.meta.descriptionCharLimit = defaultCharLimit;
        break;
      case 'matrix-filter':
        component.meta.size = 'standard';
        component.meta.theme = 'light';
        component.meta.rows = 1;
        component.meta.columns = 1;
        component.meta.itemTypeName = 'Media';
        component.meta.descriptionCharLimit = defaultCharLimit;
        component.meta.tags = [];
        break;
      case 'media':
        component.meta.size = 'standard';
        component.meta.theme = 'light';
        break;
      case 'comments':
        component.meta.size = 'standard';
        component.meta.theme = 'light';
    }
    return component;
  };
  itemStructs = {
    'fifty-fifty': {
      content: {
        title: '',
        description: '',
        image: '',
        buttonMessage: 'See the Recipe',
        url: '',
        descriptionCharLimit: defaultCharLimit
      }
    },
    'header': {
      content: {
        title: 'Title',
        subtitle: 'Subtitle'
      }
    },
    'hero': {
      content: {
        title: '',
        description: '',
        image: '',
        buttonMessage: 'See the Recipe',
        url: '',
        descriptionCharLimit: defaultCharLimit,
        heightType: 'standard',
        heroType: 'standard'
      }
    },
    'matrix': {
      content: {
        title: '',
        description: '',
        image: '',
        buttonMessage: 'See the Recipe',
        url: '',
        descriptionCharLimit: defaultCharLimit,
        activity_type: [],
        premium: false
      }
    },
    'matrix-filter': {
      content: {
        title: '',
        description: '',
        image: '',
        buttonMessage: 'See the Recipe',
        url: '',
        descriptionCharLimit: defaultCharLimit,
        tags: {}
      }
    },
    'media': {
      content: {
        title: '',
        description: '',
        image: '',
        url: '',
        viewerType: '',
        numItems: 1,
        items: []
      }
    }
  };
  Component.newItem = function(type) {
    return itemStructs[type];
  };
  return Component;
}]);




this.app.service('csAdwords', function() {
  this.track = function(google_conversion_id, google_conversion_label) {
    var image;
    image = new Image(1, 1);
    return image.src = "http://www.googleadservices.com/pagead/conversion/" + google_conversion_id + "/?label=" + google_conversion_label + "&script=0";
  };
  return this;
});

this.app.service('csFacebookConversion', function() {
  this.track = function(fb_pixel, fb_value) {
    if (typeof window._fbq !== 'undefined') {
      return window._fbq.push([
        'track', fb_pixel, {
          'value': fb_value,
          'currency': 'USD'
        }
      ]);
    }
  };
  return this;
});




this.app.service('CustomerOrderService', ["$resource", "csConfig", "localStorageService", "$q", function($resource, csConfig, localStorageService, $q) {
  var headerParams, userToken;
  userToken = localStorageService.get('user.token');
  headerParams = {
    'Authorization': 'Bearer ' + userToken,
    "x-csrf-token": void 0
  };
  this.resource = $resource(csConfig.chefstepsEndpoint + "/api/v0/shopping/customer_orders/:id", {
    id: '@id'
  }, {
    'updateAddress': {
      url: csConfig.chefstepsEndpoint + "/api/v0/shopping/customer_orders/:id/update_address",
      method: 'POST',
      headers: headerParams
    },
    'confirmAddress': {
      url: csConfig.chefstepsEndpoint + "/api/v0/shopping/customer_orders/:id/confirm_address",
      method: 'POST',
      headers: headerParams
    },
    'show': {
      method: 'GET',
      isArray: false,
      headers: headerParams
    }
  });
  return this.resource;
}]);




this.app.service('DiscountService', ["$resource", "csConfig", "localStorageService", "$q", function($resource, csConfig, localStorageService, $q) {
  this.resource = $resource(csConfig.chefstepsEndpoint + "/api/v0/shopping/discounts/:id", {
    id: '@id'
  }, {
    'show': {
      method: 'GET',
      isArray: false
    }
  });
  this.get = (function(_this) {
    return function(discountId) {
      var deferred, loadDataError, loadDataSuccess;
      deferred = $q.defer();
      if (_this.discount) {
        deferred.resolve(_this.discount);
      } else {
        loadDataSuccess = function(data) {
          _this.discount = data;
          return deferred.resolve(_this.discount);
        };
        loadDataError = function(error) {
          Rollbar.error("DiscountService - error while loading discount, discountId: " + discountId + ", error: " + (JSON.stringify(error)));
          return deferred.reject(error);
        };
        _this.resource.show({
          id: discountId
        }, loadDataSuccess, loadDataError);
      }
      return deferred.promise;
    };
  })(this);
  this.setCode = (function(_this) {
    return function(code) {
      return _this.discountCode = code;
    };
  })(this);
  return this;
}]);




this.app.factory('PageService', ["$resource", "csConfig", "localStorageService", function($resource, csConfig, localStorageService) {
  var userToken;
  userToken = localStorageService.get('user.token');
  return $resource(csConfig.chefstepsEndpoint + "/api/v0/pages/:id", {
    id: '@id'
  }, {
    'create': {
      method: 'POST'
    },
    'index': {
      method: 'GET',
      isArray: true,
      headers: {
        'Authorization': 'Bearer ' + userToken,
        "x-csrf-token": void 0
      }
    },
    'show': {
      method: 'GET',
      isArray: false
    },
    'update': {
      method: 'PUT',
      headers: {
        'Authorization': 'Bearer ' + userToken,
        "x-csrf-token": void 0
      }
    },
    'destroy': {
      method: 'DELETE'
    }
  });
}]);




this.app.service('ShopifyService', ["$state", "localStorageService", "$resource", "$q", "authenticationService", function($state, localStorageService, $resource, $q, authenticationService) {
  this.setHeaderParams = (function(_this) {
    return function(currentUser) {
      var userToken;
      if (currentUser) {
        userToken = localStorageService.get('user.token');
        _this.headerParams = {
          'Authorization': 'Bearer ' + userToken,
          "x-csrf-token": void 0
        };
      } else {
        _this.headerParams = null;
      }
      return _this.resource = $resource(csConfig.chefstepsEndpoint + "/api/v0/shopping/products/:id", {
        id: '@id'
      }, {
        'index': {
          method: 'GET',
          isArray: true,
          headers: _this.headerParams
        },
        'show': {
          method: 'GET',
          isArray: false,
          headers: _this.headerParams
        }
      });
    };
  })(this);
  this.loadData = (function(_this) {
    return function(currentUser) {
      var deferred, loadDataError, loadDataSuccess;
      _this.setHeaderParams(currentUser);
      deferred = $q.defer();
      if (_this.products) {
        deferred.resolve(_this.products);
      } else {
        loadDataSuccess = function(data) {
          _this.products = data;
          return deferred.resolve(_this.products);
        };
        loadDataError = function(error) {
          Rollbar.error("ShopifyService - error while calling loadData at url: " + $state.current.url + ", error: " + (JSON.stringify(error)));
          if (error.status === 403) {
            $state.go('logout');
          }
          return deferred.reject(error);
        };
        _this.resource.index(loadDataSuccess, loadDataError);
      }
      return deferred.promise;
    };
  })(this);
  this.variantForSku = (function(_this) {
    return function(sku) {
      var product, product_sku;
      if (_this.products && _this.products.length > 0) {
        product_sku = sku.split('-')[0];
        product = _.find(_this.products, function(product) {
          return product.sku === product_sku;
        });
        return _.find(product.variants, function(variant) {
          return variant.sku === sku;
        });
      } else {
        return Rollbar.error("ShopifyButton - @products not set for button at url: " + $state.current.url + ", products: " + _this.products + ", sku: " + sku);
      }
    };
  })(this);
  return this;
}]);




this.app.service('alertService', ["$rootScope", "$timeout", function($rootScope, $timeout) {
  this.alerts = [];
  this.addAlert = (function(_this) {
    return function(alert) {
      return _this.alerts.push(alert);
    };
  })(this);
  this.getAlerts = (function(_this) {
    return function() {
      return _this.alerts;
    };
  })(this);
  return this;
}]);




this.app.service('AnalyticsService', ["$rootScope", "$stateParams", "csConfig", "$state", "$location", "authenticationService", "$timeout", "ExperimentServiceCore", function($rootScope, $stateParams, csConfig, $state, $location, authenticationService, $timeout, ExperimentServiceCore) {
  var getExperimentProperties;
  this.loggedIn = function() {
    return $state.currentUser != null;
  };
  this.init = function() {
    analytics.load(csConfig.segmentWriteKey);
    return analytics.ready(function() {
      return typeof Rollbar !== "undefined" && Rollbar !== null ? Rollbar.configure({
        payload: {
          environment: csConfig['env'],
          client: {
            javascript: {
              source_map_enabled: true,
              code_version: csConfig['deploySHA'],
              guess_uncaught_frames: true
            }
          }
        }
      }) : void 0;
    });
  };
  this.identify = function(user) {
    analytics.identify(user.id, _.extend(_.omit(user, ["id"]), getExperimentProperties()), {
      integrations: {
        Intercom: {
          user_hash: user.intercom_user_hash
        }
      }
    });
    return typeof Intercom === "function" ? Intercom('update') : void 0;
  };
  this.reidentify = (function(_this) {
    return function(signup) {
      if (signup == null) {
        signup = false;
      }
      return authenticationService.me().then(function(user) {
        if (signup) {
          analytics.alias(user.id);
          return $timeout((function() {
            return _this.identify(user);
          }), 500);
        } else {
          return _this.identify(user);
        }
      });
    };
  })(this);
  this.track = function(event, properties) {
    var allProperties;
    if (properties == null) {
      properties = {};
    }
    allProperties = _.extend(properties, {
      url: $state.current.url,
      loggedIn: this.loggedIn()
    }, {
      nonInteraction: 1
    });
    return analytics.track(event, allProperties);
  };
  this.page = function(pageName, properties) {
    var allProperties;
    if (properties == null) {
      properties = {};
    }
    allProperties = _.extend(properties, {
      slug: $stateParams.id || '',
      loggedIn: this.loggedIn()
    });
    return analytics.page(pageName, allProperties);
  };
  getExperimentProperties = function() {
    var k, ref, result, v;
    result = {};
    ref = ExperimentServiceCore.getExperiments();
    for (k in ref) {
      v = ref[k];
      result['Experiment ' + k] = v.variationName;
    }
    return result;
  };
  this.prevPath = null;
  $rootScope.$on('$locationChangeSuccess', (function(_this) {
    return function(event, newURL) {
      var newPath, pageName;
      newPath = $location.path();
      if (!(newPath === _this.prevPath)) {
        _this.prevPath = newPath;
        pageName = $state.current.name.replace(/^main./, '');
        return _this.page(pageName);
      }
    };
  })(this));
  return this;
}]);




this.api = angular.module('cs.api', ['csConfig']);

this.api.factory('ActivityService', ["csConfig", "$resource", "localStorageService", function(csConfig, $resource, localStorageService) {
  var Activity;
  Activity = $resource(csConfig.chefstepsEndpoint + "/api/v0/activities/:id", {
    id: '@id'
  }, {
    'get': {
      method: 'GET',
      isArray: false,
      headers: {
        'Authorization': function() {
          var userToken;
          userToken = localStorageService.get('user.token');
          if (userToken) {
            return 'Bearer ' + userToken;
          } else {
            return '';
          }
        },
        'x-csrf-token': void 0,
        'cs-referer': document.referrer
      }
    }
  });
  return Activity;
}]);




this.app.service('csBloomManager', ["$q", "csConfig", "$window", "authenticationService", function($q, csConfig, $window, authenticationService) {
  var configure;
  this.deferred = $q.defer();
  this.tagInserted = false;
  this.configured = false;
  configure = (function(_this) {
    return function(user) {
      Bloom.configure({
        apiKey: 'xchefsteps',
        auth: user ? user.encrypted_bloom_info : null,
        user: user ? String(user.id) : null,
        env: csConfig.bloomEnv
      });
      return _this.deferred.resolve();
    };
  })(this);
  this.insertTag = function() {
    var script;
    this.tagInserted = true;
    script = document.createElement("script");
    script.type = "text/javascript";
    script.src = csConfig.bloomCommunityEndpoint + "/export/loader.js";
    script.async = true;
    script.setAttribute('crossorigin', 'anonymous');
    script.onload = (function(_this) {
      return function() {
        if (!_this.configured) {
          _this.configured = true;
          return authenticationService.me().then(configure)["catch"](function() {
            return configure(null);
          });
        }
      };
    })(this);
    return document.head.appendChild(script);
  };
  this.loadBloom = (function(_this) {
    return function() {
      if (!_this.tagInserted) {
        if (document.readyState === 'complete') {
          _this.insertTag();
        } else {
          $($window).load(function() {
            return _this.insertTag();
          });
        }
      }
      return _this.deferred.promise;
    };
  })(this);
  return this;
}]);




this.app.service('csFilepickerMethods', ["$q", function($q) {
  var baseURL, cdnURL;
  baseURL = null;
  cdnURL = null;
  this.csLog = function(variableName, variable) {
    console.log("***************************************");
    console.log("This is the value of " + variableName + ":");
    console.log(variable);
    return console.log("***************************************");
  };
  this.getBaseURL = function(fpObject) {
    baseURL = JSON.parse(fpObject).url;
    return baseURL;
  };
  this.cdnURL = function(fpObject) {
    cdnURL = fpObject.replace("www.filepicker.io", "d3awvtnmmsvyot.cloudfront.net");
    return cdnURL;
  };
  this.convert = function(fpObjectOrImageUrl, options) {
    var aspect, aspectArray, aspectHeight, aspectWidth, convertURL, e, error, height, newHeight, newWidth, quality, width;
    if (options == null) {
      options = {};
    }
    width = options.w || options.width;
    height = options.h || options.height;
    aspect = options.a || options.aspect;
    quality = options.quality || 60;
    try {
      convertURL = this.cdnURL(fpObjectOrImageUrl);
    } catch (error) {
      e = error;
      convertURL = fpObjectOrImageUrl;
    }
    if ((!convertURL) || (convertURL.length === 0)) {
      return "";
    }
    if (aspect) {
      aspectArray = aspect.split(':');
      aspectWidth = aspectArray[0];
      aspectHeight = aspectArray[1];
    }
    if (width && !height) {
      if (aspect) {
        newHeight = width * aspectHeight / aspectWidth;
        convertURL = convertURL + ("/convert?fit=crop&w=" + width + "&h=" + newHeight + "&quality=" + quality + "&cache=true&rotate=exif&compress=true");
      } else {
        convertURL = convertURL + ("/convert?fit=max&w=" + width + "&quality=" + quality + "&cache=true&rotate=exif&compress=true");
      }
    }
    if (!width && height) {
      if (aspect) {
        newWidth = height * aspectWidth / aspectHeight;
        convertURL = convertURL + ("/convert?fit=crop&w=" + newWidth + "&h=" + height + "&quality=" + quality + "&cache=true&rotate=exif&compress=true");
      } else {
        convertURL = convertURL + ("/convert?fit=max&h=" + height + "&quality=" + quality + "&cache=true&rotate=exif&compress=true");
      }
    }
    if (width && height) {
      convertURL = convertURL + ("/convert?fit=crop&w=" + width + "&h=" + height + "&quality=" + quality + "&cache=true&rotate=exif&compress=true");
    }
    if (!width && !height) {
      convertURL = convertURL + "?cache=true";
    }
    return convertURL;
  };
  return this;
}]);




this.app.service('csIngredientService', ["csQuantityService", function(csQuantityService) {
  this.toIngredient = function(ingredient) {
    var quantity, quantityVal, ref, ref1, ref2, ref3;
    quantityVal = parseFloat(ingredient.quantity);
    quantity = csQuantityService.toScalableQuantity(quantityVal, ingredient.unit);
    if (ingredient.unit === 'recipe' || ingredient.subActivity) {
      console.log('ingredient: ', ingredient);
      return {
        id: (ref = ingredient.subActivity) != null ? ref.id : void 0,
        title: ingredient.title,
        note: ingredient.note,
        url: (ref1 = ingredient.subActivity) != null ? ref1.url : void 0,
        imageUrl: (ref2 = ingredient.subActivity) != null ? ref2.image : void 0,
        productUrl: (ref3 = ingredient.subActivity) != null ? ref3.productUrl : void 0,
        origQuantity: _.cloneDeep(quantity),
        quantity: _.cloneDeep(quantity),
        subActivity: ingredient.subActivity
      };
    } else {
      return {
        id: ingredient.ingredient.id,
        title: ingredient.title,
        note: ingredient.note,
        url: ingredient.ingredient.url,
        imageUrl: ingredient.ingredient.image,
        productUrl: ingredient.ingredient.productUrl,
        origQuantity: _.cloneDeep(quantity),
        quantity: _.cloneDeep(quantity)
      };
    }
  };
  this.rescaleIngredient = function(ingredient, factor) {
    ingredient.quantity = csQuantityService.scaleQuantity(ingredient.origQuantity, factor);
    return ingredient;
  };
  return this;
}]);




this.app.service('csQuantityService', function() {
  var imperialToMetric, imperialToOz, isImperialUnit, isMetricUnit, metricToG, metricToImperial, resolveImperial, resolveMetric, roundSensible;
  isMetricUnit = _.partial(_.includes, ['g', 'kg']);
  isImperialUnit = _.partial(_.includes, ['oz', 'lb']);
  roundSensible = function(val) {
    var decDigits, mult;
    decDigits = 2;
    if (val > 1) {
      decDigits = 1;
    }
    if (val > 50) {
      decDigits = 0;
    }
    mult = Math.pow(10, decDigits);
    val = Math.round(val * mult) / mult;
    return val;
  };
  imperialToOz = function(obj) {
    var oz;
    oz = 0;
    if (obj.oz) {
      oz += obj.oz;
    }
    if (obj.lb) {
      oz += obj.lb * 16;
    }
    return oz;
  };
  metricToG = function(obj) {
    var g;
    g = 0;
    if (obj.g) {
      g += obj.g;
    }
    if (obj.kg) {
      g += obj.kg * 1000;
    }
    return g;
  };
  resolveImperial = function(obj) {
    var lb, oz, totalOz;
    totalOz = imperialToOz(obj);
    lb = Math.floor(totalOz / 16);
    oz = totalOz % 16;
    return {
      lb: lb,
      oz: oz
    };
  };
  resolveMetric = function(obj) {
    var totalG;
    totalG = metricToG(obj);
    if (totalG >= 1000) {
      return {
        kg: totalG / 1000,
        g: 0
      };
    } else {
      return {
        kg: 0,
        g: totalG
      };
    }
  };
  metricToImperial = function(obj) {
    var totalOz;
    totalOz = metricToG(obj) * 0.03527;
    return resolveImperial({
      oz: totalOz
    });
  };
  imperialToMetric = function(obj) {
    var totalG;
    totalG = imperialToOz(obj) * 28.35;
    return resolveMetric(totalG);
  };
  this.toScalableQuantity = function(val, unit) {
    var imperialQuantity, metricQuantity, quantity;
    quantity = {};
    if (isMetricUnit(unit)) {
      metricQuantity = {};
      metricQuantity[unit] = val;
      metricQuantity = resolveMetric(metricQuantity);
      imperialQuantity = metricToImperial(metricQuantity);
      quantity.g = roundSensible(metricQuantity.g);
      quantity.kg = roundSensible(metricQuantity.kg);
      quantity.oz = roundSensible(imperialQuantity.oz);
      quantity.lb = roundSensible(imperialQuantity.lb);
      quantity.hasMass = true;
    } else {
      quantity.hasMass = false;
      quantity.massless = val;
      quantity.unit = unit;
    }
    return quantity;
  };
  this.scaleQuantity = function(quantity, factor) {
    var scaledImperialQuantity, scaledMetricQuantity, scaledQuantity;
    scaledQuantity = {
      hasMass: quantity.hasMass
    };
    if (!quantity.hasMass) {
      scaledQuantity.massless = roundSensible(quantity.massless * factor);
      scaledQuantity.unit = quantity.unit;
    } else {
      scaledMetricQuantity = resolveMetric({
        g: quantity.g * factor,
        kg: quantity.kg * factor
      });
      scaledImperialQuantity = resolveImperial({
        oz: quantity.oz * factor,
        lb: quantity.lb * factor
      });
      scaledQuantity.g = roundSensible(scaledMetricQuantity.g);
      scaledQuantity.kg = roundSensible(scaledMetricQuantity.kg);
      scaledQuantity.oz = roundSensible(scaledImperialQuantity.oz);
      scaledQuantity.lb = roundSensible(scaledImperialQuantity.lb);
    }
    return scaledQuantity;
  };
  this.getRescaleFactor = function(newQuantity, oldQuantity, unit) {
    var factor;
    if (isMetricUnit(unit)) {
      factor = (metricToG(newQuantity)) / (metricToG(oldQuantity));
    } else if (isImperialUnit(unit)) {
      factor = (imperialToOz(newQuantity)) / (imperialToOz(oldQuantity));
    } else if (unit === 'massless') {
      factor = newQuantity.massless / oldQuantity.massless;
    }
    return factor;
  };
  return this;
});




this.app.service('ExperimentServiceCore', ["localStorageService", "$state", function(localStorageService, $state) {
  var experiments, key;
  key = 'CS Experiments';
  experiments = {};
  this.deserializeExperiments = function() {
    return experiments = localStorageService.get(key) || {};
  };
  this.serializeExperiments = function() {
    return localStorageService.set(key, experiments);
  };
  this.getExperiments = function() {
    return experiments;
  };
  this.clearAllExperiments = (function(_this) {
    return function() {
      experiments = {};
      return _this.serializeExperiments();
    };
  })(this);
  this.getVariation = function(experimentName) {
    return experiments[experimentName];
  };
  this.isInVariationInternal = (function(_this) {
    return function(experimentName, variationName, variationCount) {
      var choice, inVariation, variationIndex;
      if (!experiments[experimentName]) {
        choice = parseInt(Math.random() * variationCount);
        experiments[experimentName] = {
          variationIndex: choice
        };
        _this.serializeExperiments();
      }
      experiments[experimentName].variations = experiments[experimentName].variations || [];
      variationIndex = _.indexOf(experiments[experimentName].variations, variationName);
      if (variationIndex === -1) {
        experiments[experimentName].variations.push(variationName);
        variationIndex = experiments[experimentName].variations.length - 1;
        _this.serializeExperiments();
      }
      inVariation = parseInt(experiments[experimentName].variationIndex) === parseInt(variationIndex);
      if (inVariation && !experiments[experimentName].variationName) {
        experiments[experimentName].variationName = variationName;
        _this.serializeExperiments();
      }
      return inVariation;
    };
  })(this);
  this.deserializeExperiments();
  return this;
}]);

this.app.service('ExperimentService', ["$rootScope", "ExperimentServiceCore", "AnalyticsService", "utilities", "$location", "$state", function($rootScope, ExperimentServiceCore, AnalyticsService, utilities, $location, $state) {
  var service, tracked;
  tracked = {};
  service = angular.extend({}, ExperimentServiceCore, {
    isInVariation: function(experimentName, variationName, variationCount) {
      var inEmptyVariation, inVariation;
      if ($location.search()[experimentName]) {
        return $location.search()[experimentName] === variationName;
      }
      if (variationCount === 1) {
        variationCount = 2;
        inEmptyVariation = service.isInVariationInternal(experimentName, 'empty', variationCount);
        if (inEmptyVariation) {
          service.trackExperiment(experimentName);
        }
      }
      inVariation = service.isInVariationInternal(experimentName, variationName, variationCount);
      if (inVariation) {
        service.trackExperiment(experimentName);
      }
      return inVariation;
    },
    trackExperiment: function(experimentName) {
      var variationName;
      if (tracked[experimentName]) {
        return;
      }
      tracked[experimentName] = true;
      variationName = service.getVariation(experimentName).variationName;
      return AnalyticsService.track('Experiment Viewed', {
        experiment_id: utilities.stringToIdentifier(experimentName),
        experiment_name: experimentName,
        variation_id: utilities.stringToIdentifier(variationName),
        variation_name: variationName
      });
    },
    init: function() {
      var ref, ref1, state, stateKey, variationCount, variationData, variationName;
      ref = $state.get();
      for (stateKey in ref) {
        state = ref[stateKey];
        if (state.experiment != null) {
          variationCount = Object.keys(state.experiment.variations).length;
          ref1 = state.experiment.variations;
          for (variationName in ref1) {
            variationData = ref1[variationName];
            if (service.isInVariationInternal(state.experiment.name, variationName, variationCount)) {
              angular.merge(state, variationData);
            }
          }
        }
      }
      return $rootScope.$on('$stateChangeStart', function(event, state) {
        if (state.experiment != null) {
          return service.trackExperiment(state.experiment.name);
        }
      });
    }
  });
  return service;
}]);




this.app.service('facebookService', function() {
  return this;
});




this.app.service('formHelper', function() {
  this.showErrorFor = function(form, fieldName, validationParam) {
    var ref;
    if (form.$submitted || ((ref = form[fieldName]) != null ? ref.$touched : void 0)) {
      if (form[fieldName].$error[validationParam]) {
        return true;
      }
    }
  };
  return this;
});




this.app.service('LocationService', ["$q", "$http", "csConfig", function($q, $http, csConfig) {
  this.location = null;
  this.loadData = (function(_this) {
    return function() {
      var deferred;
      deferred = $q.defer();
      if (_this.location != null) {
        deferred.resolve(_this.location);
      } else {
        $http.get(csConfig.chefstepsEndpoint + "/api/v0/locations.json").then(function(response) {
          _this.location = response.data;
          return deferred.resolve(_this.location);
        }, function(error) {
          return deferred.reject(error);
        });
      }
      return deferred.promise;
    };
  })(this);
  this.getCountry = (function(_this) {
    return function() {
      var ref;
      return (ref = _this.location) != null ? ref.country : void 0;
    };
  })(this);
  this.isInUS = (function(_this) {
    return function() {
      return _this.getCountry() === 'US' || _this.getCountry() === null;
    };
  })(this);
  return this;
}]);




this.app.service('MetadataService', ["$rootScope", "$sce", function($rootScope, $sce) {
  this.dict = {};
  this.defaultDict = {
    'image': 'https://d3awvtnmmsvyot.cloudfront.net/api/file/vCbc5JfR1KUQwWoPLsAL',
    'description': 'ChefSteps is here to make cooking more fun. Get recipes, tips, and videos that show the whys behind the hows for sous vide, grilling, baking, and more.',
    sousVideTargeted: false,
    og: {},
    twitter: {}
  };
  this.reset = function() {
    return this.set({});
  };
  this.set = (function(_this) {
    return function(dict) {
      _this.dict = angular.extend({}, _this.defaultDict, dict);
      _this.dict.og = angular.extend(_this.dict.og, dict);
      return _this.dict.twitter = angular.extend(_this.dict.twitter, dict);
    };
  })(this);
  this.getTitle = function() {
    var title;
    title = 'ChefSteps';
    if (this.dict.title) {
      title = this.dict.title + ' | ' + title;
    }
    return $sce.trustAsHtml(title);
  };
  $rootScope.$on('$stateChangeStart', (function(_this) {
    return function(event, toState, toParams, fromState) {
      var ref;
      if (!(fromState != null ? fromState.abstract : void 0)) {
        if (!(((ref = _this.dict.title) != null ? ref.length : void 0) > 0)) {
          console.log("State \'" + fromState.name + "\' never set meta title");
        }
      }
      return _this.reset();
    };
  })(this));
  this.reset();
  return this;
}]);




this.app.service('mobileDetectionService', function() {
  this.detect = function() {
    var isMobile;
    isMobile = false;
    (function(a) {
      if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
        isMobile = true;
      }
    })(navigator.userAgent || navigator.vendor || window.opera);
    return isMobile;
  };
  this.isMobile = this.detect();
  this.isDesktop = !this.isMobile;
  return this;
});




this.app.service('navService', ["$rootScope", function($rootScope) {
  this.previousState;
  this.navState = '';
  this.setState = (function(_this) {
    return function(navState) {
      _this.navState = navState;
      return $rootScope.$emit('nav.stateChange');
    };
  })(this);
  this.setPreviousState = (function(_this) {
    return function() {
      return _this.previousState = _this.navState;
    };
  })(this);
  this.usePreviousState = (function(_this) {
    return function() {
      return _this.navState = _this.previousState;
    };
  })(this);
  this.getState = (function(_this) {
    return function() {
      return _this.navState;
    };
  })(this);
  this.showCollectionNavPrompt = true;
  return this;
}]);




this.app.service('PricingService', ["$q", "$http", "utilities", "LocationService", "csConfig", function($q, $http, utilities, LocationService, csConfig) {
  this.PREMIUM_SKU = "cs10002";
  this.JOULE_SKU = "cs10001";
  this.errorRow = {
    sku: "ERROR",
    title: "ERROR",
    price: 999999,
    msrp: 99999
  };
  this.priceTable = null;
  this.askInternationalOverride = function(sku) {
    return (sku === this.JOULE_SKU) && (!LocationService.isInUS());
  };
  this.loadData = (function(_this) {
    return function() {
      var deferred;
      deferred = $q.defer();
      if (_this.priceTable) {
        deferred.resolve();
      } else {
        $http.get(csConfig.chefstepsEndpoint + "/api/v0/products.json").then(function(response) {
          _this.priceTable = response.data;
          return deferred.resolve(_this.priceTable);
        }, function(error) {
          return deferred.reject(error);
        });
      }
      return deferred.promise;
    };
  })(this);
  this.getPrice = (function(_this) {
    return function(sku, arg) {
      var result, row, usedCirculatorDiscount, userIsPremium;
      userIsPremium = arg.userIsPremium, usedCirculatorDiscount = arg.usedCirculatorDiscount;
      row = _this.priceTable.products[sku];
      if (row == null) {
        row = _this.errorRow;
        Rollbar.error("PricingService: unexpected sku " + sku);
      }
      result = _.pick(row, 'sku', 'title', 'price', 'msrp', 'shippable');
      if ((userIsPremium && !usedCirculatorDiscount) && (row.premiumPrice != null)) {
        result.price = row.premiumPrice;
      }
      return result;
    };
  })(this);
  return this;
}]);




this.app.service('responsiveService', ["$window", function($window) {
  var breakpoint;
  breakpoint = 700;
  this.isViewportLTE = function(queryWidth) {
    return $window.innerWidth <= queryWidth;
  };
  this.isViewportGT = function(queryWidth) {
    return $window.innerWidth > queryWidth;
  };
  this.isViewportMobile = (function(_this) {
    return function() {
      return _this.isViewportLTE(breakpoint);
    };
  })(this);
  return this;
}]);




this.app.service('ssoService', ["$http", "$q", "localStorageService", "$location", function($http, $q, localStorageService, $location) {
  this.isZendesk = function() {
    var rt;
    rt = $location.search().return_to;
    return (rt != null) && (rt.indexOf('zendesk') !== -1 || rt.indexOf('support.chefsteps.com') !== -1);
  };
  this.isAmazon = function() {
    var rt;
    rt = $location.search().path;
    return (rt != null) && (rt.indexOf('amazon') !== -1 || rt.indexOf('pitangui.amazon.com') !== -1);
  };
  this.signAndRedirect = function(state) {
    var config, deferred, userToken;
    deferred = $q.defer();
    userToken = localStorageService.get('user.token');
    config = {
      params: {
        path: $location.search().path || $location.search().return_to,
        state: state
      },
      headers: {
        'Authorization': 'Bearer ' + userToken
      }
    };
    $http.get(csConfig.chefstepsEndpoint + "/api/v0/auth/external_redirect", config).then((function(response) {
      deferred.resolve();
      return window.location = response.data.redirect;
    }), function(error) {
      return deferred.reject('There was an error while processing your request.');
    });
    return deferred.promise;
  };
  this.signAndUpgradeToken = (function(_this) {
    return function(token, redirect) {
      var config, deferred;
      deferred = $q.defer();
      config = {
        headers: {
          'Authorization': 'Bearer ' + token
        }
      };
      $http.post(csConfig.chefstepsEndpoint + "/api/v0/upgrade_token", {}, config).then((function(response) {
        var upgraded_token;
        upgraded_token = response.data.token;
        localStorageService.set('user.token', upgraded_token);
        deferred.resolve();
        return _this.redirectOrRoot(redirect);
      }), function(error) {
        return deferred.reject('There was an error while processing your request.');
      });
      return deferred.promise;
    };
  })(this);
  this.redirectOrRoot = function(redirect_url) {
    if (redirect_url) {
      return window.location = redirect_url;
    } else {
      return window.location = csConfig.chefstepsEndpoint;
    }
  };
  return this;
}]);




this.app.service('staticRenderService', ["$window", function($window) {
  this.get = function() {
    return /PhantomJS/.test($window.navigator.userAgent);
  };
  return this;
}]);




this.app.service('stripeService', ["AnalyticsService", "PricingService", "localStorageService", "ModalService", "utilities", "$window", "$http", "$location", "LocationService", "$state", function(AnalyticsService, PricingService, localStorageService, ModalService, utilities, $window, $http, $location, LocationService, $state) {
  this.showCheckout = (function(_this) {
    return function(sku, user, isGift, bypassInternational) {
      var analyticsProperties, label, priceData, taxRate;
      if (bypassInternational == null) {
        bypassInternational = false;
      }
      if ((!PricingService.askInternationalOverride(sku)) || bypassInternational) {
        priceData = PricingService.getPrice(sku, {
          userIsPremium: user.premium,
          usedCirculatorDiscount: user.used_circulator_discount
        });
        analyticsProperties = _.extend({
          gift: isGift
        }, priceData);
        analyticsProperties.price = analyticsProperties.price / 100;
        analyticsProperties.tax = analyticsProperties.tax / 100;
        analyticsProperties.msrp = analyticsProperties.msrp / 100;
        analyticsProperties.totalPrice = analyticsProperties.totalPrice / 100;
        analyticsProperties.quantity = 1;
        analyticsProperties.name = priceData.title;
        AnalyticsService.track('Added Product', analyticsProperties);
        taxRate = LocationService.location.taxPercent;
        label = "Pay " + (utilities.penniesToCurrency(priceData.price));
        if ((taxRate != null) > 0) {
          label += " + " + (utilities.penniesToCurrency(_this.getTaxPrice(priceData.price, taxRate))) + " Tax";
        }
        return $window.stripeHandler.open({
          name: 'ChefSteps, Inc.',
          image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/LLsyWzeCR5qBPIHk7qQo',
          panelLabel: label,
          description: isGift ? priceData.title + " (Gift)" : priceData.title,
          zipCode: true,
          shippingAddress: priceData.shippable,
          billingAddress: true,
          email: user.email,
          closed: function(x) {
            if (!_this.stripeToken) {
              return typeof Intercom === "function" ? Intercom('trackEvent', 'funnel-abandonded') : void 0;
            } else {
              return ModalService.open('waiting');
            }
          },
          token: function(token, args) {
            var headerParams, joulePurchase, premiumOnlyPurchase, urlParams, userToken;
            _this.stripeToken = token;
            userToken = localStorageService.get('user.token');
            headerParams = {
              'Authorization': 'Bearer ' + userToken,
              "x-csrf-token": void 0
            };
            urlParams = $location.search();
            args = _.extend(args, urlParams);
            premiumOnlyPurchase = sku === 'cs10002';
            joulePurchase = sku === 'cs10001';
            return $http({
              method: 'POST',
              headers: headerParams,
              params: _.extend(args, {
                stripeToken: token.id,
                sku: sku,
                gift: isGift,
                price: priceData.price,
                tax: priceData.tax
              }),
              url: '/api/v0/charges'
            }).success(function(data, status, headers, config) {
              var dollarPrice, extraText;
              console.log("STRIPE CHARGE WIN");
              if (joulePurchase) {
                $state.currentUser.used_circulator_discount = true;
              }
              if (!isGift) {
                if ($state.currentUser) {
                  $state.currentUser.premium = true;
                }
                if (app.currentUser) {
                  app.currentUser.premium = true;
                }
              }
              extraText = "";
              if (joulePurchase) {
                extraText = "";
              }
              dollarPrice = priceData.price / 100.0;
              AnalyticsService.track('Completed Order Client-Side', {
                product_skus: [sku],
                revenue: dollarPrice,
                shipping: 0,
                gift: isGift,
                currency: 'USD'
              });
              if (!isGift) {
                return ModalService.open('buyResult', {
                  type: "normal",
                  description: priceData.title,
                  buttonText: premiumOnlyPurchase ? "Let's Get Started" : "OK",
                  extraText: extraText
                }).then(function() {
                  if (premiumOnlyPurchase) {
                    if ($state.current.name === 'main.activity') {
                      return window.location.reload();
                    } else {
                      return $state.go('main.pages', {
                        id: 'premium'
                      }, {
                        reload: true
                      });
                    }
                  } else {
                    return $state.go($state.current, {}, {
                      reload: true
                    });
                  }
                });
              } else {
                return ModalService.open('buyResult', {
                  type: "gift",
                  description: priceData.title,
                  extraText: extraText
                }).then(function() {
                  if (!premiumOnlyPurchase) {
                    return window.location.reload();
                  }
                });
              }
            }).error(function(data, status, headers, config) {
              AnalyticsService.track('Buy Button Error', _.extend(analyticsProperties, {
                error: data.error
              }));
              console.log("STRIPE CHARGE FAIL", data);
              return ModalService.open('buyResult', {
                type: "error",
                message: data.error
              });
            });
          }
        });
      } else {
        return ModalService.open('internationalJoule', {
          type: 'normal',
          sku: sku,
          user: user,
          isGift: isGift
        });
      }
    };
  })(this);
  this.getTaxPrice = function(price, rate) {
    return utilities.roundTo(price * rate, 2);
  };
  return this;
}]);




this.app.service('suggestedRecipeService', ["$q", "AlgoliaSearchService", function($q, AlgoliaSearchService) {
  var filterOwnActivity, maybeSearchAgain, search;
  filterOwnActivity = function(input) {
    return $q(function(resolve) {
      return resolve({
        results: input.results.filter(function(result) {
          return parseInt(result.objectID) !== input.id;
        }),
        id: input.id
      });
    });
  };
  search = function(input) {
    return $q(function(resolve) {
      return AlgoliaSearchService.search({
        search_all: input.query,
        attributesToRetrieve: 'objectID,title,url,image,likes_count,description,has_video,activity_type'
      }).then(function(response) {
        return resolve({
          results: response,
          id: input.id
        });
      });
    });
  };
  maybeSearchAgain = function(input) {
    return $q(function(resolve) {
      if (input.results.length > 2) {
        return resolve(input);
      } else {
        return resolve(search({
          query: null,
          id: input.id
        }).then(filterOwnActivity));
      }
    });
  };
  this.getRecipes = function(activity, n) {
    return $q(function(resolve) {
      return search({
        query: activity.tagList[0],
        id: activity.id
      }).then(filterOwnActivity).then(maybeSearchAgain).then(filterOwnActivity).then(function(output) {
        return resolve(output.results.slice(0, n));
      });
    });
  };
  return this;
}]);




this.app.service('utilities', ["$window", "$filter", function($window, $filter) {
  this.stringToIdentifier = function(s) {
    if (!s) {
      return "nullIdentifier";
    }
    s = s.replace(/[^A-Za-z0-9]/g, '');
    if (!s) {
      return "nullIdentifier";
    }
    return s = s[0].toLowerCase() + s.slice(1);
  };
  this.roundTo = function(number, decimalDigits) {
    var mult;
    mult = Math.pow(10, decimalDigits);
    return Math.round(parseFloat(number) * mult) / mult;
  };
  this.currency = function(number) {
    return $filter('currency')(number);
  };
  this.penniesToCurrency = function(number) {
    return $filter('currency')($filter('priceConversion')(number));
  };
  this.clamp = function(value, min, max) {
    return Math.min(Math.max(value, min), max);
  };
  this.alpha = function(value, min, max) {
    var alpha;
    alpha = (value - min) / (max - min);
    return this.clamp(alpha, 0, 1);
  };
  this.smoothstep = function(x, xmin, xmax, ymin, ymax) {
    var alpha, result;
    alpha = this.alpha(x, xmin, xmax);
    alpha = alpha * alpha * (3 - (2 * alpha));
    return result = ymin + (alpha * (ymax - ymin));
  };
  this.convertCtoF = function(c) {
    return parseFloat(c * 1.8) + 32;
  };
  this.convertFtoC = function(f) {
    return parseFloat(f - 32) / 1.8;
  };
  this.urlSafeString = function(string) {
    return $window.encodeURI(string);
  };
  this.secondsToHMS = function(s) {
    var h, m;
    if (s == null) {
      return null;
    }
    s = Math.floor(parseFloat(s));
    m = Math.floor(s / 60);
    s -= m * 60;
    h = Math.floor(m / 60);
    m -= h * 60;
    return {
      hours: h,
      minutes: m,
      seconds: s
    };
  };
  this.formatTimeDisplay = function(value) {
    var timeValue;
    timeValue = (value != null ? value.toString() : void 0) || '--';
    if (timeValue.length < 2) {
      return '0' + timeValue;
    } else {
      return timeValue;
    }
  };
  this.formatTime = function(t, showSeconds) {
    var h, m, result, s;
    if (showSeconds == null) {
      showSeconds = true;
    }
    h = Math.floor(t / 3600);
    t = t - (h * 3600);
    m = Math.floor(t / 60);
    t = t - (m * 60);
    s = Math.floor(t);
    if ((s >= 30) && (!showSeconds)) {
      m += 1;
    }
    if (h > 0) {
      result = h + "h&nbsp;" + m + "m";
    } else if (showSeconds) {
      if (s === 0) {
        s = 1;
      }
      result = m + "m&nbsp;" + s + "s";
    } else {
      result = m + "&nbsp;min";
    }
    return result;
  };
  this.htmlDecode = function(value) {
    return $('<div/>').html(value).text();
  };
  this.getPreheatAlpha = function(intakeTemperature, setPointTemperature) {
    var alpha, min;
    if ((intakeTemperature == null) || (setPointTemperature == null)) {
      return 0;
    }
    min = 19.9;
    alpha = (intakeTemperature - min) / (setPointTemperature - min);
    return Math.min(Math.max(0, alpha), 1);
  };
  this.nearSetpoint = function(intakeTemperature, setPointTemperature) {
    if ((intakeTemperature == null) || (setPointTemperature == null)) {
      return false;
    }
    return Math.abs(intakeTemperature - setPointTemperature) <= 0.21;
  };

  /*
   *
   * @method getIntDisplay
   * @public
   *
   * @description Returns the integer part of a given value in string format
   * Returns '--' if value is not a number
   *
   * @param {string|number} value - A value can be either or string or a number
   *
   * @returns {string} A string representation of the value
   *
   * @example getIntDisplay(4.5) returns 4
   *
   */
  this.getIntDisplay = function(value) {
    value = parseInt(value);
    if (!isNaN(value)) {
      return value;
    } else {
      return '--';
    }
  };

  /*
   *
   * @method getDecimalDisplay
   * @public
   *
   * @description Returns the first decimal part of a given value in string format, including '.'
   * Returns '' if value is not a number
   *
   * @param {string|number} value - A value can be either or string or a number
   *
   * @returns {string} A string representation of the value
   *
   * @example getDecimalDisplay(4.5) returns .5
   *
   */
  this.getDecimalDisplay = function(value) {
    var firstDecimal, strArray;
    if ((value != null) && value[value.length - 1] === '.') {
      return '.';
    }
    value = parseFloat(value);
    if (!isNaN(value)) {
      value = value.toFixed(1);
      strArray = value.toString().split('.');
      if (strArray.length > 1) {
        firstDecimal = strArray[1].charAt(0);
        if (firstDecimal !== '0') {
          return '.' + firstDecimal;
        }
      }
    }
    return '';
  };

  /*
   *
   * @method isValueMoreThanOneDecimal
   * @public
   *
   * @description Returns true if the value has more than one decimal digit
   *
   * @param {string|number} value - A value can be either or string or a number
   *
   * @returns {boolean} True if the value has more than one decimal digit
   *
   * @example isValueMoreThanOneDecimal(4.55) returns true
   *
   */
  this.isMoreThanOneDecimal = function(value) {
    var decimals, strArray;
    value = parseFloat(value);
    if (!isNaN(value)) {
      strArray = value.toString().split('.');
      if (strArray.length > 1) {
        decimals = strArray[1];
        if (decimals.length > 1) {
          return true;
        }
      }
    }
    return false;
  };

  /*
   *
   * @method isThreeDigits
   * @public
   *
   * @description Returns true if the value contains three digits
   *
   * @param {string|number} value - A value can be either or string or a number
   *
   * @returns {boolean} True if the value contains three digits, false otherwise
   *
   */
  this.isThreeDigits = function(value) {
    value = parseInt(value);
    if (!isNaN(value)) {
      return value.toString().length === 3;
    }
    return false;
  };

  /*
   *
   * @method computerCircleScaleToViewPort
   * @public
   *
   * @description Given a diameter of a circle element, which is positioned in the corner of the app,
   * Calculate the scale / multiplier it would require to expand the circle to cover the entire view port
   * e.g. A scale of 5 indicates that the circle element would have to be five times its original size in order to cover the entire view port
   *
   * @param {number} diameter - The diameter of the circle element in px unit
   *
   * @returns {number} scale - the scale / multipler it would require to expand the circle to cover the entire view port
   *
   */
  this.computerCircleScaleToViewPort = function(diameter) {
    var scale;
    scale = Math.sqrt(Math.pow($window.innerHeight, 2) + Math.pow($window.innerWidth, 2)) / (diameter / 2);
    scale = Math.round(scale * 10) / 10;
    return scale;
  };
  return this;
}]);




this.app.controller('AdminNavController', ["$rootScope", function($rootScope) {
  this.menuItemsTemplate = "/assets/templates/admin/adminNav/adminNavItems.html";
  $rootScope.$on('$stateChangeSuccess', (function(_this) {
    return function() {
      return _this.showMenu = false;
    };
  })(this));
  return this;
}]);




this.app.controller('ComponentEditController', ["$scope", "ComponentService", "$stateParams", function($scope, ComponentService, $stateParams) {
  ComponentService.show({
    id: $stateParams.id
  }, ((function(_this) {
    return function(data) {
      _this.type = data.componentType;
      _this.name = data.name;
      _this.meta = data.meta;
      _.defaults(_this.meta, {
        experiment: {
          variationCount: 2
        }
      });
      _this.parentType = data.componentParentType;
      _this.parentId = data.componentParentId;
      return _this.position = data.position;
    };
  })(this)), ((function(_this) {
    return function(error) {
      return _this.showNewButton = true;
    };
  })(this)));
  return this;
}]);




this.app.controller('ComponentFormController', ["$scope", "ComponentService", "authenticationService", "$state", "$stateParams", function($scope, ComponentService, authenticationService, $state, $stateParams) {
  var parentState;
  this.showComponentOptions = ['everyone', 'premium', 'non-premium'];
  this.typeOptions = ['heroSlider', 'hero', 'matrix', 'fifty-fifty', 'feed', 'header', 'text-block', 'matrix-filter', 'matrix-collapsible', 'divider', 'media', 'banner', 'comments', 'pageNav', 'olapic', 'custom'];
  this.sizeOptions = ['full', 'standard', 'small'];
  this.themeOptions = ['light', 'dark', 'gray', 'orange'];
  this.paddedClassOptions = ['', 'padded padded-large'];
  this.navOptions = ['ghost'];
  this.create = (function(_this) {
    return function() {
      var componentParams;
      componentParams = {
        componentParentType: _this.parentType,
        componentParentId: _this.parentId,
        componentType: _this.type,
        name: _this.name,
        meta: _this.meta
      };
      return ComponentService.create({
        component: componentParams
      }, (function(component) {
        if (_this.parentType) {
          return $state.go(parentState(_this.parentType), {
            id: _this.parentId
          });
        } else {
          return $state.go('main.home');
        }
      }), function(error) {
        return console.log('Error while saving: ', error);
      });
    };
  })(this);
  this.save = (function(_this) {
    return function() {
      var componentParams;
      componentParams = {
        componentParentType: _this.parentType,
        componentParentId: _this.parentId,
        componentType: _this.type,
        name: _this.name,
        meta: _this.meta,
        position: _this.position
      };
      return ComponentService.update({
        id: $stateParams.id,
        component: componentParams
      }, (function(component) {
        return _this.goToParent();
      }), function(error) {
        return console.log('Error while saving: ', error);
      });
    };
  })(this);
  this.cancel = (function(_this) {
    return function() {
      return _this.goToParent();
    };
  })(this);
  this.updateType = (function(_this) {
    return function(componentType) {
      var newComponentType, newItem;
      newComponentType = ComponentService["new"]({
        type: componentType
      });
      newItem = ComponentService.newItem(componentType);
      _this.meta = angular.extend({}, newComponentType.meta, _this.meta);
      return angular.forEach(_this.meta.items, function(item, index) {
        if (_this.meta.items[0]) {
          return _this.meta.items[0] = angular.merge({}, newItem, _this.meta.items[0]);
        } else {
          return _this.meta.items[0] = newItem;
        }
      });
    };
  })(this);
  this.clear = (function(_this) {
    return function() {
      _this.name = null;
      _this.type = null;
      return _this.meta = ComponentService["new"]().meta;
    };
  })(this);
  this["delete"] = (function(_this) {
    return function() {
      var confirmed, destroyError, destroySuccess;
      confirmed = confirm('Are you sure you want to delete this component?');
      if (confirmed) {
        destroySuccess = function() {
          return _this.goToParent();
        };
        destroyError = function() {
          return console.log('error deleting');
        };
        return ComponentService.destroy({
          id: $stateParams.id
        }, destroySuccess, destroyError);
      }
    };
  })(this);
  this.goToParent = (function(_this) {
    return function() {
      if (_this.parentType) {
        return $state.go(parentState(_this.parentType), {
          id: _this.parentId
        });
      } else {
        return $state.go('main.home');
      }
    };
  })(this);
  parentState = function(parentType) {
    switch (parentType) {
      case 'Page':
        return 'main.pages';
    }
  };
  this.setupExport = (function(_this) {
    return function() {
      var blob, data, exportContent;
      exportContent = {
        type: _this.type,
        meta: _this.meta
      };
      data = JSON.stringify(exportContent);
      blob = new Blob([data], {
        type: 'application/json'
      });
      _this.exportUrl = (window.URL || window.webkitURL).createObjectURL(blob);
      return _this.exportTitle = "component_" + _this.name + "_" + (Date.now()) + ".json";
    };
  })(this);
  this.showExperimentUI = false;
  $scope.$watch('component.type', (function(_this) {
    return function(newValue) {
      return _this.setupExport();
    };
  })(this));
  $scope.$watch('component.importFile', (function(_this) {
    return function(newValue) {
      var fixedstring, newComponentContent;
      if (newValue) {
        fixedstring = decodeURIComponent(escape(newValue));
        newComponentContent = JSON.parse(fixedstring);
        _this.type = newComponentContent.type;
        return _this.meta = newComponentContent.meta;
      }
    };
  })(this));
  return this;
}]);

this.app.directive('componentForm', function() {
  return {
    restrict: 'E',
    scope: {},
    controller: 'ComponentFormController',
    controllerAs: 'component',
    bindToController: {
      parentType: '=',
      parentId: '=',
      name: '=',
      type: '=',
      meta: '=',
      mode: '=',
      position: '='
    },
    templateUrl: "/assets/templates/admin/components/form.html"
  };
});




this.app.controller('ComponentNewController', ["$scope", "ComponentService", "authenticationService", "$state", "$stateParams", function($scope, ComponentService, authenticationService, $state, $stateParams) {
  this.parentType = $stateParams.componentParentType;
  this.parentId = $stateParams.componentParentId;
  this.name = '';
  this.type = '';
  this.meta = ComponentService["new"]().meta;
  this.position = 0;
  return this;
}]);




this.app.controller('ComponentsIndexController', ["ComponentService", function(ComponentService) {
  this.index = [];
  ComponentService.index(((function(_this) {
    return function(components) {
      return _this.index = components;
    };
  })(this)), function(error) {
    return console.log('Error while getting components: ', error);
  });
  return this;
}]);




this.app.directive('banner', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'banner',
    controller: function() {
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '=',
      type: '='
    },
    templateUrl: "/assets/templates/components/banner/banner.html"
  };
});




this.app.directive('bannerForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'bannerForm',
      controller: function() {
        this.typeOptions = ['Text', 'Inline Text', 'Joule 1', 'Joule Nav', 'Madlib', 'Premium Paywall', 'Premium Class'];
        this.setItem = function(selectedItem, currentItem) {
          return angular.forEach(currentItem.content, function(value, key) {
            if (selectedItem.hasOwnProperty(key)) {
              return currentItem.content[key] = selectedItem[key];
            }
          });
        };
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/banner/bannerForm.html"
    };
  }
]);




this.app.directive('comments', ["$http", "csConfig", "CommentService", "$state", "ModalService", function($http, csConfig, CommentService, $state, ModalService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'comments',
    controller: function() {
      this.per = 20;
      this.currentPage = 1;
      this.currentUser = $state.currentUser;
      this.toolbar = CommentService.toolbar;
      this.loadComments = (function(_this) {
        return function(page, per) {
          if (page == null) {
            page = 1;
          }
          per = _this.per || 20;
          _this.currentPage = page;
          _this.showSpinner = true;
          return $http.get(csConfig.bloomApiEndpoint + "/discussions/" + _this.discussionId + "?apiKey=xchefsteps&sso=true&page=" + page + "&per=" + per).then(function(discussion) {
            var pageNums;
            pageNums = Math.ceil(discussion.data.commentCount / per);
            _this.pages = _.range(1, pageNums + 1);
            _this.comments = discussion.data.comments;
            return _this.showSpinner = false;
          });
        };
      })(this);
      if (this.discussionId) {
        this.loadComments(1, this.per);
      }
      this.submit = (function(_this) {
        return function() {
          var comment;
          comment = {
            content: _this.input,
            discussionId: _this.discussionId,
            discussionType: 'post'
          };
          return CommentService.post(comment).then(function(response) {
            var newComment;
            newComment = response.data.commentData;
            newComment.children = [];
            _this.comments.push(newComment);
            return _this.input = null;
          });
        };
      })(this);
      this.login = function() {
        return ModalService.open('login');
      };
      this.paginationClass = (function(_this) {
        return function(page) {
          if (page === _this.currentPage) {
            return 'active';
          }
        };
      })(this);
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      discussionId: '=',
      commentsTitle: '=',
      description: '=',
      comments: '='
    },
    templateUrl: "/assets/templates/components/comments/comments.html"
  };
}]);




this.app.directive('commentsForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'commentsForm',
      controller: function() {
        return this;
      },
      bindToController: {
        discussionId: '=',
        commentsTitle: '=',
        description: '='
      },
      templateUrl: "/assets/templates/components/comments/commentsForm.html"
    };
  }
]);




this.app.directive('customButton', ["AnalyticsService", "PricingService", function(AnalyticsService, PricingService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'customButton',
    controller: function() {
      this.track = (function(_this) {
        return function() {
          return AnalyticsService.track(_this.content.type + " Button Clicked", {
            title: _this.content.title,
            buttonUrl: _this.content.url,
            filename: _this.content.filename,
            context: _this.content.context
          });
        };
      })(this);
      return this;
    },
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/customButton/customButton.html"
  };
}]);




this.app.directive('customButtonForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'customButton',
      controller: function() {
        this.themeOptions = ['outline light', 'outline orange', 'outline red', 'outline dark', 'solid light', 'solid orange', 'solid red', 'solid dark', 'button-underline'];
        this.typeOptions = ['standard', 'download', 'signup', 'shopify'];
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/customButton/customButtonForm.html"
    };
  }
]);




this.app.directive('customComponent', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'customComponent',
    controller: function() {
      this.templateUrl = "/assets" + this.content.template;
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '=',
      type: '='
    },
    templateUrl: "/assets/templates/components/customComponent/customComponent.html"
  };
});




this.app.directive('customComponentForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'customComponentForm',
      controller: function() {
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/customComponent/customComponentForm.html"
    };
  }
]);




this.app.directive('divider', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'divider',
      controller: function() {
        this.heightTypeClass = (function(_this) {
          return function() {
            return "divider-height-" + _this.content.heightType;
          };
        })(this);
        return this;
      },
      bindToController: {
        theme: '=',
        content: '='
      },
      templateUrl: "/assets/templates/components/divider/divider.html"
    };
  }
]);




this.app.directive('dividerForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'divider',
      controller: function() {
        this.heightTypeOptions = ['standard', 'short'];
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/divider/dividerForm.html"
    };
  }
]);




this.app.directive('activityFeed', ["AlgoliaSearchService", "Mapper", function(AlgoliaSearchService, Mapper) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'matrix',
    controller: function() {
      this.applyClass = function() {
        var matrixClass;
        matrixClass = [];
        matrixClass.push("matrix-" + this.columns + "-col");
        matrixClass.push("matrix-" + (this.itemType.toLowerCase()));
        return matrixClass.join(' ');
      };
      this.doSearch = (function(_this) {
        return function() {
          var mapper, params;
          params = {
            difficulty: 'any',
            generator: 'chefsteps',
            published_status: 'published',
            page: '1',
            search_all: '',
            attributesToRetrieve: 'objectID,title,url,image,likes_count,description,has_video,activity_type',
            sort: 'newest'
          };
          mapper = Mapper.generate(['objectID', 'title', 'image', 'buttonMessage', 'url', 'likes_count', 'description', 'has_video', 'activity_type']);
          return AlgoliaSearchService.search(params).then(function(data) {
            var dataToMap, numItems;
            numItems = _this.rows * _this.columns;
            dataToMap = data.slice(0, numItems);
            return _this.items = Mapper.mapObject(dataToMap, mapper);
          });
        };
      })(this);
      this.showAllLikes = true;
      return this;
    },
    bindToController: {
      theme: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      buttonMessage: '=',
      descriptionCharLimit: '='
    },
    link: function(scope, element, attrs, controller) {
      scope.$watch('matrix.rows', function(newValue, oldValue) {
        if (newValue) {
          return controller.doSearch();
        }
      });
      return scope.$watch('matrix.columns', function(newValue, oldValue) {
        if (newValue) {
          return controller.doSearch();
        }
      });
    },
    templateUrl: "/assets/templates/components/matrix/matrix.html"
  };
}]);




this.app.directive('feedForm', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'matrix',
    controller: ["$scope", function($scope) {
      this.feedTypeOptions = ['activity', 'search'];
      this.itemTypeOptions = ['Media', 'List', 'Circle', 'Card'];
      this.applyClass = (function(_this) {
        return function() {
          var matrixClass;
          matrixClass = [];
          matrixClass.push("matrix-" + _this.columns + "-col");
          matrixClass.push("matrix-" + (_this.itemType.toLowerCase()));
          return matrixClass.join(' ');
        };
      })(this);
      return this;
    }],
    bindToController: {
      items: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      theme: '=',
      feedType: '=',
      searchQuery: '=',
      descriptionCharLimit: '='
    },
    templateUrl: "/assets/templates/components/feed/feedForm.html"
  };
});




this.app.service('Mapper', function() {
  this.mapObject = function(data, connections, maxNumber) {
    var mapped, responseKeys;
    if (maxNumber) {
      data = data.splice(0, maxNumber);
    }
    responseKeys = Object.keys(data);
    return mapped = data.map(function(item, index) {
      var connection, i, len, mappedItem, value;
      mappedItem = {};
      for (i = 0, len = connections.length; i < len; i++) {
        connection = connections[i];
        value = connection.value;
        if (value && connection.value.length > 0) {
          mappedItem[connection.componentKey] = value;
        } else {
          mappedItem[connection.componentKey] = item[connection.sourceKey];
        }
      }
      return {
        content: mappedItem
      };
    });
  };
  this.generate = function(attrs) {
    var attr, i, len, mapper, mapperItem;
    mapper = [];
    for (i = 0, len = attrs.length; i < len; i++) {
      attr = attrs[i];
      mapperItem = {
        componentKey: attr,
        sourceKey: attr,
        value: ""
      };
      mapper.push(mapperItem);
    }
    return mapper;
  };
  this.update = function(mapper, componentKey, updateObject) {
    var i, len, mapperItem, results;
    results = [];
    for (i = 0, len = mapper.length; i < len; i++) {
      mapperItem = mapper[i];
      if (mapperItem['componentKey'] === componentKey) {
        results.push(angular.forEach(updateObject, function(value, key) {
          return mapperItem[key] = value;
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  return this;
});




this.app.directive('searchFeed', ["AlgoliaSearchService", "Mapper", function(AlgoliaSearchService, Mapper) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'matrix',
    controller: function() {
      this.applyClass = function() {
        var matrixClass;
        matrixClass = [];
        matrixClass.push("matrix-" + this.columns + "-col");
        matrixClass.push("matrix-" + (this.itemType.toLowerCase()));
        return matrixClass.join(' ');
      };
      this.doSearch = (function(_this) {
        return function() {
          var mapper, params;
          params = {
            difficulty: 'any',
            generator: 'chefsteps',
            published_status: 'published',
            page: '1',
            search_all: _this.searchQuery,
            attributesToRetrieve: 'objectID,title,url,image,likes_count,description,has_video,activity_type',
            sort: 'relevance'
          };
          mapper = Mapper.generate(['objectID', 'title', 'image', 'buttonMessage', 'url', 'description', 'has_video', 'likes_count', 'activity_type']);
          return AlgoliaSearchService.search(params).then(function(data) {
            var dataToMap, numItems;
            numItems = _this.rows * _this.columns;
            dataToMap = data.slice(0, numItems);
            return _this.items = Mapper.mapObject(dataToMap, mapper);
          });
        };
      })(this);
      this.showAllLikes = true;
      return this;
    },
    bindToController: {
      theme: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      searchQuery: '=',
      buttonMessage: '=',
      descriptionCharLimit: '='
    },
    link: function(scope, element, attrs, controller) {
      scope.$watch('matrix.searchQuery', function(newValue, oldValue) {
        return controller.doSearch();
      });
      scope.$watch('matrix.rows', function(newValue, oldValue) {
        return controller.doSearch();
      });
      return scope.$watch('matrix.columns', function(newValue, oldValue) {
        return controller.doSearch();
      });
    },
    templateUrl: "/assets/templates/components/matrix/matrix.html"
  };
}]);




this.app.directive('fiftyFifty', ["csFilepickerMethods", function(csFilepickerMethods) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'fiftyFifty',
    controller: function() {
      this.alignTypeClass = (function(_this) {
        return function() {
          return "fifty-fifty-align-" + _this.content.alignType;
        };
      })(this);
      this.styleTypeClass = (function(_this) {
        return function() {
          return "fifty-fifty-style-" + _this.content.styleType;
        };
      })(this);
      return this;
    },
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/fiftyFifty/fiftyFifty.html"
  };
}]);




this.app.directive('fiftyFiftyForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'fiftyFifty',
      controller: function() {
        this.alignTypeOptions = ['left', 'right'];
        if (!this.content.alignType) {
          this.content.alignType = 'left';
        }
        this.styleTypeOptions = ['full-bleed', 'padded'];
        if (!this.content.styleType) {
          this.content.styleType = 'full-bleed';
        }
        this.setItem = function(selectedItem, currentItem) {
          return angular.forEach(currentItem.content, function(value, key) {
            if (selectedItem.hasOwnProperty(key)) {
              return currentItem.content[key] = selectedItem[key];
            }
          });
        };
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/fiftyFifty/fiftyFiftyForm.html"
    };
  }
]);




this.app.directive('header', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'header',
      controller: function() {},
      bindToController: {
        theme: '=',
        content: '='
      },
      templateUrl: "/assets/templates/components/header/header.html"
    };
  }
]);




this.app.directive('headerForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'header',
      controller: function() {},
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/header/headerForm.html"
    };
  }
]);




this.app.directive('hero', ["csFilepickerMethods", "$window", "AnalyticsService", "$rootScope", "$timeout", function(csFilepickerMethods, $window, AnalyticsService, $rootScope, $timeout) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'hero',
    controller: ["$element", "$scope", function($element, $scope) {
      this.getAspect = function() {
        if (($element.children()[0].clientHeight / 9) > ($element.children()[0].clientWidth / 16)) {
          return 'portrait';
        }
        return 'landscape';
      };
      this.isVideoVisible = false;
      this.mediaContent = _.omit(this.content, ["description"]);
      this.showVideo = (function(_this) {
        return function() {
          _this.isVideoVisible = true;
          return $rootScope.$broadcast('nav.hideNav', _this.isVideoVisible);
        };
      })(this);
      this.hideVideo = (function(_this) {
        return function() {
          _this.isVideoVisible = false;
          return $rootScope.$broadcast('nav.hideNav', _this.isVideoVisible);
        };
      })(this);
      this.handleEmbedVideoClicked = (function(_this) {
        return function() {
          return _this.hideVideo();
        };
      })(this);
      this.track = function() {
        return AnalyticsService.track('Component Item Clicked', {
          type: 'hero',
          title: this.content.title,
          url: this.content.url
        });
      };
      this.heroImage = (function(_this) {
        return function() {
          return csFilepickerMethods.convert(_this.content.image, {
            width: $window.outerWidth
          });
        };
      })(this);
      this.heightTypeClass = (function(_this) {
        return function() {
          return "hero-height-" + _this.content.heightType;
        };
      })(this);
      this.heroTypeClass = (function(_this) {
        return function() {
          return "hero-type-" + (_this.content.heroType || 'standard');
        };
      })(this);
      this.alignTypeClass = (function(_this) {
        return function() {
          return "hero-align-" + _this.content.alignType;
        };
      })(this);
      $scope.$watch('hero.content', (function(_this) {
        return function(newValue, oldValue) {
          if (newValue && _this.autoplay) {
            if (_this.isVideoVisible) {
              _this.hideVideo();
            }
            return $timeout(function() {
              return _this.showVideo();
            });
          }
        };
      })(this));
      return this;
    }],
    link: function(scope, element, attrs) {
      if (scope.hero.content && scope.hero.content.url && !scope.hero.content.buttonMessage) {
        element.on('mouseenter', function() {
          return element.css('cursor', 'pointer');
        });
        return element.on('click', function() {
          return $window.location.href = scope.hero.content.customButton.url;
        });
      }
    },
    bindToController: {
      theme: '=',
      content: '=',
      autoplay: '='
    },
    templateUrl: "/assets/templates/components/hero/hero.html"
  };
}]);




this.app.directive('heroForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'hero',
      controller: function() {
        this.heroTypeOptions = ['standard', 'collection'];
        if (!this.content.heroType) {
          this.content.heightType = 'standard';
        }
        this.heightTypeOptions = ['standard', 'short', 'tall'];
        if (!this.content.heightType) {
          this.content.heightType = 'standard';
        }
        this.alignTypeOptions = ['left', 'center', 'right'];
        if (!this.content.alignType) {
          this.content.alignType = 'center';
        }
        this.setItem = function(selectedItem, currentItem) {
          return angular.forEach(currentItem.content, function(value, key) {
            if (selectedItem.hasOwnProperty(key)) {
              return currentItem.content[key] = selectedItem[key];
            }
          });
        };
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/hero/heroForm.html"
    };
  }
]);




this.app.directive('heroSlider', ["csFilepickerMethods", "$window", "AnalyticsService", "$rootScope", "$timeout", "$interval", function(csFilepickerMethods, $window, AnalyticsService, $rootScope, $timeout, $interval) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'heroSlider',
    controller: ["$element", "$scope", function($element, $scope) {
      if (this.content.slideInterval) {
        this.sliderInterval = this.content.slideInterval;
      } else {
        this.sliderInterval = '4000';
      }
      this.flickityOptions = {
        wrapAround: true,
        autoPlay: this.sliderInterval,
        pageDots: true
      };
      this.heightOptionClass = (function(_this) {
        return function() {
          return "slider-height-" + _this.content.slideHeight;
        };
      })(this);
      return this;
    }],
    link: function(scope, element, attrs) {},
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/heroSlider/heroSlider.html"
  };
}]);




this.app.directive('heroSliderForm', ["ComponentService", function(ComponentService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'heroSliderForm',
    controller: function() {
      this.themeOptions = ['light', 'dark', 'gray', 'orange'];
      this.heightOptions = ['standard', 'tall'];
      if (!this.content.slideHeight) {
        this.content.slideHeight = 'standard';
      }
      this.activeSlide = 0;
      if (this.content.slides === void 0) {
        this.content.slides = [];
      }
      this.addSlide = (function(_this) {
        return function() {
          var newSlide;
          newSlide = ComponentService.newItem('hero').content;
          return _this.content.slides.push(newSlide);
        };
      })(this);
      this.setActiveSlide = (function(_this) {
        return function(index) {
          return _this.activeSlide = index;
        };
      })(this);
      this.deleteSlide = (function(_this) {
        return function(index) {
          return _this.content.slides.splice(index, 1);
        };
      })(this);
      return this;
    },
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/heroSlider/heroSliderForm.html"
  };
}]);




this.app.directive('matrix', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'matrix',
    controller: ["$scope", function($scope) {
      this.applyClass = (function(_this) {
        return function() {
          var matrixClass;
          matrixClass = [];
          if (_this.columns) {
            matrixClass.push("matrix-" + _this.columns + "-col");
          }
          if (_this.itemType) {
            matrixClass.push("matrix-" + (_this.itemType.toLowerCase()));
          }
          return matrixClass.join(' ');
        };
      })(this);
      return this;
    }],
    bindToController: {
      items: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      theme: '=',
      itemTypeOptions: '=',
      descriptionCharLimit: '='
    },
    templateUrl: "/assets/templates/components/matrix/matrix.html"
  };
});




this.app.controller('matrixFormController', ["ComponentService", function(ComponentService) {
  this.itemTypeOptions = ['Media', 'List', 'Circle', 'Popup', 'Icon', 'Card'];
  this.applyClass = (function(_this) {
    return function() {
      var matrixClass;
      matrixClass = [];
      matrixClass.push("matrix-" + _this.columns + "-col");
      matrixClass.push("matrix-" + (_this.itemType.toLowerCase()));
      return matrixClass.join(' ');
    };
  })(this);
  this.setItem = function(selectedItem, currentItem) {
    console.log('setting item');
    return angular.forEach(currentItem.content, function(value, key) {
      if (selectedItem.hasOwnProperty(key)) {
        return currentItem.content[key] = selectedItem[key];
      }
    });
  };
  this.setNumItems = (function(_this) {
    return function() {
      var delta, matrixItem;
      _this.numItems = _this.rows * _this.columns;
      delta = _this.numItems - _this.items.length;
      matrixItem = ComponentService.newItem('matrix');
      if (delta > 0) {
        _.times(delta, function() {
          var newMatrixItem;
          newMatrixItem = angular.copy(matrixItem);
          return _this.items.push(newMatrixItem);
        });
      }
      if (delta < 0) {
        return _this.items = _this.items.slice(0, _this.numItems);
      }
    };
  })(this);
  return this;
}]);

this.app.directive('matrixForm', ["ComponentService", function(ComponentService) {
  return {
    restrict: 'E',
    scope: {},
    controller: 'matrixFormController',
    controllerAs: 'matrix',
    bindToController: {
      items: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      theme: '=',
      descriptionCharLimit: '='
    },
    templateUrl: "/assets/templates/components/matrix/matrixForm.html"
  };
}]);




this.app.directive('matrixCollapsible', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'matrixCollapsible',
    controller: ["$scope", "$element", function($scope, $element) {
      this.collapsed = $(window).width() < 900 ? true : false;
      this.toggleCollapse = function() {
        return this.collapsed = !this.collapsed;
      };
      this.applyClass = (function(_this) {
        return function() {
          var matrixClass;
          matrixClass = [];
          if (_this.columns) {
            matrixClass.push("matrix-" + _this.columns + "-col");
          }
          if (_this.itemType) {
            matrixClass.push("matrix-" + (_this.itemType.toLowerCase()));
          }
          if (_this.showItemNumbers) {
            matrixClass.push("matrix-item-numbered");
          }
          return matrixClass.join(' ');
        };
      })(this);
      this.getItemCount = (function(_this) {
        return function() {
          return _.filter(_this.items, function(item) {
            return item.content.title;
          }).length;
        };
      })(this);
      return this;
    }],
    bindToController: {
      title: '=',
      showItemNumbers: '=',
      items: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      theme: '=',
      itemTypeOptions: '=',
      descriptionCharLimit: '='
    },
    templateUrl: "/assets/templates/components/matrixCollapsible/matrixCollapsible.html"
  };
});




this.app.controller('matrixCollapsibleFormController', ["ComponentService", function(ComponentService) {
  this.itemTypeOptions = ['List'];
  this.applyClass = (function(_this) {
    return function() {
      var matrixClass;
      matrixClass = [];
      matrixClass.push("matrix-" + _this.columns + "-col");
      matrixClass.push("matrix-" + (_this.itemType.toLowerCase()));
      return matrixClass.join(' ');
    };
  })(this);
  this.setItem = function(selectedItem, currentItem) {
    console.log('setting item');
    return angular.forEach(currentItem.content, function(value, key) {
      if (selectedItem.hasOwnProperty(key)) {
        return currentItem.content[key] = selectedItem[key];
      }
    });
  };
  this.setNumItems = (function(_this) {
    return function() {
      var delta, matrixItem;
      _this.numItems = _this.rows * _this.columns;
      delta = _this.numItems - _this.items.length;
      matrixItem = ComponentService.newItem('matrix');
      if (delta > 0) {
        _.times(delta, function() {
          var newMatrixItem;
          newMatrixItem = angular.copy(matrixItem);
          return _this.items.push(newMatrixItem);
        });
      }
      if (delta < 0) {
        return _this.items = _this.items.slice(0, _this.numItems);
      }
    };
  })(this);
  return this;
}]);

this.app.directive('matrixCollapsibleForm', ["ComponentService", function(ComponentService) {
  return {
    restrict: 'E',
    scope: {},
    controller: 'matrixCollapsibleFormController',
    controllerAs: 'matrixCollapsibleForm',
    bindToController: {
      title: '=',
      items: '=',
      showItemNumbers: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      theme: '=',
      descriptionCharLimit: '='
    },
    templateUrl: "/assets/templates/components/matrixCollapsible/matrixCollapsibleForm.html"
  };
}]);




this.app.directive('matrixFilter', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'matrixFilter',
    controller: ["$scope", function($scope) {
      this.showMore = false;
      if (!this.tags) {
        this.tags = [];
      }
      if (this.includeAll) {
        this.activeTag = 'all';
      } else {
        this.activeTag = this.tags[0];
      }
      this.applyClass = (function(_this) {
        return function() {
          var matrixFilterClass;
          matrixFilterClass = [];
          if (_this.columns) {
            matrixFilterClass.push("matrix-" + _this.columns + "-col");
          }
          if (_this.itemType) {
            matrixFilterClass.push("matrix-" + (_this.itemType.toLowerCase()));
          }
          return matrixFilterClass.join(' ');
        };
      })(this);
      this.setActiveTag = (function(_this) {
        return function(tag) {
          return _this.activeTag = tag;
        };
      })(this);
      this.hasActiveTag = (function(_this) {
        return function(item) {
          if (_this.activeTag && (item.content.tags[_this.activeTag] || _this.activeTag === 'all')) {
            return true;
          } else {
            return false;
          }
        };
      })(this);
      this.visibleItems = (function(_this) {
        return function() {
          var visibleItems;
          visibleItems = _this.visibleRows * _this.columns;
          if (_this.showMore) {
            return _this.filtered.length;
          } else {
            return visibleItems;
          }
        };
      })(this);
      this.toggleMore = (function(_this) {
        return function() {
          return _this.showMore = !_this.showMore;
        };
      })(this);
      return this;
    }],
    bindToController: {
      title: '=',
      items: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      theme: '=',
      itemTypeOptions: '=',
      descriptionCharLimit: '=',
      tags: '=',
      includeAll: '=',
      visibleRows: '='
    },
    templateUrl: "/assets/templates/components/matrixFilter/matrixFilter.html"
  };
});




this.app.controller('matrixFilterFormController', ["ComponentService", function(ComponentService) {
  this.itemTypeOptions = ['Media', 'List', 'Circle', 'Popup'];
  this.applyClass = (function(_this) {
    return function() {
      var matrixClass;
      matrixClass = [];
      matrixClass.push("matrix-" + _this.columns + "-col");
      matrixClass.push("matrix-" + (_this.itemType.toLowerCase()));
      return matrixClass.join(' ');
    };
  })(this);
  this.setItem = function(selectedItem, currentItem) {
    return angular.forEach(currentItem.content, function(value, key) {
      if (selectedItem.hasOwnProperty(key)) {
        return currentItem.content[key] = selectedItem[key];
      }
    });
  };
  this.setNumItems = (function(_this) {
    return function() {
      var delta, matrixItem;
      _this.numItems = _this.rows * _this.columns;
      delta = _this.numItems - _this.items.length;
      matrixItem = ComponentService.newItem('matrix-filter');
      if (delta > 0) {
        _.times(delta, function() {
          var newMatrixItem;
          newMatrixItem = angular.copy(matrixItem);
          return _this.items.push(newMatrixItem);
        });
      }
      if (delta < 0) {
        return _this.items = _this.items.slice(0, _this.numItems);
      }
    };
  })(this);
  this.setTags = (function(_this) {
    return function() {
      return _this.tags = _this.tagsInput.split(',');
    };
  })(this);
  this.initializeTagInput = (function(_this) {
    return function() {
      return _this.tagsInput = _this.tags.join(',');
    };
  })(this);
  this.toggleItemTag = function(itemTags, tag) {
    return itemTags[tag] = !itemTags[tag];
  };
  this.initializeTagInput();
  return this;
}]);

this.app.directive('matrixFilterForm', ["ComponentService", function(ComponentService) {
  return {
    restrict: 'E',
    scope: {},
    controller: 'matrixFilterFormController',
    controllerAs: 'matrixFilterForm',
    bindToController: {
      title: '=',
      items: '=',
      rows: '=',
      columns: '=',
      itemType: '=',
      theme: '=',
      descriptionCharLimit: '=',
      tags: '=',
      includeAll: '=',
      visibleRows: '='
    },
    templateUrl: "/assets/templates/components/matrixFilter/matrixFilterForm.html"
  };
}]);




this.app.directive('media', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'media',
    controller: ["$element", "$scope", "$timeout", function($element, $scope, $timeout) {
      this.getAspect = function() {
        if (($element.children()[0].clientHeight / 9) > ($element.children()[0].clientWidth / 16)) {
          return 'portrait';
        }
        return 'landscape';
      };
      this.isVideoVisible = false;
      this.play = (function(_this) {
        return function() {
          _this.isVideoVisible = true;
          return $scope.$broadcast('playVideoClicked');
        };
      })(this);
      return this;
    }],
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '='
    },
    templateUrl: "/assets/templates/components/media/media.html"
  };
});




this.app.directive('mediaForm', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'mediaForm',
    controller: function() {
      this.setItem = function(selectedItem, currentItem) {
        console.log('selectedItem: ', selectedItem);
        console.log('currentItem: ', currentItem);
        return angular.forEach(currentItem.content, function(value, key) {
          if (selectedItem.hasOwnProperty(key)) {
            return currentItem.content[key] = selectedItem[key];
          }
        });
      };
      this.viewerTypeOptions = ['standard', 'multi'];
      return this;
    },
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/media/mediaForm.html"
  };
});




this.app.directive('mediaMulti', ["$timeout", function($timeout) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'mediaMulti',
    controller: function() {
      this.activeIndex = 0;
      this.active = true;
      this.autoplay = false;
      this.selectMedia = (function(_this) {
        return function(index) {
          _this.active = false;
          _this.activeIndex = index;
          _this.autoplay = true;
          return $timeout((function() {
            return _this.active = true;
          }), 100);
        };
      })(this);
      this.activeItem = (function(_this) {
        return function() {
          return _this.content.items[_this.activeIndex];
        };
      })(this);
      this.toggleActive = (function(_this) {
        return function() {
          return _this.active = !_this.active;
        };
      })(this);
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      content: '=',
      theme: '=',
      activeIndex: '='
    },
    templateUrl: "/assets/templates/components/media/mediaMulti.html"
  };
}]);




this.app.directive('mediaMultiForm', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'mediaMultiForm',
    controller: ["$scope", function($scope) {
      this.setNumItems = (function(_this) {
        return function() {
          var delta, item, itemsLength, ref;
          itemsLength = ((ref = _this.content.items) != null ? ref.length : void 0) || 0;
          delta = _this.content.numItems - itemsLength;
          item = {
            image: '',
            youtubeId: '',
            vimeoId: ''
          };
          if (delta > 0) {
            _.times(delta, function() {
              var newItem;
              newItem = angular.copy(item);
              return _this.content.items.push(newItem);
            });
          }
          if (delta < 0) {
            return _this.content.items = _this.content.items.slice(0, _this.content.numItems);
          }
        };
      })(this);
      if (this.content.items == null) {
        this.content.items = [];
        this.setNumItems();
      }
      return this;
    }],
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/media/mediaMultiForm.html"
  };
});




this.app.directive('olapic', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'olapic',
    controller: function() {
      return this;
    },
    bindToController: {
      theme: '=',
      content: '='
    },
    link: function(scope, element, attrs) {
      var update;
      update = function() {
        var randomElementId, render;
        randomElementId = "olapic-" + (Math.floor(Math.random() * 100000));
        $(element).find('.olapic-content').attr('id', randomElementId);
        render = function() {
          if (window.olapic) {
            return window.olapic.prepareWidget({
              'id': scope.olapic.content.instance,
              'wrapper': randomElementId
            }, {
              'renderNow': true
            });
          } else {
            return $timeout((function() {
              return render();
            }), 500);
          }
        };
        return render();
      };
      return scope.$watch('olapic.content.instance', update);
    },
    templateUrl: "/assets/templates/components/olapic/olapic.html"
  };
});




this.app.directive('olapicForm', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'olapic',
    controller: ["$scope", function($scope) {
      return this;
    }],
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/olapic/olapicForm.html"
  };
});




this.app.directive('pageNav', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'pageNav',
    controller: function() {
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '=',
      type: '='
    },
    templateUrl: "/assets/templates/components/pageNav/pageNav.html"
  };
});




this.app.directive('pageNavForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'pageNavForm',
      controller: function() {
        this.typeOptions = ['Joule'];
        this.setItem = function(selectedItem, currentItem) {
          return angular.forEach(currentItem.content, function(value, key) {
            if (selectedItem.hasOwnProperty(key)) {
              return currentItem.content[key] = selectedItem[key];
            }
          });
        };
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/pageNav/pageNavForm.html"
    };
  }
]);




this.app.directive('slider', ["$animate", function($animate) {
  return {
    restrict: 'E',
    replace: true,
    scope: {},
    controllerAs: 'slider',
    controller: ["$scope", "$element", function($scope, $element) {
      var getNextIndex, getPrevIndex, items, itemsLength, lastItemIndex;
      this.currentItemIndex = 0;
      items = this.content.items;
      itemsLength = items.length;
      lastItemIndex = itemsLength - 1;
      this.slides = [];
      this.slides = items;
      getNextIndex = function(index) {
        if (index === lastItemIndex) {
          return 0;
        } else {
          return index + 1;
        }
      };
      getPrevIndex = function(index) {
        if (index === 0) {
          return lastItemIndex;
        } else {
          return index - 1;
        }
      };
      this.slideTo = function(index) {
        return this.currentItemIndex = index;
      };
      this.next = (function(_this) {
        return function() {
          _this.currentItemIndex = getNextIndex(_this.currentItemIndex);
          return _this.slideTo(_this.currentItemIndex);
        };
      })(this);
      this.prev = function() {
        this.currentItemIndex = getPrevIndex(this.currentItemIndex);
        return this.slideTo(this.currentItemIndex);
      };
      this.isSlideActive = (function(_this) {
        return function(index) {
          if (index === _this.currentItemIndex) {
            return 'active';
          }
        };
      })(this);
      this.hasLine = function(index) {
        if (index !== 0) {
          return 'has-line';
        }
      };
      $scope.$watch('slider.currentItemIndex', (function(_this) {
        return function(currentItemIndex) {
          return _this.slides.map(function(slide, index) {
            switch (index) {
              case currentItemIndex:
                return slide.position = 0;
              case getPrevIndex(currentItemIndex):
                return slide.position = -100;
              case getNextIndex(currentItemIndex):
                return slide.position = 100;
              default:
                return slide.position = null;
            }
          });
        };
      })(this));
      this.slideTo(0);
      return this;
    }],
    link: function(scope, element, attrs) {},
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/slider/slider.html"
  };
}]);

this.app.directive('slide', ["$animate", "mobileDetectionService", function($animate, mobileDetectionService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'slide',
    require: '^slider',
    controller: ["$element", function($element) {
      this.isMobile = mobileDetectionService.isMobile;
      this.slideTo = null;
      this.videoPlaying = false;
      return this;
    }],
    link: function(scope, element, attrs, sliderController, $rootScope) {
      var getCss;
      getCss = function(position, opacity) {
        return {
          'transform': "translateX(" + position + "%)",
          '-webkit-transform': "translateX(" + position + "%)",
          '-moz-transform': "translateX(" + position + "%)",
          '-ms-transform': "translateX(" + position + "%)",
          '-o-transform': "translateX(" + position + "%)",
          'opacity': opacity
        };
      };
      scope.$watch('slide.position', function(newPosition, oldPosition) {
        scope.slide.videoPlaying = false;
        sliderController.videoPlaying = false;
        if (newPosition === 0 && oldPosition === 0) {
          element.css(getCss(0, 1));
        }
        if (newPosition === 0 && oldPosition !== 0) {
          $animate.animate(element, getCss(oldPosition, 0), getCss(newPosition, 1));
        }
        if (newPosition !== 0 && oldPosition === 0) {
          $animate.animate(element, getCss(oldPosition, 1), getCss(newPosition, 0));
        }
        if (newPosition !== 0 && oldPosition !== 0) {
          return $animate.animate(element, getCss(oldPosition, 1), getCss(newPosition, 0), 'slide-no-transition');
        }
      });
      scope.slide.togglePlay = function() {
        scope.slide.videoPlaying = !scope.slide.videoPlaying;
        return sliderController.videoPlaying = scope.slide.videoPlaying;
      };
      return scope.$on('videoEnded', function() {
        scope.slide.videoPlaying = !scope.slide.videoPlaying;
        sliderController.videoPlaying = scope.slide.videoPlaying;
        return $rootScope.$safeApply();
      });
    },
    bindToController: {
      content: '=',
      position: '=',
      active: '=',
      sliderVideoPlaying: '='
    },
    templateUrl: "/assets/templates/components/slider/slide.html"
  };
}]);




this.app.directive('textBlock', ["$filter", "$compile", "$sanitize", function($filter, $compile, $sanitize) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'textBlock',
    controller: function() {
      return this;
    },
    bindToController: {
      theme: '=',
      content: '='
    },
    link: function(scope, element, attrs) {},
    templateUrl: "/assets/templates/components/textBlock/textBlock.html"
  };
}]);




var csElements;

csElements = ['cs_h1', 'cs_h2', 'cs_h3', 'cs_h4', 'cs_h5', 'cs_h6', 'cs_p'];

this.app.directive('textBlockForm', ["$filter", function($filter) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'textBlock',
    controller: ["$scope", function($scope) {
      this.toolbar = [csElements, ['bold', 'italics'], ['csAlignLeft', 'csAlignCenter', 'csAlignRight', 'csAlignFull'], ['html']];
      $scope.$watch('textBlock.content', (function(_this) {
        return function(newValue) {
          return _this.content.description = $filter('paragraphAlignLeft')(newValue.description);
        };
      })(this));
      this.onPaste = function(html) {
        var stripped;
        stripped = String(html).replace(/<[^>]+>/gm, '');
        return stripped;
      };
      return this;
    }],
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/textBlock/textBlockForm.html"
  };
}]);

this.app.config(["$provide", function($provide) {
  $provide.decorator('taOptions', [
    '$delegate', function(taOptions) {
      taOptions.classes = {
        toolbar: 'button-toolbar',
        toolbarGroup: 'button-group',
        toolbarButton: 'button small',
        toolbarButtonActive: 'active'
      };
      return taOptions;
    }
  ]);
  return $provide.decorator('taOptions', [
    'taRegisterTool', '$delegate', 'taSelection', 'csFilepickerMethods', function(taRegisterTool, taOptions, taSelection, csFilepickerMethods) {
      var activeState, headerAction, setAlignment, setElementAlignment;
      setElementAlignment = function(element, alignment) {
        var alignments, el, i, len, option, results;
        el = angular.element(element);
        alignments = ['left', 'center', 'right', 'full'];
        results = [];
        for (i = 0, len = alignments.length; i < len; i++) {
          option = alignments[i];
          if (option === alignment) {
            results.push(el.addClass("align-" + option));
          } else {
            results.push(el.removeClass("align-" + option));
          }
        }
        return results;
      };
      setAlignment = function(alignment) {
        var contenteditable, el, element;
        element = taSelection.getSelectionElement();
        contenteditable = element.hasAttribute('contenteditable');
        el = angular.element(element);
        if (contenteditable) {
          return angular.forEach(el.children(), function(childElement) {
            return setElementAlignment(childElement, alignment);
          });
        } else {
          return setElementAlignment(element, alignment);
        }
      };
      taRegisterTool('csAlignLeft', {
        iconclass: 'fa fa-align-left',
        action: function() {
          return setAlignment('left');
        },
        activeState: function() {
          var el, element;
          element = taSelection.getSelectionElement();
          el = angular.element(element);
          return el.hasClass('align-left');
        }
      });
      taRegisterTool('csAlignRight', {
        iconclass: 'fa fa-align-right',
        action: function() {
          return setAlignment('right');
        },
        activeState: function() {
          var el, element;
          element = taSelection.getSelectionElement();
          el = angular.element(element);
          return el.hasClass('align-right');
        }
      });
      taRegisterTool('csAlignCenter', {
        iconclass: 'fa fa-align-center',
        action: function() {
          return setAlignment('center');
        },
        activeState: function() {
          var el, element;
          element = taSelection.getSelectionElement();
          el = angular.element(element);
          return el.hasClass('align-center');
        }
      });
      taRegisterTool('csAlignFull', {
        iconclass: 'fa fa-align-justify',
        action: function() {
          return setAlignment('full');
        },
        activeState: function() {
          var el, element;
          element = taSelection.getSelectionElement();
          el = angular.element(element);
          return el.hasClass('align-full');
        }
      });
      taRegisterTool('csInsertImage', {
        iconclass: 'fa fa-picture-o',
        action: function() {
          filepicker.setKey("ANAsscmHGSKqZCHObvuK6z");
          filepicker.pickAndStore({
            mimetypes: ['image/*'],
            services: ['COMPUTER']
          }, {
            location: "S3"
          }, ((function(_this) {
            return function(fpfiles) {
              var cdnURL, fpObject;
              fpObject = fpfiles[0];
              cdnURL = csFilepickerMethods.cdnURL(fpObject.url);
              return _this.$editor().wrapSelection('insertImage', cdnURL);
            };
          })(this)));
          return function(errorCode) {
            return console.log("FILEPICKER ERROR CODE: " + errorCode);
          };
        }
      });
      activeState = function(q) {
        return function() {
          return this.$editor().queryFormatBlockState(q);
        };
      };
      headerAction = function() {
        var alignmentClass, name;
        name = this.name.replace('cs_', '');
        if (name === 'h1' || name === 'h2' || name === 'h3') {
          alignmentClass = 'align-center';
        } else {
          alignmentClass = 'align-left';
        }
        return this.$editor().wrapSelection('formatBlock', '<' + name + " class=' " + alignmentClass + "'>");
      };
      angular.forEach(csElements, function(element) {
        var elementName;
        elementName = element.replace('cs_', '');
        return taRegisterTool(element.toLowerCase(), {
          buttontext: elementName,
          action: headerAction,
          activeState: activeState(elementName.toLowerCase())
        });
      });
      return taOptions;
    }
  ]);
}]);

this.app.filter('paragraphAlignLeft', function() {
  return function(input) {
    var pTagRegex;
    pTagRegex = /<p>/;
    input = input.replace(pTagRegex, function(match) {
      return match.replace(/<[^>]+>/gm, "<p class='align-left'>");
    });
    return input;
  };
});




this.app.directive('alerts', ["$rootScope", "alertService", function($rootScope, alertService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'alerts',
    controller: ["$scope", function($scope) {
      this.alerts = alertService.alerts;
      this.alertClass = function(type) {
        return "alert-" + type;
      };
      this.close = (function(_this) {
        return function(index) {
          _this.alerts.splice(index, 1);
          return console.log('delete alerts.  Alerts: ', _this.alerts);
        };
      })(this);
      return this;
    }],
    bindToController: {
      alertsFor: '@',
      alerts: '='
    },
    templateUrl: "/assets/templates/directives/alerts/alerts.html"
  };
}]);




this.app.directive('collectionNav', ["PageService", "$stateParams", function(PageService, $stateParams) {
  return {
    restrict: 'E',
    scope: {},
    replace: true,
    bindToController: {
      collectionId: '@'
    },
    controllerAs: 'collectionNav',
    controller: ["$state", function($state) {
      var handleError, handleSuccess;
      this.slug = $stateParams['context'];
      handleSuccess = (function(_this) {
        return function(data) {
          return _this.content = data;
        };
      })(this);
      handleError = function(error) {
        return console.log('Error getting page: ', error);
      };
      if (this.collectionId) {
        PageService.show({
          id: this.collectionId
        }, handleSuccess, handleError);
      }
      this.showComponent = function(component) {
        if (_.includes(['media', 'text-block', 'hero', 'banner'], component.componentType)) {
          return false;
        }
        return true;
      };
      return this;
    }],
    templateUrl: "/assets/templates/directives/collectionNav/collectionNav.html"
  };
}]);




this.app.controller('componentController', ["$scope", "ComponentService", "$state", "$rootScope", function($scope, ComponentService, $state, $rootScope) {
  var getComponent;
  getComponent = (function(_this) {
    return function() {
      return ComponentService.show({
        id: _this.componentId
      }, (function(data) {
        _this.type = data.componentType;
        _this.name = data.name;
        _this.meta = data.meta;
        _this.slug = data.slug;
        _this.size = data.meta.size;
        return _this.theme = data.meta.theme;
      }), (function(error) {
        return _this.showNewButton = true;
      }));
    };
  })(this);
  $scope.$watch('component.componentId', (function(_this) {
    return function(newValue, oldValue) {
      if (newValue) {
        if (!(_this.parentType && _this.parentId)) {
          return getComponent();
        }
      }
    };
  })(this));
  this.sizeClass = function(size) {
    return "component-" + size;
  };
  this.paddedClass = (function(_this) {
    return function(component) {
      var type;
      type = component.type;
      switch (type) {
        case 'header':
          return 'padded padded-large';
        case 'matrix':
          if (component.meta && _.contains(['Media', 'List', 'Circle', 'Header', 'Popup', 'Card'], component.meta.itemTypeName)) {
            return 'padded padded-large';
          }
          break;
        case 'matrix-collapsible':
          if (component.meta && _.contains(['Media', 'List', 'Circle', 'Header', 'Popup', 'Card'], component.meta.itemTypeName)) {
            return 'padded padded-large';
          }
          break;
        case 'matrix-filter':
          if (component.meta && _.contains(['Media', 'List', 'Circle', 'Header', 'Popup', 'Card'], component.meta.itemTypeName)) {
            return 'padded padded-large';
          }
          break;
        case 'feed':
          if (component.meta && _.contains(['Media', 'List', 'Circle', 'Header', 'Popup', 'Card'], component.meta.itemTypeName)) {
            return 'padded padded-large';
          }
          break;
        case 'media':
          if (!(component.meta.size === 'full' && component.meta.nav === 'ghost')) {
            return 'padded padded-large';
          }
          break;
        case 'text-block':
          return 'padded padded-large';
        case 'pageNav':
          return 'padded';
        case 'hero':
          if (component.meta.items[0].content.heroType === 'collection') {
            return 'padded padded-large';
          }
          break;
        case 'olapic':
          return 'padded';
        case 'custom':
          return _this.meta.paddedClass;
      }
    };
  })(this);
  this.typeClass = function(type) {
    return "component-" + type;
  };
  this.themeClass = function(theme) {
    return "theme-" + theme;
  };
  this.showEditingClass = (function(_this) {
    return function() {
      if (_this.showMenu) {
        return "component-editing";
      }
    };
  })(this);
  this.pageRequiresPremiumClass = (function(_this) {
    return function() {
      var ref;
      if (_this.pageRequiresPremium && !((ref = $state.currentUser) != null ? ref.premium : void 0)) {
        return "disable-non-premium";
      }
    };
  })(this);
  this.currentUser = $state.currentUser;
  $rootScope.$on('$stateChangeSuccess', (function(_this) {
    return function() {
      return _this.currentUser = $state.currentUser;
    };
  })(this));
  return this;
}]);

this.app.directive('component', ["$state", function($state) {
  return {
    restrict: 'E',
    scope: {},
    replace: true,
    controller: 'componentController',
    controllerAs: 'component',
    bindToController: {
      componentId: '=',
      parentType: '=',
      parentId: '=',
      isAdmin: '=',
      type: '=',
      name: '=',
      meta: '=',
      size: '=',
      theme: '=',
      pageRequiresPremium: '=',
      showMenu: '=',
      moveUp: '&',
      moveDown: '&'
    },
    templateUrl: "/assets/templates/directives/component/component.html"
  };
}]);




this.app.directive('csBackgroundImage', ["csFilepickerMethods", "staticRenderService", "$window", "$rootScope", function(csFilepickerMethods, staticRenderService, $window, $rootScope) {
  return {
    restrict: 'A',
    transclude: true,
    scope: {
      csBackgroundImageSrc: '=',
      noResize: '='
    },
    link: function(scope, element, attrs) {
      var getImageUrl, loaded, visibleInViewport;
      visibleInViewport = false;
      loaded = false;
      getImageUrl = function() {
        var elementWidth, finalWidth, imageUrl, imageWidth;
        elementWidth = element[0].clientWidth;
        finalWidth = Math.ceil(elementWidth / 50.0) * 50;
        if (window.devicePixelRatio >= 2) {
          imageWidth = finalWidth * 2;
        } else {
          imageWidth = finalWidth;
        }
        imageUrl = csFilepickerMethods.convert(scope.csBackgroundImageSrc, !scope.noResize ? {
          width: imageWidth
        } : {});
        return imageUrl;
      };
      scope.setBackground = function() {
        loaded = true;
        scope.imageUrl = getImageUrl();
        scope.thumbnailImageClass = 'thumbnail-image-hidden';
        return $rootScope.$safeApply();
      };
      scope.$watch('csBackgroundImageSrc', function(newValue) {
        if (!staticRenderService.get()) {
          scope.thumbnailImageUrl = csFilepickerMethods.convert(newValue, {
            width: 20
          });
        }
        if (newValue && visibleInViewport) {
          return scope.imageUrl = getImageUrl();
        }
      });
      scope.onEnterViewport = function() {
        visibleInViewport = true;
        if (!loaded) {
          return scope.imageUrl = getImageUrl();
        }
      };
      return $rootScope.$on('$stateChangeSuccess', function() {
        if (!loaded) {
          return scope.imageUrl = getImageUrl();
        }
      });
    },
    templateUrl: "/assets/templates/directives/csBackgroundImage/csBackgroundImage.html"
  };
}]);




this.app.directive('csBackgroundVideo', ["$window", "mobileDetectionService", "$rootScope", function($window, mobileDetectionService, $rootScope) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.isMobile = mobileDetectionService.detect();
      if (this.videoSources && !this.isMobile) {
        this.showNative = true;
      }
      if (this.youtubeId && !this.videoSources && !this.isMobile) {
        this.showYoutube = true;
      }
      if (this.vimeoId && !this.videoSources && !this.youtubeId && !this.isMobile) {
        this.showVimeo = true;
      }
      this.loop = this.loop || 0;
      return this;
    },
    controllerAs: 'csBackgroundVideo',
    bindToController: {
      youtubeId: '@',
      vimeoId: '@',
      imageUrl: '@',
      videoSources: '=',
      playVideo: '=',
      autoplay: '=',
      loop: '=',
      mute: '='
    },
    link: function(scope, element, attrs) {
      var calculateDimensions;
      calculateDimensions = function() {
        var height, heroAspectRatio, translate, videoAspectRatio, videoHeight, videoWidth, width;
        width = element[0].clientWidth;
        height = element[0].clientHeight;
        if (width === 0 || height === 0) {
          return;
        }
        heroAspectRatio = width / height;
        videoAspectRatio = 16 / 9;
        if (heroAspectRatio >= videoAspectRatio) {
          videoWidth = width;
          videoHeight = width / videoAspectRatio;
          translate = (videoHeight - height) / 2;
          return scope.csBackgroundVideo.styles = {
            width: videoWidth + "px",
            height: videoHeight + "px",
            transform: "translateY(-" + translate + "px)"
          };
        } else {
          videoWidth = height * videoAspectRatio;
          videoHeight = height;
          translate = (videoWidth - width) / 2;
          return scope.csBackgroundVideo.styles = {
            width: videoWidth + "px",
            height: videoHeight + "px",
            transform: "translateX(-" + translate + "px)"
          };
        }
      };
      calculateDimensions();
      angular.element($window).on('resize', function() {
        calculateDimensions();
        return $rootScope.$safeApply();
      });
      return scope.$on('videoReady', function() {
        if (scope.csBackgroundVideo.autoplay === 1) {
          scope.csBackgroundVideo.imageClass = 'cs-background-video-image-hidden';
          scope.csBackgroundVideo.playVideo = true;
          scope.csBackgroundVideo.videoPlayingClass = 'cs-background-video-playing';
          $rootScope.$safeApply();
        }
        return scope.$watch('csBackgroundVideo.playVideo', function(playVideo) {
          if (playVideo === true) {
            return scope.csBackgroundVideo.videoPlayingClass = 'cs-background-video-playing';
          } else {
            return scope.csBackgroundVideo.videoPlayingClass = 'cs-background-video-paused';
          }
        });
      });
    },
    templateUrl: "/assets/templates/directives/csBackgroundVideo/csBackgroundVideo.html"
  };
}]);




this.app.directive('csContent', ["$sce", "$filter", "$compile", "$sanitize", function($sce, $filter, $compile, $sanitize) {
  return {
    restrict: 'A',
    scope: {
      csContent: '=',
      containerData: '=',
      trustUnsanitized: '=',
      stripOuterParagraph: '@'
    },
    link: function(scope, element, attrs) {
      return scope.$watch('csContent', function(input) {
        input = $filter('markdown')($filter('shortcode')(input));
        if (!scope.trustUnsanitized) {
          input = $sanitize(input);
        }
        if (scope.stripOuterParagraph && input) {
          input = angular.element(input).html();
        }
        element.html(input);
        return $compile(element.contents())(scope);
      });
    }
  };
}]);




this.app.controller('csDropdownController', ["$scope", "$window", "$rootScope", function($scope, $window, $rootScope) {
  this.showMenu = false;
  this.toggle = (function(_this) {
    return function(e) {
      var currentShowMenu;
      currentShowMenu = _this.showMenu;
      $rootScope.$broadcast('closeAllDropdowns');
      if (currentShowMenu) {
        _this.showMenu = false;
      } else {
        _this.showMenu = true;
      }
      return e.stopPropagation();
    };
  })(this);
  $scope.$on('closeAllDropdowns', (function(_this) {
    return function() {
      console.log('closing all');
      return _this.showMenu = false;
    };
  })(this));
  angular.element($window).bind('click', (function(_this) {
    return function(e) {
      if (_this.showMenu) {
        _this.showMenu = false;
        return $rootScope.$safeApply();
      }
    };
  })(this));
  return this;
}]);




this.app.directive('csEmbedVideo', function() {
  return {
    restrict: 'E',
    replace: false,
    scope: {},
    bindToController: {
      youtubeId: '@',
      vimeoId: '@',
      videoSources: '=',
      autoplay: '='
    },
    controllerAs: 'csEmbedVideo',
    controller: ["$scope", function($scope) {
      this.autoplay = this.autoplay || 0;
      this.getType = (function(_this) {
        return function() {
          if (_this.videoSources) {
            return 'native';
          } else if (_this.vimeoId) {
            return 'vimeo';
          } else if (_this.youtubeId) {
            return 'youtube';
          }
        };
      })(this);
      return this;
    }],
    templateUrl: "/assets/templates/directives/csEmbedVideo/csEmbedVideo.html"
  };
});




this.app.service('csFlexDropdownManager', [
  function() {
    var dropdowns;
    dropdowns = [];
    this.addScope = function(dropdown) {
      return dropdowns.push(dropdown);
    };
    this.open = function(scope) {
      return angular.forEach(dropdowns, function(dropdown) {
        if (dropdown.$id !== scope.$id) {
          return dropdown.menuOpen = false;
        }
      });
    };
    return this;
  }
]);

this.app.directive('csFlexDropdown', ["$document", "csFlexDropdownManager", "$rootScope", function($document, csFlexDropdownManager, $rootScope) {
  return {
    scope: {},
    controller: [
      '$scope', function($scope) {
        csFlexDropdownManager.addScope($scope);
        $scope.menuOpen = false;
        return {
          toggleMenu: function() {
            $scope.menuOpen = !$scope.menuOpen;
            return $rootScope.$safeApply();
          }
        };
      }
    ],
    link: function(scope, element, attrs) {
      var dropdown, elem;
      elem = element[0];
      dropdown = angular.element(elem.querySelector('.flex-dropdown-menu'));
      scope.$watch('menuOpen', function(newValue, oldValue) {
        if (newValue === true) {
          element.addClass('active');
          element.removeClass('inactive');
          dropdown.addClass('open');
          dropdown.removeClass('closed');
          return csFlexDropdownManager.open(scope);
        } else {
          element.removeClass('active');
          element.addClass('inactive');
          dropdown.removeClass('open');
          return dropdown.addClass('closed');
        }
      });
      return $document.on('click', function(e) {
        scope.menuOpen = false;
        return $rootScope.$safeApply();
      });
    }
  };
}]);

this.app.directive('csFlexDropdownToggle', [
  function() {
    return {
      require: '^csFlexDropdown',
      link: function(scope, element, attrs, csFlexDropdownController) {
        return element.bind('click', function(e) {
          csFlexDropdownController.toggleMenu();
          return e.stopPropagation();
        });
      }
    };
  }
]);




this.app.directive('csImage', ["csFilepickerMethods", "$window", "$timeout", "$rootScope", function(csFilepickerMethods, $window, $timeout, $rootScope) {
  return {
    restrict: 'E',
    scope: {
      url: '=',
      imageType: '=',
      aspect: '@',
      loadImageOnEnterViewport: '='
    },
    controller: ["$scope", function($scope) {
      return $scope.recalculate = function() {
        return $scope.calculateWidth();
      };
    }],
    link: function(scope, element, attrs) {
      var parent, reachedViewport;
      scope.attrs = attrs;
      scope.imgOpacity = 0;
      parent = element.parent();
      reachedViewport = false;
      scope.setReachedViewport = function() {
        return reachedViewport = true;
      };
      scope.getFinalUrl = function() {
        if (scope.loadImageOnEnterViewport === true && !reachedViewport) {
          return '';
        } else {
          return scope.finalUrl;
        }
      };
      scope.calculateWidth = function() {
        var finalWidth;
        parent.width = $(parent[0]).width();
        finalWidth = Math.ceil(parent.width / 50.0) * 50;
        if (window.devicePixelRatio >= 2) {
          scope.finalWidth = finalWidth * 2;
        } else {
          scope.finalWidth = finalWidth;
        }
        if (scope.aspect) {
          switch (scope.aspect) {
            case "container":
              parent.height = $(parent[0]).height();
              scope.finalHeight = scope.finalWidth * parent.height / parent.width;
              break;
            case "1:1":
              scope.finalHeight = scope.finalWidth;
              break;
            case "3:2":
              scope.finalHeight = scope.finalWidth * 2 / 3;
              break;
            case "16:9":
              scope.finalHeight = scope.finalWidth * 9 / 16;
              break;
            case "3:1":
              scope.finalHeight = scope.finalWidth * 1 / 3;
          }
          return scope.finalUrl = csFilepickerMethods.convert(scope.url, {
            w: scope.finalWidth,
            h: scope.finalHeight
          });
        } else {
          return scope.finalUrl = csFilepickerMethods.convert(scope.url, {
            w: scope.finalWidth
          });
        }
      };
      angular.element($window).on('resize', function() {
        scope.calculateWidth();
        return $rootScope.$safeApply();
      });
      scope.calculateWidth();
      return scope.$watch('url', function(newValue, oldValue) {
        if (newValue) {
          return scope.calculateWidth();
        }
      });
    },
    templateUrl: "/assets/templates/directives/csImage/csImage.html"
  };
}]);

this.app.directive('csImageLoad', ["staticRenderService", function(staticRenderService) {
  return {
    restrict: 'A',
    scope: {
      afterLoad: '&'
    },
    link: function(scope, element, attrs) {
      var done;
      element.addClass('cs-image-load');
      done = function() {
        element.addClass('loaded');
        return scope.afterLoad();
      };
      if (staticRenderService.get()) {
        return done();
      } else {
        return element.bind('load', done);
      }
    }
  };
}]);




this.app.directive('csImageHover', function() {
  return {
    restrict: 'E',
    scope: {},
    replace: true,
    controller: function() {
      this.aspectClass = 'aspect-' + this.imageAspect.replace(':', '-');
      return this;
    },
    controllerAs: 'csImageHover',
    bindToController: {
      image: '=',
      imageAspect: '@',
      likesCount: '=',
      hasVideo: '=',
      loadImageOnEnterViewport: '=',
      moreText: '='
    },
    templateUrl: "/assets/templates/directives/csImageHover/csImageHover.html"
  };
});




this.app.directive('csLoadingSpinner', function() {
  return {
    restrict: 'E',
    replace: true,
    template: "<div class=\"loading-spinner\" >\n  <svg class=\"cs-icon-sides-dims\">\n    <use xlink:href=\"#sides\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"></use>\n  </svg>\n</div>"
  };
});




this.app.directive('csOnEnterViewport', ["staticRenderService", "$window", "$timeout", function(staticRenderService, $window, $timeout) {
  return {
    restrict: 'A',
    controllerAs: 'oevController',
    scope: {},
    bindToController: {
      reachedScreenCallback: '&',
      offset: "="
    },
    controller: ["$scope", "$element", function($scope, $element) {
      var check, windowElement;
      this.sentCallback = false;
      windowElement = angular.element($window);
      check = (function(_this) {
        return function() {
          var elementPosition, offset, windowHeight;
          if (_this.sentCallback || !_this.reachedScreenCallback) {
            return;
          }
          elementPosition = $element[0].getBoundingClientRect().top;
          windowHeight = $($window).height();
          offset = parseInt(_this.offset || 100);
          if (staticRenderService.get() || (elementPosition < windowHeight - offset)) {
            return $timeout(function() {
              _this.reachedScreenCallback();
              return _this.sentCallback = true;
            });
          }
        };
      })(this);
      $scope.$on('throttledScroll', check);
      $scope.$on('contentChange', check);
      windowElement.on('resize', check);
      $timeout(check);
      $scope.$on('$destroy', function() {
        return windowElement.off('resize', check);
      });
      return this;
    }]
  };
}]);




this.app.directive('csOnHover', function() {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      element.on('mouseenter', function(e) {
        return element.addClass('cs-on-hover-active');
      });
      return element.on('mouseleave', function(e) {
        return element.removeClass('cs-on-hover-active');
      });
    }
  };
});




this.app.directive('csradiostateparam', ["$filter", "$state", "csConfig", function($filter, $state, csConfig) {
  return {
    restrict: 'E',
    scope: {
      paramName: "@",
      choices: "="
    },
    templateUrl: "/assets/templates/directives/csRadioStateParam/csRadioStateParam.html",
    link: function($scope) {
      $scope.$state = $state;
      return $scope.goState = function(choice) {
        var newState;
        newState = angular.extend({}, $state.params);
        newState[$scope.paramName] = choice;
        return $state.go('.', newState);
      };
    }
  };
}]);




this.app.directive('csSrcReplacer', ["$window", function($window) {
  return {
    priority: 99,
    link: function(scope, element, attr) {
      attr.$observe("csSrcReplacer", function(value) {
        var parent, parent_index;
        if (!value) {
          return;
        }
        parent = $(element).parent();
        parent_index = $(element).index();
        $(element).detach();
        attr.$set("src", value);
        if (parent_index === 0) {
          return parent.prepend(element);
        } else {
          return parent.children().eq(parent_index - 1).after(element);
        }
      });
      return this;
    }
  };
}]);




this.app.directive('csSuggestedRecipes', function() {
  return {
    restrict: 'E',
    scope: {},
    bindToController: {
      title: '@',
      recipes: '='
    },
    controllerAs: 'csSuggestedRecipes',
    controller: ["$state", function($state) {
      this.handleClick = function(url) {
        var slug;
        slug = _.last(url.split('activities/'));
        return $state.go("main.activity", {
          slug: slug
        });
      };
      return this;
    }],
    templateUrl: "/assets/templates/directives/csSuggestedRecipes/csSuggestedRecipes.html"
  };
});




this.app.directive('expandable', ["$window", "$rootScope", "$timeout", function($window, $rootScope, $timeout) {
  return {
    restrict: 'A',
    controllerAs: 'expandable',
    transclude: true,
    bindToController: {},
    templateUrl: "/assets/templates/directives/expandable/expandable.html",
    controller: function() {
      this.expanded = false;
      return this;
    }
  };
}]);




this.app.directive('experimentVariation', ["ExperimentService", function(ExperimentService) {
  return {
    restrict: 'A',
    controllerAs: 'experimentVariation',
    scope: {},
    transclude: true,
    bindToController: {
      experimentName: '@',
      variationName: '@',
      variationCount: '@'
    },
    controller: function() {
      this.visible = (!this.experimentName) || ExperimentService.isInVariation(this.experimentName, this.variationName, this.variationCount);
      return this;
    },
    template: "<div ng-if=\"experimentVariation.visible\" style=\"display: inherit;\">\n  <div ng-transclude style=\"display: inherit;\"></div>\n</div>"
  };
}]);




this.app.directive('filepicker', ["csFilepickerMethods", function(csFilepickerMethods) {
  return {
    restrict: 'E',
    replace: true,
    require: '?ngModel',
    scope: {
      imageType: '='
    },
    link: function(scope, element, attrs, ngModel) {
      var target;
      filepicker.setKey("ANAsscmHGSKqZCHObvuK6z");
      scope.ngModel = ngModel;
      scope.uploadProgress = -1;
      target = $(element).find('.drop-target');
      return filepicker.makeDropPane(target, {
        dragEnter: function() {
          return target.addClass("drop-ready");
        },
        dragLeave: function() {
          return target.removeClass("drop-ready");
        },
        onStart: function() {
          scope.uploadProgress = 0;
          return target.removeClass("drop-ready");
        },
        onProgress: function(percentage) {
          return scope.uploadProgress = percentage;
        },
        onSuccess: function(fpfiles) {
          scope.ngModel.$setViewValue(JSON.stringify(fpfiles[0]));
          return scope.uploadProgress = -1;
        },
        onError: function(type, message) {
          scope.uploadProgress = -1;
          return alert(message);
        }
      });
    },
    controller: ["$scope", "$element", function($scope, $element) {
      $scope.pickOrRemoveFile = function() {
        filepicker.pickAndStore({
          mimetypes: ['image/*', 'application/*', 'video/*'],
          services: ['COMPUTER']
        }, {
          location: "S3"
        }, (function(fpfiles) {
          var cdnURL, fpObject, mimetype;
          fpObject = fpfiles[0];
          cdnURL = csFilepickerMethods.cdnURL(fpObject.url);
          $scope.ngModel.$setViewValue(cdnURL);
          mimetype = fpObject.mimetype;
          return $scope.imageType = mimetype;
        }));
        return function(errorCode) {
          return console.log("FILEPICKER ERROR CODE: " + errorCode);
        };
      };
      $scope.hasFile = function() {
        return ($scope.ngModel != null) && ($scope.ngModel.$modelValue != null) && ($scope.ngModel.$modelValue.length > 0);
      };
      return $scope.removeFile = function() {
        return $scope.ngModel.$setViewValue("");
      };
    }],
    templateUrl: "/assets/templates/directives/filepicker/filepicker.html"
  };
}]);




this.app.directive('filepickerPick', function() {
  return {
    restrict: 'E',
    replace: true,
    require: '?ngModel',
    scope: {},
    link: function(scope, element, attrs, ngModel) {
      filepicker.setKey("ANAsscmHGSKqZCHObvuK6z");
      return scope.ngModel = ngModel;
    },
    controllerAs: 'filepickerPick',
    controller: ["$scope", "$element", function($scope, $element) {
      console.log('mimetypes: ', this.mimetypes);
      this.pick = (function(_this) {
        return function() {
          var onPickError, onPickSuccess, pickOptions;
          pickOptions = {
            mimetypes: _this.mimetypes,
            services: ['COMPUTER']
          };
          onPickSuccess = function(blob) {
            return filepicker.read(blob, function(data) {
              return $scope.ngModel.$setViewValue(data);
            });
          };
          onPickError = function(error) {
            return console.log(error);
          };
          return filepicker.pick(pickOptions, onPickSuccess, onPickError);
        };
      })(this);
      return this;
    }],
    bindToController: {
      mimetypes: '='
    },
    templateUrl: "/assets/templates/directives/filepickerPick/filepickerPick.html"
  };
});




this.app.directive('flags', ["$rootScope", "$state", "ShopifyService", "LocationService", "navService", "csConfig", function($rootScope, $state, ShopifyService, LocationService, navService, csConfig) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'flag',
    controller: ["$scope", function($scope) {
      this.showFlag = false;
      this.isLowStock = false;
      this.product = ShopifyService.variantForSku('cs10001');
      this.isInUS = function() {
        return LocationService.isInUS();
      };
      if (this.product && this.isInUS()) {
        if (this.product.inventory_quantity > 0) {
          this.showFlag = true;
          $rootScope.$emit('flag.stateChange');
          if (this.product.inventory_quantity <= 500) {
            this.isLowStock = true;
          }
        }
        if (this.product.inventory_quantity <= 0) {
          this.showFlag = false;
        }
      } else if (!this.product) {
        Rollbar.error("Flag - @product not set for flags at url: " + $state.current.url);
      }
      this.closeFlag = function() {
        this.showFlag = false;
        return $rootScope.$emit('flag.stateChange');
      };
      return this;
    }],
    templateUrl: "/assets/templates/directives/flags/flags.html"
  };
}]);




this.app.directive('focusOn', function() {
  return {
    link: function(scope, element, attrs) {
      scope.$on(attrs.focusOn, function(e) {
        return element[0].focus();
      });
      return scope.$on('focusOff', function(e) {
        return element[0].blur();
      });
    }
  };
});




this.app.directive('csFooter', function() {
  return {
    restrict: 'E',
    templateUrl: "/assets/templates/directives/footer/footer.html"
  };
});




this.app.directive('csIcon', function() {
  return {
    restrict: 'A',
    scope: {
      csIcon: '@'
    },
    link: function(scope, element, attrs) {
      return scope.$watch('csIcon', function() {
        return scope.csIconId = '#' + scope.csIcon;
      });
    },
    template: '<svg class="cs-icon-{{csIcon}}-dims">\n  <use xlink:href={{csIconId}}></use>\n</svg>'
  };
});





/* CHEFSTEPS NOTE!!!
**
** From: https://sroze.github.io/ngInfiniteScroll/# - v1.0.0 - 2013-02-23
**
** mnatkin 12/5/2014 - added hack to allow client to force a recheck with a broadcast.
** Since I was doing that I went ahead and converted to coffeescript and put it in our repo.
**
 */
this.app.directive('infiniteScroll', ["$rootScope", "$window", "$timeout", "$interval", function($rootScope, $window, $timeout, $interval) {
  return {
    link: function(scope, elem, attrs) {
      var checkListenerDestroyer, checkWhenEnabled, handler, intervalPromise, scrollDistance, scrollEnabled;
      checkWhenEnabled = void 0;
      handler = void 0;
      scrollDistance = void 0;
      scrollEnabled = void 0;
      $window = angular.element($window);
      scrollDistance = 0;
      if (attrs.infiniteScrollDistance !== null) {
        scope.$watch(attrs.infiniteScrollDistance, function(value) {
          return scrollDistance = parseInt(value, 10);
        });
      }
      scrollEnabled = true;
      checkWhenEnabled = false;
      if (attrs.infiniteScrollDisabled !== null) {
        scope.$watch(attrs.infiniteScrollDisabled, function(value) {
          scrollEnabled = !value;
          if (scrollEnabled && checkWhenEnabled) {
            checkWhenEnabled = false;
            return handler();
          }
        });
      }
      handler = function() {
        var elementBottom, remaining, shouldScroll, windowBottom;
        elementBottom = void 0;
        remaining = void 0;
        shouldScroll = void 0;
        windowBottom = void 0;
        windowBottom = $($window).height() + $($window).scrollTop();
        elementBottom = $(elem).offset().top + $(elem).height();
        remaining = elementBottom - windowBottom;
        shouldScroll = remaining <= $($window).height() * scrollDistance;
        if (shouldScroll && scrollEnabled) {

          /* console.log("SCROLLING " + elementBottom + " " + $window.height()); */
          if ($rootScope.$$phase) {
            return scope.$eval(attrs.infiniteScroll);
          } else {
            return scope.$apply(attrs.infiniteScroll);
          }
        } else if (shouldScroll) {
          return checkWhenEnabled = true;
        }
      };
      $window.on('scroll', handler);
      intervalPromise = $interval(handler, 500);

      /* mnatkin 12/5/2014 */
      checkListenerDestroyer = $rootScope.$on('contentChange', handler);
      scope.$on('$destroy', function() {
        $window.off('scroll', handler);
        $interval.cancel(intervalPromise);
        return checkListenerDestroyer();
      });
      return $timeout((function() {
        if (attrs.infiniteScrollImmediateCheck) {
          if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
            return handler();
          }
        } else {
          return handler();
        }
      }), 0);
    }
  };
}]);




this.app.controller('NavController', ["$rootScope", "ModalService", "$state", "$scope", "$window", "$timeout", "navService", function($rootScope, ModalService, $state, $scope, $window, $timeout, navService) {
  var checkScrollPosition, previousIsNavVisible, previousY;
  this.menuItemsTemplate = "/assets/templates/directives/nav/navItems.html";
  this.isNavVisible = false;
  this.isNavFixed = false;
  previousIsNavVisible = false;
  previousY = 0;
  this.currentRoute = $state.current.name;
  this.navState = [];
  this.forcedHidden = false;
  this.isFlagShown = false;
  $rootScope.$on('flag.stateChange', (function(_this) {
    return function() {
      return _this.isFlagShown = true;
    };
  })(this));
  this.handleClickSref = function() {
    return this.showMenu = false;
  };
  checkScrollPosition = (function(_this) {
    return function(y) {
      if (_this.navState && _.contains(_this.navState, 'nav-sticky')) {
        _this.isNavFixed = true;
        if (y >= 50) {
          _this.navGhost = false;
          return $rootScope.$safeApply();
        } else {
          _this.navGhost = true;
          return $rootScope.$safeApply();
        }
      } else if (_this.navState && _.contains(_this.navState, 'nav-ghost')) {
        if (y > 450) {
          _this.isNavFixed = true;
          _this.isNavVisible = y < previousY;
          if (_this.isNavVisible !== previousIsNavVisible) {
            $rootScope.$safeApply();
          }
          previousIsNavVisible = _this.isNavVisible;
          previousY = y;
        }
        if (y < 450) {
          _this.isNavVisible = false;
          $rootScope.$safeApply();
        }
        if (y <= 200) {
          _this.isNavFixed = false;
          if (_this.isNavVisible !== _this.previousIsNavVisible) {
            return $rootScope.$safeApply();
          }
        }
      } else if (_this.isFlagShown = true) {
        if (y > 200) {
          _this.isNavFixed = true;
          _this.isNavVisible = y < previousY;
          if (_this.isNavVisible !== previousIsNavVisible) {
            $rootScope.$safeApply();
          }
          previousIsNavVisible = _this.isNavVisible;
          previousY = y;
        }
        if (y <= 56) {
          _this.isNavVisible = false;
          _this.isNavFixed = false;
          if (_this.isNavVisible !== _this.previousIsNavVisible) {
            return $rootScope.$safeApply();
          }
        }
      } else {
        if (y > 200) {
          _this.isNavFixed = true;
          _this.isNavVisible = y < previousY;
          if (_this.isNavVisible !== previousIsNavVisible) {
            $rootScope.$safeApply();
          }
          previousIsNavVisible = _this.isNavVisible;
          previousY = y;
        }
        if (y <= 0) {
          _this.isNavVisible = false;
          _this.isNavFixed = false;
          if (_this.isNavVisible !== _this.previousIsNavVisible) {
            return $rootScope.$safeApply();
          }
        }
      }
    };
  })(this);
  angular.element($window).on('scroll', _.throttle(function() {
    return checkScrollPosition(this.pageYOffset);
  }, 200));
  $rootScope.$on('$stateChangeSuccess', (function(_this) {
    return function() {
      return _this.showMenu = false;
    };
  })(this));
  $rootScope.$on('nav.stateChange', (function(_this) {
    return function() {
      return _this.navState = navService.navState;
    };
  })(this));
  $rootScope.$on('nav.hideNav', (function(_this) {
    return function(event, hide) {
      return _this.forcedHidden = hide;
    };
  })(this));
  this.login = function() {
    this.showMenu = false;
    return $timeout((function() {
      return ModalService.open('login', {
        source: 'nav'
      });
    }), 200);
  };
  return this;
}]);




this.app.directive('onScrolledTo', ["$window", "$rootScope", "$timeout", function($window, $rootScope, $timeout) {
  return {
    restrict: 'A',
    controllerAs: 'onScrolledTo',
    bindToController: {
      onScrolledTo: '&',
      inView: '&',
      notInView: '&'
    },
    controller: function() {
      return this;
    },
    link: function(scope, element, attrs) {
      var handleScroll, loaded, scrolledTo, windowHeight;
      scrolledTo = false;
      windowHeight = $window.innerHeight;
      loaded = false;
      handleScroll = function() {
        var elementBottomOffset, elementHeight, elementOffset, elementTopOffset, windowOffset;
        if (loaded) {
          windowOffset = $window.pageYOffset;
          elementOffset = element[0].offsetTop;
          elementHeight = element[0].clientHeight;
          elementTopOffset = elementOffset - windowHeight;
          elementBottomOffset = elementOffset + elementHeight;
          if ((elementTopOffset <= windowOffset && windowOffset <= elementBottomOffset)) {
            if (attrs['onScrolledTo'] && !scrolledTo) {
              scrolledTo = true;
              if ($rootScope.$$phase) {
                scope.$evalAsync(attrs['onScrolledTo']);
              } else {
                scope.$apply(attrs['onScrolledTo']);
              }
            }
            if (attrs['inView']) {
              if ($rootScope.$$phase) {
                return scope.$evalAsync(attrs['inView']);
              } else {
                return scope.$apply(attrs['inView']);
              }
            }
          } else {
            if (attrs['notInView']) {
              if ($rootScope.$$phase) {
                return scope.$evalAsync(attrs['notInView']);
              } else {
                return scope.$apply(attrs['notInView']);
              }
            }
          }
        }
      };
      scope.$on('throttledScroll', function() {
        return handleScroll();
      });
      return $timeout((function() {
        return loaded = true;
      }), 1000);
    }
  };
}]);




this.app.directive('saveButton', function() {
  return {
    restrict: 'E',
    replace: true,
    scope: {},
    bindToController: {
      saveableType: '@',
      saveableId: '@',
      apiEndpoint: '@'
    },
    controllerAs: 'saveButton',
    controller: ["$state", "$scope", "AnalyticsService", "ModalService", "$http", "localStorageService", function($state, $scope, AnalyticsService, ModalService, $http, localStorageService) {
      var getHeaderConfig, save, savedId, unsave, updateIsSaved;
      this.isSaved = false;
      savedId = null;
      getHeaderConfig = function() {
        var userToken;
        userToken = localStorageService.get('user.token');
        return {
          headers: {
            'Authorization': 'Bearer ' + userToken,
            "x-csrf-token": void 0
          }
        };
      };
      updateIsSaved = (function(_this) {
        return function() {
          var url;
          if (!_this.saveableId || !$state.currentUser) {
            return;
          }
          url = csConfig.chefstepsEndpoint + "/api/v0/" + _this.apiEndpoint + "/" + _this.saveableId + "/likes";
          return $http.get(url).then(function(res) {
            var ref;
            _this.isSaved = _.chain(res.data).pluck('userId').includes((ref = $state.currentUser) != null ? ref.id : void 0).value();
            if (_this.isSaved) {
              return savedId = _.find(res.data, {
                userId: $state.currentUser.id
              }).id;
            }
          });
        };
      })(this);
      $scope.$watch(((function(_this) {
        return function() {
          return _this.saveableId;
        };
      })(this)), updateIsSaved);
      save = (function(_this) {
        return function() {
          var data, url;
          if (!$state.currentUser) {
            ModalService.open('login', {
              source: 'saveButton'
            });
            return;
          }
          url = csConfig.chefstepsEndpoint + "/api/v0/likes?likeable_type=" + _this.saveableType + "&likeable_id=" + _this.saveableId;
          data = {};
          return $http.post(url, data, getHeaderConfig()).success(function(res) {
            _this.isSaved = true;
            savedId = res.id;
            return AnalyticsService.track('Liked', {
              'Activity': _this.saveableType + "_" + _this.saveableId
            });
          });
        };
      })(this);
      unsave = (function(_this) {
        return function() {
          var data, url;
          if (!$state.currentUser) {
            ModalService.open('login', {
              source: 'unsaveButton'
            });
            return;
          }
          url = csConfig.chefstepsEndpoint + "/api/v0/likes/" + savedId;
          data = {};
          return $http["delete"](url, getHeaderConfig()).success(function(res) {
            _this.isSaved = false;
            return AnalyticsService.track('Unliked', {
              'Activity': _this.saveableType + "_" + _this.saveableId
            });
          });
        };
      })(this);
      this.toggleSaved = (function(_this) {
        return function() {
          if (_this.isSaved) {
            return unsave();
          } else {
            return save();
          }
        };
      })(this);
      return this;
    }],
    templateUrl: "/assets/templates/directives/saveButton/saveButton.html"
  };
});




this.app.directive('searchTypeahead', ["AlgoliaSearchService", function(AlgoliaSearchService) {
  return {
    restrict: 'E',
    scope: {
      customMethod: '@',
      select: '&onSelect'
    },
    link: function(scope, element, attrs) {
      scope.search = function(query) {
        var params;
        params = {
          difficulty: 'any',
          generator: 'chefsteps',
          published_status: 'published',
          page: '1',
          search_all: query,
          attributesToRetrieve: 'title,url,image,likes_count,description,activity_type,premium',
          sort: 'relevance'
        };
        return AlgoliaSearchService.search(params).then(function(data) {
          return scope.searchResults = data;
        });
      };
      return scope.clear = function() {
        scope.searchQuery = null;
        return scope.searchResults = [];
      };
    },
    templateUrl: "/assets/templates/directives/searchTypeahead/searchTypeahead.html"
  };
}]);




this.app.directive('socialButtons', function() {
  return {
    restrict: 'E',
    replace: true,
    scope: {},
    bindToController: {
      socialTitle: '@',
      socialImage: '@',
      commentCount: '@',
      buttonTheme: '@'
    },
    controllerAs: 'socialButtons',
    controller: ["$location", "csFilepickerMethods", "AnalyticsService", function($location, csFilepickerMethods, AnalyticsService) {
      var emailBody, emailSubject, openSocialWindow, socialImageConverted, socialUrl, track, tweetMessage;
      socialUrl = ($location.protocol()) + "://" + ($location.host()) + ($location.path());
      tweetMessage = 'I love this:';
      socialImageConverted = (function(_this) {
        return function() {
          return csFilepickerMethods.convert(_this.socialImage, {
            width: 800
          });
        };
      })(this);
      emailSubject = (function(_this) {
        return function() {
          return "I thought you might like " + _this.socialTitle;
        };
      })(this);
      emailBody = (function(_this) {
        return function() {
          return "Hey, I thought you might like " + _this.socialTitle + " at ChefSteps.com. Here's the link: " + socialUrl;
        };
      })(this);
      track = function(socialNetwork) {
        var shareCat;
        shareCat = socialUrl.split("/")[3];
        return AnalyticsService.track('Share', {
          Network: socialNetwork,
          URL: socialUrl,
          ShareCat: shareCat
        });
      };
      openSocialWindow = function(socialNetwork, url, spec) {
        window.open(url, "_blank", spec || "width=500, height=300, top=100, left=100");
        return track(socialNetwork);
      };
      this.shareTwitter = (function(_this) {
        return function() {
          return openSocialWindow('Twitter', "https://twitter.com/intent/tweet?text=" + tweetMessage + " " + _this.socialTitle + " @ChefSteps&url=" + window.escape(socialUrl));
        };
      })(this);
      this.shareFacebook = function() {
        return openSocialWindow('Facebook', "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(socialUrl), 'width=626,height=436,top=100,left=100');
      };
      this.shareGooglePlus = function() {
        return openSocialWindow('Google Plus', "https://plus.google.com/share?url=" + encodeURIComponent(socialUrl), 'width=600,height=600,top=100,left=100');
      };
      this.sharePinterest = (function(_this) {
        return function() {
          return openSocialWindow('Pinterest', "https://pinterest.com/pin/create/button/?url=" + encodeURIComponent(socialUrl) + "&media=" + encodeURIComponent(_this.socialImage) + "&description=" + encodeURIComponent(_this.socialTitle), 'width=300,height=600,top=100,left=100');
        };
      })(this);
      this.shareEmail = function() {
        return openSocialWindow('Email', "mailto:?subject=" + encodeURIComponent(emailSubject()) + "&body=" + encodeURIComponent(emailBody()));
      };
      this.shareEmbedly = function() {
        embedly('modal', {
          url: socialUrl + "?utm_source=embedly"
        });
        return track('Embedly');
      };
      this.buttonTheme = this.buttonTheme || 'outline';
      return this;
    }],
    templateUrl: "/assets/templates/directives/socialButtons/socialButtons.html"
  };
});




this.app.directive('ssoForm', ["ssoService", function(ssoService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.visibleForm = ssoService.isZendesk() ? 'login' : 'signup';
      this.login = (function(_this) {
        return function() {
          return _this.visibleForm = 'login';
        };
      })(this);
      this.signup = (function(_this) {
        return function() {
          return _this.visibleForm = 'signup';
        };
      })(this);
      return this;
    },
    controllerAs: 'ssoForm',
    templateUrl: "/assets/templates/directives/ssoForm/ssoForm.html"
  };
}]);




this.app.directive('timeTempBar', ["TimeTempService", function(TimeTempService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'timeTempBar',
    controller: function() {
      this.axis = TimeTempService.axis;
      this.calcPosition = TimeTempService.calcPosition;
      this.spanStyle = {
        width: this.calcPosition(this.high) - this.calcPosition(this.low) + '%',
        left: this.calcPosition(this.low) + '%'
      };
      this.recommendedStyle = {
        left: this.calcPosition(this.recommended) + '%'
      };
      this.highStyle = {
        left: this.calcPosition(this.high) + '%'
      };
      this.lineStyle = {
        width: this.calcPosition(this.low) + '%'
      };
      this.markerStyle = (function(_this) {
        return function(time) {
          var styles;
          styles = {
            left: _this.calcPosition(time) + '%'
          };
          return styles;
        };
      })(this);
      this.showMarker = (function(_this) {
        return function(time) {
          if ((_this.low <= time && time <= _this.high)) {
            return false;
          } else {
            return true;
          }
        };
      })(this);
      return this;
    },
    bindToController: {
      low: '=',
      high: '=',
      recommended: '='
    },
    templateUrl: "/assets/templates/directives/timeTempGuide/timeTempBar.html"
  };
}]);

this.app.filter('decimalToTime', function() {
  return function(input) {
    var decimal, hoursString, integer, minutes, minutesString;
    integer = Math.floor(input);
    decimal = input % 1;
    if (integer === 0) {
      hoursString = '00';
    } else {
      hoursString = "" + integer;
    }
    minutes = "" + (Math.round(decimal * 60));
    if (minutes < 10) {
      minutesString = "0" + minutes;
    } else {
      minutesString = "" + minutes;
    }
    return hoursString + ":" + minutesString;
  };
});




this.app.directive('timeTempGuide', ["TimeTempService", function(TimeTempService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'timeTempGuide',
    controller: function() {
      this.basicItems = TimeTempService.basicItems;
      this.beefSteakItems = TimeTempService.beefSteakItems;
      this.beefRoastItems = TimeTempService.beefRoastItems;
      this.beefToughItems = TimeTempService.beefToughItems;
      this.porkChopItems = TimeTempService.porkChopItems;
      this.porkRoastItems = TimeTempService.porkRoastItems;
      this.porkToughItems = TimeTempService.porkToughItems;
      this.chickenLightItems = TimeTempService.chickenLightItems;
      this.chickenDarkItems = TimeTempService.chickenDarkItems;
      this.fishItems = TimeTempService.fishItems;
      this.vegetableItems = TimeTempService.vegetableItems;
      this.fruitItems = TimeTempService.fruitItems;
      return this;
    },
    bindToController: {},
    templateUrl: "/assets/templates/directives/timeTempGuide/timeTempGuide.html"
  };
}]);




this.app.directive('timeTempItem', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'timeTempItem',
    controller: function() {
      return this;
    },
    bindToController: {
      ingredientType: '=',
      title: '=',
      temp: '=',
      time: '='
    },
    templateUrl: "/assets/templates/directives/timeTempGuide/timeTempItem.html"
  };
});




this.app.directive('timeTempKey', ["TimeTempService", function(TimeTempService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'timeTempKey',
    controller: function() {
      this.axis = TimeTempService.axis;
      this.low = 1;
      this.recommended = 1.5;
      this.high = 3;
      return this;
    },
    bindToController: {},
    templateUrl: "/assets/templates/directives/timeTempGuide/timeTempKey.html"
  };
}]);




this.app.service('TimeTempService', function() {
  var breakpoint1, breakpoint2, breakpoint3, breakpoint4, breakpoint5;
  this.basicItems = [
    {
      ingredientType: 'Beef',
      title: 'Steak Rare',
      temp: {
        c: 54,
        f: 129
      },
      time: {
        low: .75,
        high: 2,
        recommended: 1
      }
    }, {
      ingredientType: 'Beef',
      title: 'Roast Medium Rare',
      temp: {
        c: 60,
        f: 140
      },
      time: {
        low: 5,
        high: 14,
        recommended: 6
      }
    }, {
      ingredientType: 'Pork',
      title: 'Chop Medium Rare',
      temp: {
        c: 62,
        f: 144
      },
      time: {
        low: 1,
        high: 3,
        recommended: 1
      }
    }, {
      ingredientType: 'Chicken',
      title: 'Light Meat Juicy and Tender',
      temp: {
        c: 65,
        f: 149
      },
      time: {
        low: 0.75,
        high: 3,
        recommended: 1
      }
    }, {
      ingredientType: 'Chicken',
      title: 'Dark Meat Juicy and Tender',
      temp: {
        c: 75,
        f: 167
      },
      time: {
        low: 0.5,
        high: 5,
        recommended: .75
      }
    }, {
      ingredientType: 'Fish',
      title: 'Tender and Flaky',
      temp: {
        c: 50,
        f: 122
      },
      time: {
        low: 0.25,
        high: 70 / 60,
        recommended: 4 / 6
      }
    }, {
      ingredientType: 'Egg',
      title: 'Poached',
      temp: {
        c: 64,
        f: 147
      },
      time: {
        low: 4 / 6,
        high: 1.5,
        recommended: 1
      }
    }, {
      ingredientType: 'Green Vegetables',
      title: 'Tender',
      temp: {
        c: 82,
        f: 180
      },
      time: {
        low: 1 / 6,
        high: 1 / 3,
        recommended: 1 / 6
      }
    }, {
      ingredientType: 'Potato Whole',
      title: 'Tender',
      temp: {
        c: 85,
        f: 185
      },
      time: {
        low: 1,
        high: 3,
        recommended: 1.5
      }
    }
  ];
  this.beefSteakItems = [
    {
      title: 'Rare',
      temp: {
        c: 54,
        f: 129
      },
      time: {
        low: .74,
        high: 2,
        recommended: 1
      }
    }, {
      title: 'Medium',
      temp: {
        c: 58,
        f: 136
      },
      time: {
        low: .74,
        high: 2,
        recommended: 1
      }
    }, {
      title: 'Well Done',
      temp: {
        c: 68,
        f: 154
      },
      time: {
        low: .74,
        high: 2,
        recommended: 1
      }
    }
  ];
  this.beefRoastItems = [
    {
      title: 'Rare',
      temp: {
        c: 56,
        f: 133
      },
      time: {
        low: 5,
        high: 16,
        recommended: 7
      }
    }, {
      title: 'Medium Rare',
      temp: {
        c: 60,
        f: 140
      },
      time: {
        low: 5,
        high: 14,
        recommended: 6
      }
    }, {
      title: 'Well Done',
      temp: {
        c: 70,
        f: 158
      },
      time: {
        low: 5,
        high: 11,
        recommended: 5
      }
    }
  ];
  this.beefToughItems = [
    {
      title: 'Rare',
      temp: {
        c: 55,
        f: 131
      },
      time: {
        low: 24,
        high: 48,
        recommended: 24
      }
    }, {
      title: 'Medium Rare',
      temp: {
        c: 65,
        f: 149
      },
      time: {
        low: 16,
        high: 24,
        recommended: 24
      }
    }, {
      title: 'Well Done',
      temp: {
        c: 85,
        f: 185
      },
      time: {
        low: 7,
        high: 16,
        recommended: 8
      }
    }
  ];
  this.porkChopItems = [
    {
      title: 'Rare',
      temp: {
        c: 58,
        f: 136
      },
      time: {
        low: 1,
        high: 3,
        recommended: 1
      }
    }, {
      title: 'Medium Rare',
      temp: {
        c: 62,
        f: 144
      },
      time: {
        low: 1,
        high: 3,
        recommended: 1
      }
    }, {
      title: 'Well Done',
      temp: {
        c: 70,
        f: 158
      },
      time: {
        low: 1,
        high: 3,
        recommended: 1
      }
    }
  ];
  this.porkRoastItems = [
    {
      title: 'Rare',
      temp: {
        c: 58,
        f: 136
      },
      time: {
        low: 2.5,
        high: 5.5,
        recommended: 3
      }
    }, {
      title: 'Medium Rare',
      temp: {
        c: 62,
        f: 144
      },
      time: {
        low: 2.5,
        high: 4,
        recommended: 3
      }
    }, {
      title: 'Well Done',
      temp: {
        c: 70,
        f: 158
      },
      time: {
        low: 2.5,
        high: 3.5,
        recommended: 3
      }
    }
  ];
  this.porkToughItems = [
    {
      title: 'Rare',
      temp: {
        c: 60,
        f: 140
      },
      time: {
        low: 8,
        high: 24,
        recommended: 8
      }
    }, {
      title: 'Medium Rare',
      temp: {
        c: 68,
        f: 154
      },
      time: {
        low: 7,
        high: 24,
        recommended: 8
      }
    }, {
      title: 'Well Done',
      temp: {
        c: 85,
        f: 185
      },
      time: {
        low: 6,
        high: 16,
        recommended: 8
      }
    }
  ];
  this.chickenLightItems = [
    {
      title: 'Super-Supple',
      temp: {
        c: 60,
        f: 140
      },
      time: {
        low: .9,
        high: 3,
        recommended: 1
      }
    }, {
      title: 'Tender and Juicy',
      temp: {
        c: 65,
        f: 149
      },
      time: {
        low: .9,
        high: 3,
        recommended: 1
      }
    }, {
      title: 'Well Done',
      temp: {
        c: 75,
        f: 167
      },
      time: {
        low: .9,
        high: 3,
        recommended: 1
      }
    }
  ];
  this.chickenDarkItems = [
    {
      title: 'Tender',
      temp: {
        c: 65,
        f: 149
      },
      time: {
        low: .9,
        high: 5,
        recommended: .75
      }
    }, {
      title: 'Falling Off The Bone',
      temp: {
        c: 75,
        f: 167
      },
      time: {
        low: .9,
        high: 5,
        recommended: .75
      }
    }
  ];
  this.fishItems = [
    {
      title: 'Tender',
      temp: {
        c: 40,
        f: 104
      },
      time: {
        low: .4,
        high: 70 / 60,
        recommended: 2 / 3
      }
    }, {
      title: 'Tender and Flaky',
      temp: {
        c: 50,
        f: 122
      },
      time: {
        low: .4,
        high: 70 / 60,
        recommended: 2 / 3
      }
    }, {
      title: 'Well Done',
      temp: {
        c: 55,
        f: 131
      },
      time: {
        low: .4,
        high: 70 / 60,
        recommended: 2 / 3
      }
    }
  ];
  this.vegetableItems = [
    {
      title: 'Green Vegetables',
      temp: {
        c: 82,
        f: 180
      },
      time: {
        low: 1 / 6,
        high: 1 / 3,
        recommended: 1 / 6
      }
    }, {
      title: 'Winter Squash',
      temp: {
        c: 85,
        f: 185
      },
      time: {
        low: 1,
        high: 3,
        recommended: 1
      }
    }, {
      title: 'Potatoes & Root Vegetables',
      temp: {
        c: 85,
        f: 185
      },
      time: {
        low: 1,
        high: 3,
        recommended: 2
      }
    }
  ];
  this.fruitItems = [
    {
      title: 'Warm & Ripe',
      temp: {
        c: 68,
        f: 154
      },
      time: {
        low: 1,
        high: 2.5,
        recommended: 1.75
      }
    }, {
      title: 'Cooked to Soft (for purees, etc.)',
      temp: {
        c: 85,
        f: 185
      },
      time: {
        low: 1 / 3,
        high: 1.5,
        recommended: .5
      }
    }
  ];
  this.axis = [1 / 60, 0.5, 1, 2, 3, 6, 12, 24, 48];
  breakpoint1 = 1 / 60;
  breakpoint2 = 4;
  breakpoint3 = 12;
  breakpoint4 = 24;
  breakpoint5 = 50;
  this.calcPosition = function(time) {
    var position;
    if ((0 <= time && time < breakpoint1)) {
      position = 0.3 * time / breakpoint1;
    } else if ((breakpoint1 <= time && time < breakpoint2)) {
      position = 0.4 * time / breakpoint2 + 0.3;
    } else if ((breakpoint2 <= time && time < breakpoint3)) {
      position = 0.1 * time / breakpoint3 + 0.7;
    } else if ((breakpoint3 <= time && time < breakpoint4)) {
      position = 0.1 * time / breakpoint4 + 0.8;
    } else if ((breakpoint4 <= time && time < breakpoint5)) {
      position = 0.1 * time / breakpoint5 + 0.9;
    }
    return position * 100;
  };
  return this;
});




this.app.directive('buyResult', ["ModalService", function(ModalService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.params = ModalService.params();
      this.close = function() {
        return ModalService.resolve();
      };
      return this;
    }],
    controllerAs: 'buyResult',
    templateUrl: "/assets/templates/modals/buyResult/buyResult.html"
  };
}]);




this.app.directive('continueToCheckout', ["ModalService", "stripeService", "authenticationService", "$state", function(ModalService, stripeService, authenticationService, $state) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.checkout = function() {
        var checkoutParams, isGift, sku, user;
        checkoutParams = ModalService.modal.params.checkout;
        sku = checkoutParams.sku;
        isGift = checkoutParams.isGift;
        user = $state.currentUser;
        stripeService.showCheckout(sku, user, isGift);
        return ModalService.resolve();
      };
      return this;
    }],
    controllerAs: 'continueToCheckout',
    templateUrl: "/assets/templates/modals/continueToCheckout/continueToCheckout.html"
  };
}]);




this.app.directive('ftue', ["$state", "$http", "ModalService", function($state, $http, ModalService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", "$element", function($scope, $element) {
      this.showSurvey = true;
      this.disabledNext = true;
      this.suggestion = '';
      this.interests = [
        {
          title: 'Sous Vide',
          checked: false,
          image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/VO5w9ZlJQzSuY39wVjCA',
          imageLoaded: false
        }, {
          title: 'Kitchen Tips',
          checked: false,
          image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/zGFKehokRquV2wqanIj0',
          imageLoaded: false
        }, {
          title: 'Traditional Cooking',
          checked: false,
          image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/xiojrYF1QAemQ0ybBTbl',
          imageLoaded: false
        }, {
          title: 'Modern Cooking',
          checked: false,
          image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/eXkRnCTNSlKqLwIYYr4n',
          imageLoaded: false
        }, {
          title: 'Beverages',
          checked: false,
          image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/4kMxDcRFTGmaa55Ro7M5',
          imageLoaded: false
        }, {
          title: 'Baking',
          checked: false,
          image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/ykypDm7TbnEga0m5D9AQ',
          imageLoaded: false
        }, {
          title: 'Behind the Scenes',
          checked: false,
          image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/dvc519Tk2h97xIdwj5hg',
          imageLoaded: false
        }
      ];
      this.toggleNext = (function(_this) {
        return function() {
          var checks, ref;
          checks = _this.interests.map(function(option) {
            return option.checked;
          });
          if ((_.some(checks)) || (((ref = _this.suggestion) != null ? ref.length : void 0) > 0)) {
            return _this.disabledNext = false;
          } else {
            return _this.disabledNext = true;
          }
        };
      })(this);
      this.toggleChecked = (function(_this) {
        return function(interest) {
          interest.checked = !interest.checked;
          return _this.toggleNext();
        };
      })(this);
      this.next = (function(_this) {
        return function() {
          var data, intercomData, ref, searchParams, searchTerms, survey_results;
          _this.scrollToTop();
          survey_results = {};
          survey_results.interests = [];
          survey_results.suggestion = _this.suggestion;
          _this.interests.map(function(interest) {
            if (interest.checked) {
              return survey_results.interests.push(interest.title);
            }
          });
          data = {
            survey_results: survey_results
          };
          mixpanel.track('Survey Answered', survey_results);
          if ($state.currentUser) {
            intercomData = {
              email: $state.currentUser.email,
              user_id: $state.currentUser.id,
              interests: survey_results.interests.join(','),
              suggestion: survey_results.suggestion
            };
            if (typeof Intercom === "function") {
              Intercom('update', intercomData);
            }
          }
          $http.post(csConfig.chefstepsEndpoint + "/user_surveys", data);
          searchTerms = survey_results.interests;
          if (((ref = survey_results.suggestion) != null ? ref.length : void 0) > 0) {
            searchTerms.push(survey_results.suggestion);
          }
          searchParams = {
            tags: searchTerms.join(','),
            per: 8
          };
          return $http.get(csConfig.chefstepsEndpoint + "/api/v0/recommendations", {
            params: searchParams
          }).then(function(response) {
            _this.recommendations = response.data;
            _this.showSurvey = false;
            if (_this.recommendations.length > 0) {
              return _this.showRecommendations = true;
            } else if (_this.recommendations.length === 0 && survey_results.suggestion) {
              return _this.showSuggestionMessage = true;
            }
          });
        };
      })(this);
      this.done = function() {
        return ModalService.resolve();
      };
      this.skip = function() {
        return ModalService.reject();
      };
      this.scrollToTop = function() {
        var el;
        el = angular.element($element);
        return el[0].scrollTop = 0;
      };
      return this;
    }],
    controllerAs: 'ftue',
    templateUrl: "/assets/templates/modals/ftue/ftue.html"
  };
}]);




this.app.directive('internationalJoule', ["ModalService", "utilities", "$http", "localStorageService", "stripeService", function(ModalService, utilities, $http, localStorageService, stripeService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.params = ModalService.params();
      this.close = function() {
        return ModalService.resolve();
      };
      this.encodeForMailto = function(text) {
        return utilities.urlSafeString(text);
      };
      this.continueToCheckout = (function(_this) {
        return function() {
          if (_this.params.checkoutUrl) {
            return window.location.assign(_this.params.checkoutUrl);
          } else {
            ModalService.resolve();
            return stripeService.showCheckout(_this.params.sku, _this.params.user, _this.params.isGift, true);
          }
        };
      })(this);
      this.addToInternationalJouleMailingList = function() {
        return ModalService.open('login', {
          source: 'buyButton'
        }).then((function(_this) {
          return function() {
            var headerParams, userToken;
            userToken = localStorageService.get('user.token');
            headerParams = {
              'Authorization': 'Bearer ' + userToken,
              "x-csrf-token": void 0
            };
            return $http({
              method: 'POST',
              headers: headerParams,
              params: null,
              url: '/api/v0/users/international_joule'
            }).success(function(data, status, headers, config) {
              return _this.params.type = 'thanks';
            }).error(function(data, status, headers, config) {
              return _this.params.type = 'error';
            });
          };
        })(this));
      };
      return this;
    }],
    controllerAs: 'internationalJoule',
    templateUrl: "/assets/templates/modals/internationalJoule/internationalJoule.html"
  };
}]);




this.app.directive('jouleWaitlist', ["ModalService", "AnalyticsService", function(ModalService, AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.params = ModalService.params();
      this.close = function() {
        return ModalService.resolve();
      };
      $scope.formSubmitted = function() {
        AnalyticsService.track('Joule Waitlist Joined');
        return true;
      };
      return this;
    }],
    controllerAs: 'jouleWaitlist',
    templateUrl: "/assets/templates/modals/jouleWaitlist/jouleWaitlist.html"
  };
}]);




this.app.directive('login', ["ModalService", "AnalyticsService", "$state", "authenticationService", "$http", "$rootScope", "csAdwords", "csFacebookConversion", "formHelper", "localStorageService", function(ModalService, AnalyticsService, $state, authenticationService, $http, $rootScope, csAdwords, csFacebookConversion, formHelper, localStorageService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.params = ModalService.params();
      this.showErrorFor = (function(_this) {
        return function(fieldName, validationParam) {
          return formHelper.showErrorFor(_this.form, fieldName, validationParam);
        };
      })(this);
      this.close = function() {
        return ModalService.reject();
      };
      this.submit = (function(_this) {
        return function() {
          var loginError, loginSuccess;
          loginSuccess = function() {
            var properties;
            _this.showSpinner = false;
            properties = ModalService.modal.params;
            AnalyticsService.reidentify();
            AnalyticsService.track('Logged In JS', properties);
            return _this.resolveSuccess();
          };
          loginError = function() {
            _this.errorMessage = 'We were unable to match the email and password you provided. Please check your entries and try again.';
            return _this.showSpinner = false;
          };
          if (_this.form.$valid) {
            _this.showSpinner = true;
            return authenticationService.loginWithEmail(_this.form.email.$modelValue, _this.form.password.$modelValue).then(loginSuccess, loginError);
          }
        };
      })(this);
      this.signup = function() {
        return ModalService.open('signup', ModalService.modal.params);
      };
      this.recover = function() {
        return ModalService.open('recover');
      };
      this.resolveSuccess = function(type) {
        if (type == null) {
          type = 'normal';
        }
        $rootScope.$on('$stateChangeSuccess', function() {
          var ref, userToken;
          if ((ref = $state.currentUser) != null ? ref.needs_special_terms : void 0) {
            userToken = localStorageService.get('user.token');
            $http({
              method: 'GET',
              url: '/api/v0/users/shown_terms',
              headers: {
                Authorization: "Bearer " + userToken
              }
            });
            return ModalService.open('specialTerms');
          } else {
            if (type === 'ftue') {
              return ModalService.open('ftue');
            } else {
              return ModalService.resolve();
            }
          }
        });
        return $state.reload();
      };
      this.facebook = (function(_this) {
        return function() {
          var facebookResponse, loginError, loginSuccess;
          _this.showSpinner = true;
          loginSuccess = function(response) {
            var properties;
            _this.showSpinner = false;
            if (response.newUser) {
              csAdwords.track(998032928, '77TfCIjjrAgQoIzz2wM');
              csFacebookConversion.track(6014798030226, 0.00);
              properties = {
                source: 'modal',
                method: 'facebook'
              };
              AnalyticsService.reidentify();
              AnalyticsService.track('Signed Up JS', properties);
              AnalyticsService.track('Complete', {
                category: 'Sign Up'
              });
              return _this.resolveSuccess('ftue');
            } else {
              return _this.resolveSuccess();
            }
          };
          loginError = function(error) {
            _this.showSpinner = false;
            if (error.message === 'User cancelled login or did not fully authorize.') {
              return _this.errorMessage = "Please try again. Click 'okay' to allow ChefSteps to sign in with Facebook";
            }
          };
          facebookResponse = window.facebookResponse;
          return authenticationService.loginWithFacebook(facebookResponse).then(loginSuccess, loginError);
        };
      })(this);
      return this;
    }],
    controllerAs: 'login',
    templateUrl: "/assets/templates/modals/login/login.html"
  };
}]);




this.app.directive('modalContent', ["ModalService", function(ModalService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.content = ModalService.modal.params.content;
      this.close = function() {
        return ModalService.reject();
      };
      return this;
    }],
    controllerAs: 'modalContent',
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/modals/modalContent/modalContent.html"
  };
}]);




this.app.directive('recover', ["ModalService", "AnalyticsService", "$state", "authenticationService", "formHelper", "alertService", function(ModalService, AnalyticsService, $state, authenticationService, formHelper, alertService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.showErrorFor = (function(_this) {
        return function(fieldName, validationParam) {
          return formHelper.showErrorFor(_this.form, fieldName, validationParam);
        };
      })(this);
      this.close = function() {
        return ModalService.reject();
      };
      this.submit = (function(_this) {
        return function() {
          var recoverError, recoverSuccess;
          recoverSuccess = function() {
            AnalyticsService.track('Modal Recover Submit Success', {
              url: $state.current.url
            });
            _this.showSpinner = false;
            ModalService.resolve();
            if ($state.current.name === 'passwordReset') {
              alertService.addAlert({
                type: 'success',
                message: 'Please check your email for password recovery instructions.'
              });
              return $state.go('main.home');
            }
          };
          recoverError = function() {
            AnalyticsService.track('Modal Recover Submit Error', {
              url: $state.current.url
            });
            return _this.showSpinner = false;
          };
          if (_this.form.$valid) {
            AnalyticsService.track('Modal Recover Form Submitted', {
              url: $state.current.url
            });
            _this.showSpinner = true;
            return authenticationService.recover(_this.form.email.$modelValue).then(recoverSuccess, recoverError);
          }
        };
      })(this);
      this.signup = function() {
        var signupError, signupSuccess;
        signupSuccess = function() {
          return console.log('Resolved signup');
        };
        signupError = function() {
          return console.log('Rejected signup');
        };
        return ModalService.open('signup', ModalService.modal.params).then(signupSuccess, signupError);
      };
      return this;
    }],
    controllerAs: 'recover',
    templateUrl: "/assets/templates/modals/recover/recover.html"
  };
}]);




this.app.directive('requirePassword', ["ModalService", "AnalyticsService", "$state", "authenticationService", "$http", "$rootScope", function(ModalService, AnalyticsService, $state, authenticationService, $http, $rootScope) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.email = ModalService.params().email;
      this.close = function() {
        return ModalService.reject();
      };
      this.submit = (function(_this) {
        return function() {
          var requirePasswordError, requirePasswordSuccess;
          requirePasswordSuccess = function() {
            AnalyticsService.track('Modal Require Password Submit Success', {
              url: $state.current.url
            });
            $state.reload();
            _this.showSpinner = false;
            return ModalService.resolve();
          };
          requirePasswordError = function() {
            AnalyticsService.track('Modal Require Password Submit Error', {
              url: $state.current.url
            });
            return _this.showSpinner = false;
          };
          if (_this.form.$valid) {
            AnalyticsService.track('Modal Require Password Form Submitted', {
              url: $state.current.url
            });
            _this.showSpinner = true;
            return authenticationService.loginWithEmail(_this.form.email.$modelValue, _this.form.password.$modelValue).then(requirePasswordSuccess, requirePasswordError);
          }
        };
      })(this);
      return this;
    }],
    controllerAs: 'requirePassword',
    templateUrl: "/assets/templates/modals/requirePassword/requirePassword.html"
  };
}]);




this.app.directive('signup', ["ModalService", "LocationService", function(ModalService, LocationService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.params = ModalService.params();
      this.shouldSendToFTUE = ModalService.shouldSendToFTUE();
      this.login = function() {
        return ModalService.open('login', ModalService.modal.params);
      };
      this.isInUS = function() {
        return LocationService.isInUS();
      };
      return this;
    }],
    controllerAs: 'signup',
    templateUrl: "/assets/templates/modals/signUp/signUp.html"
  };
}]);




this.app.directive('specialTerms', ["ModalService", function(ModalService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.params = ModalService.params();
      this.close = function() {
        return ModalService.resolve();
      };
      return this;
    }],
    controllerAs: 'specialTerms',
    templateUrl: "/assets/templates/modals/specialTerms/specialTerms.html"
  };
}]);




this.app.directive('terms', ["ModalService", function(ModalService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.signup = function() {
        var signupError, signupSuccess;
        signupSuccess = function() {
          return console.log('Resolved signup');
        };
        signupError = function() {
          return console.log('Rejected signup');
        };
        return ModalService.open('signup', ModalService.modal.params).then(signupSuccess, signupError);
      };
      return this;
    }],
    controllerAs: 'terms',
    templateUrl: "/assets/templates/modals/terms/terms.html"
  };
}]);




this.app.directive('waiting', ["ModalService", function(ModalService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.close = function() {
        return ModalService.resolve();
      };
      return this;
    }],
    controllerAs: 'waiting',
    templateUrl: "/assets/templates/modals/waiting/waiting.html"
  };
}]);




this.app.controller('ActivityController', ["staticRenderService", "suggestedRecipeService", "$window", "$state", "$stateParams", "AnalyticsService", "ActivityService", "csIngredientService", "MetadataService", "$scope", "$rootScope", "$filter", "$sce", "navService", "PageService", function(staticRenderService, suggestedRecipeService, $window, $state, $stateParams, AnalyticsService, ActivityService, csIngredientService, MetadataService, $scope, $rootScope, $filter, $sce, navService, PageService) {
  var broadcastNavState, getActiveMinutes, getEventData, getExtendedEventData, getSuggestedRecipes, isPrinted, isProbablyCooked, isRecipe, isReportedCooked, lastActiveTime, loadActivity, maybeReportCooked, pageLoadedTime, renderedText, resetPageLoadedTime, trackActivityEngagementFinal, updateActiveTime, updateNavStateForWidth;
  this.state = $stateParams;
  this.navService = navService;
  this.activity = {};
  this.commentCount = -1;
  this.ingredients = [];
  this.rescaleFactor = 1;
  this.isScalingMode = false;
  this.unit = 'metric';
  this.isNellPopupActive = false;
  this.isStaticRender = staticRenderService.get();
  this.collectionTitle = '';
  isPrinted = false;
  isReportedCooked = false;
  lastActiveTime = pageLoadedTime = Date.now();
  broadcastNavState = (function(_this) {
    return function() {
      $rootScope.$broadcast('nav.hideNav', _this.showCollectionNav);
      return $rootScope.$broadcast('collectionNav.openState', _this.showCollectionNav);
    };
  })(this);
  updateNavStateForWidth = (function(_this) {
    return function() {
      _this.showCollectionNav = ($window.innerWidth >= 1250) && $state.params['context'];
      return broadcastNavState();
    };
  })(this);
  updateNavStateForWidth();
  $scope.$on('$destroy', (function(_this) {
    return function() {
      _this.showCollectionNav = false;
      return broadcastNavState();
    };
  })(this));
  resetPageLoadedTime = function() {
    return lastActiveTime = pageLoadedTime = Date.now();
  };
  getActiveMinutes = function() {
    return Math.floor((lastActiveTime - pageLoadedTime) / (1000 * 60.0));
  };
  updateActiveTime = function() {
    lastActiveTime = Date.now();
    return maybeReportCooked();
  };
  angular.element($window).on('scroll', _.throttle(updateActiveTime, 10000));
  isProbablyCooked = function() {
    return isPrinted || (getActiveMinutes() >= 15);
  };
  maybeReportCooked = function() {
    if (isReportedCooked) {
      return;
    }
    if (isProbablyCooked()) {
      isReportedCooked = true;
      return AnalyticsService.track('Activity Probably Cooked2', getExtendedEventData());
    }
  };
  trackActivityEngagementFinal = function() {
    resetPageLoadedTime();
    return isPrinted = false;
  };
  angular.element($window).on('unload', function() {
    var results, start;
    trackActivityEngagementFinal();
    start = Date.now();
    results = [];
    while ((Date.now() - start) < 250) {
      results.push(_.noop());
    }
    return results;
  });
  window.onbeforeprint = function() {
    isPrinted = true;
    return maybeReportCooked();
  };
  if (window.matchMedia) {
    window.matchMedia("print").addListener(function(mql) {
      if (mql.matches) {
        isPrinted = true;
        return maybeReportCooked();
      }
    });
  }
  isRecipe = (function(_this) {
    return function() {
      var ref;
      return ((ref = _this.activity.ingredients) != null ? ref.length : void 0) > 1;
    };
  })(this);
  getEventData = (function(_this) {
    return function() {
      return {
        'context': $state.params['context'] || 'naked',
        'title': _this.activity.title,
        'slug': _this.state.slug,
        'isRecipe': isRecipe(),
        'tags': _this.activity.tagList,
        'paywalled': _this.paywalled()
      };
    };
  })(this);
  getExtendedEventData = function() {
    var eventData;
    eventData = getEventData();
    return angular.extend(eventData, {
      printed: isPrinted,
      activeMinutes: getActiveMinutes(),
      probablyCooked: isProbablyCooked()
    });
  };
  this.doPrint = function() {
    isPrinted = true;
    maybeReportCooked();
    window.print();
    if (window.stop) {
      window.location.reload();
      window.stop();
    }
    return false;
  };
  $scope.$on('rescaleIngredients', (function(_this) {
    return function(e, factor) {
      _.each(_this.ingredients, function(ingredient) {
        return csIngredientService.rescaleIngredient(ingredient, factor);
      });
      _.each(_this.steps, function(step) {
        return _.each(step.ingredients, function(ingredient) {
          return csIngredientService.rescaleIngredient(ingredient, factor);
        });
      });
      _this.rescaleFactor = factor;
      return AnalyticsService.track('Scaling Changed', {
        slug: _this.state.slug
      });
    };
  })(this));
  $scope.$on('setUnit', (function(_this) {
    return function(e, unit) {
      return _this.unit = unit;
    };
  })(this));
  $scope.$on('toggleScalingMode', (function(_this) {
    return function(e) {
      _this.isScalingMode = !_this.isScalingMode;
      if (_this.isScalingMode) {
        AnalyticsService.track('Ingredients Menu Opened', {
          slug: _this.state.slug
        });
        return $scope.$broadcast('focusOnCsIngredients');
      }
    };
  })(this));
  $scope.$on('hideNellPopup', (function(_this) {
    return function() {
      return _this.isNellPopupActive = false;
    };
  })(this));
  $scope.$on('showNellPopup', (function(_this) {
    return function(e, d) {
      _this.isNellPopupActive = true;
      return _this.nellContent = d;
    };
  })(this));
  this.heroContent = {
    image: '',
    title: ''
  };
  this.relatedRecipes = [];
  this.usedInRecipes = [];
  getSuggestedRecipes = (function(_this) {
    return function(activity) {
      var suggestedRecipeSlots;
      suggestedRecipeSlots = _.min([3, _.floor(activity.description.length / 500)]);
      _this.usedInRecipes = activity.usedIn.slice(0, suggestedRecipeSlots);
      suggestedRecipeSlots = _.max([0, suggestedRecipeSlots - _this.usedInRecipes.length]);
      return suggestedRecipeService.getRecipes(activity, suggestedRecipeSlots).then(function(result) {
        return _this.relatedRecipes = result;
      });
    };
  })(this);
  this.shouldIncludeJSONLD = function() {
    var ref, ref1;
    if (!((ref = this.activity) != null ? (ref1 = ref.ingredients) != null ? ref1.length : void 0 : void 0) > 0) {
      return false;
    }
    return this.activity.chefstepsGenerated;
  };
  renderedText = function(x) {
    if (!x) {
      return '';
    }
    return $filter('shortcode')(x);
  };
  this.getJSONLD = function() {
    var a, description, ingredients, jsonld, steps;
    a = this.activity;
    ingredients = _.map(a.ingredients, function(ai) {
      return ai.title;
    });
    steps = _.chain(a.steps).filter(function(step) {
      var ref;
      return (!step.hideNumber) && (((ref = step.directions) != null ? ref.length : void 0) > 0);
    }).map(function(step) {
      return renderedText(step.title + " " + renderedText(step.directions));
    }).value();
    description = renderedText(a.shortDescription || a.description);
    jsonld = {
      '@context': 'http://schema.org/',
      '@type': 'Recipe',
      name: a.title,
      image: a.image,
      recipeYield: a["yield"],
      description: description,
      ingredients: ingredients,
      author: {
        '@type': 'Organization',
        name: 'ChefSteps'
      }
    };
    return $sce.trustAsHtml(JSON.stringify(_.pick(jsonld, function(v, k) {
      return !!v;
    })));
  };
  loadActivity = (function(_this) {
    return function(result) {
      var title;
      _this.activity = result;
      $window.scroll(0, 0);
      if ($state.currentUser) {
        navService.setState('nav-ghost');
      }
      AnalyticsService.track('Activity Viewed', getExtendedEventData());
      getSuggestedRecipes(result);
      _this.heroContent = {
        image: result.heroImage || result.image,
        title: result.title,
        description: result.timing ? "Estimated time: " + result.timing : null,
        youtubeId: result.youtubeId,
        vimeoId: result.vimeoId
      };
      _this.heroVisualSubtitle = "Estimated time: " + result.timing;
      _this.timing = result.timing;
      _this["yield"] = result["yield"];
      _this.equipment = result.equipment;
      _this.createdByAdmin = result.chefstepsGenerated;
      _this.ingredients = _.map(result.ingredients, csIngredientService.toIngredient);
      _this.steps = _.map(result.steps, function(step) {
        return _.assign(step, {
          ingredients: _.map(step.ingredients, csIngredientService.toIngredient)
        });
      });
      _this.shortTextDescription = $filter('shortcode')(result.shortDescription || result.description);
      title = result.title;
      if (isRecipe()) {
        if (_this.tagListIncludes('sous vide')) {
          title = title + ' | Sous Vide Recipe';
        } else {
          title = title + ' | Recipe';
        }
      }
      MetadataService.set({
        title: title,
        description: _this.shortTextDescription,
        keywords: result.tagList,
        canonical: "/activities/" + _this.state.slug,
        noindex: !result.chefstepsGenerated,
        sousVideTargeted: _this.tagListIncludes('sous vide'),
        og: {
          title: result.title,
          image: result.image,
          description: _this.shortTextDescription
        },
        twitter: {
          image: result.image
        }
      });
      return updateNavStateForWidth();
    };
  })(this);
  this.fetchActivity = (function(_this) {
    return function() {
      var activityRequest;
      if (_this.state.version) {
        activityRequest = ActivityService.get({
          id: $state.params.slug,
          version: $state.params.version
        });
      } else {
        activityRequest = ActivityService.get({
          id: $state.params.slug
        });
      }
      return activityRequest.$promise.then(function(result) {
        return loadActivity(result);
      })["catch"](function(e) {
        var errorCode;
        errorCode = e.status.toString().charAt(0);
        if (errorCode === '4') {
          return $state.go('404');
        } else if (errorCode === '5') {
          return $state.go('404');
        }
      });
    };
  })(this);
  this.fetchActivity();
  if ($state.params['context']) {
    PageService.show({
      id: $state.params['context']
    }, (function(_this) {
      return function(content) {
        return _this.collectionTitle = content.title;
      };
    })(this));
  }
  this.tagListIncludes = (function(_this) {
    return function(tag) {
      return _.includes(_this.activity.tagList, tag);
    };
  })(this);
  this.showJouleAd = (function(_this) {
    return function() {
      var ref;
      return _this.tagListIncludes('sous vide') && !((ref = $state.currentUser) != null ? ref.joule_purchase_count : void 0) && !_this.paywalled();
    };
  })(this);
  this.showEditButton = function() {
    var ref, ref1, ref2;
    return ((ref = $state.currentUser) != null ? ref.admin : void 0) || ((ref1 = this.activity.creator) != null ? ref1.id : void 0) === ((ref2 = $state.currentUser) != null ? ref2.id : void 0);
  };
  this.paywalled = (function(_this) {
    return function() {
      var ref;
      return _this.activity.premium && !((ref = $state.currentUser) != null ? ref.premium : void 0);
    };
  })(this);
  this.toggleCollectionNav = (function(_this) {
    return function() {
      _this.showCollectionNav = !_this.showCollectionNav;
      navService.showCollectionNavPrompt = false;
      return broadcastNavState();
    };
  })(this);
  $rootScope.$on('throttledScroll', function() {
    if ($window.pageYOffset >= 300) {
      if ($state.params['context']) {
        navService.showCollectionNavPrompt = false;
      }
      return $rootScope.$safeApply();
    }
  });
  $rootScope.$watch(this.paywalled, function(newValue, oldValue) {
    if (oldValue && !newValue) {
      return $state.reload();
    }
  });
  return this;
}]);




this.app.controller('GalleryController', ["$scope", "$rootScope", "AlgoliaSearchService", "$timeout", "$sce", "$state", "MetadataService", "mobileDetectionService", "$window", "AnalyticsService", function($scope, $rootScope, AlgoliaSearchService, $timeout, $sce, $state, MetadataService, mobileDetectionService, $window, AnalyticsService) {
  var adjustSortForSearch, applyFilter, lastTimeout, notifySegment, searchChanged, updateState;
  this.$state = $state;
  this.searchService = AlgoliaSearchService;
  this.results = [];
  this.emptyResultsSuggestions = [];
  this.noResults = false;
  this.dataLoading = 0;
  this.doneLoading = false;
  this.lastRequestedPage = -1;
  this.filtersCollapsed = true;
  this.sortCollapsed = true;
  $scope.$on('$locationChangeSuccess', function(event, newurl, oldurl, newstate, oldstate) {
    return applyFilter();
  });
  updateState = function() {
    return $state.go('.', $state.params);
  };
  adjustSortForSearch = function() {
    var ref;
    $state.params['sort'] = ((ref = $state.params['search_all']) != null ? ref.length : void 0) > 0 ? 'relevance' : 'newest';
    return updateState();
  };
  searchChanged = _.throttle(adjustSortForSearch, 50, {
    leading: false
  });
  this.searchChanged = function() {
    return searchChanged();
  };
  this.clearSearch = function() {
    $state.params['search_all'] = void 0;
    adjustSortForSearch();
    return $scope.$broadcast('gallerySearch');
  };
  this.clearTags = function() {
    $state.params['tag'] = void 0;
    return updateState();
  };
  this.getHoverInfo = function(activity) {
    return $sce.trustAsHtml("<i class='icon-star-empty'></i> " + (activity.likes_count || 0));
  };
  this.getResults = (function(_this) {
    return function() {
      if (_this.noResults) {
        return _this.emptyResultsSuggestions;
      }
      return _this.results;
    };
  })(this);
  this.removeTagOnBackspace = (function(_this) {
    return function(e) {
      var activeTag, searchQuery;
      searchQuery = $state.params.search_all;
      activeTag = $state.params.tag;
      if (!searchQuery && activeTag && e.keyCode === 8) {
        return _this.clearTags();
      }
    };
  })(this);
  $scope.$watch('gallery.filtersCollapsed', function(newValue, oldValue) {
    if (newValue && mobileDetectionService.isDesktop) {
      return $scope.$broadcast('gallerySearch');
    }
  });
  this.toggleSort = (function(_this) {
    return function(e) {
      _this.sortCollapsed = !_this.sortCollapsed;
      return e.stopPropagation();
    };
  })(this);
  angular.element($window).bind('click', (function(_this) {
    return function(e) {
      if (!_this.sortCollapsed) {
        return _this.sortCollapsed = true;
      }
    };
  })(this));
  this.submit = function(e) {
    e.preventDefault();
    return $scope.$broadcast('focusOff');
  };
  notifySegment = _.throttle((function() {
    var filterData;
    filterData = angular.extend({
      name: 'gallery'
    }, AlgoliaSearchService.defaultParams, $state.params);
    filterData['defaultFilter'] = _.isEqual(_.omit($state.params, function(x) {
      return _.isUndefined(x);
    }), AlgoliaSearchService.defaultParams);
    return AnalyticsService.track('Gallery Filtered', filterData);
  }), 2000, {
    leading: false
  });
  lastTimeout = null;
  applyFilter = (function(_this) {
    return function() {
      _this.doneLoading = false;
      _this.lastRequestedPage = -1;
      _this.filtersCollapsed = true;
      _this.loadOnePage();
      return notifySegment();
    };
  })(this);
  this.loadOnePage = (function(_this) {
    return function() {
      var page, publishedStatus, ref, ref1, rememberParams;
      if (!_this.doneLoading) {
        page = _this.lastRequestedPage + 1;
        _this.lastRequestedPage = page;
        _this.dataLoading += 1;
        publishedStatus = (ref = $state.params['published_status']) != null ? ref.toLowerCase() : void 0;
        if (publishedStatus === 'unpublished') {
          if (!((ref1 = $state.currentUser) != null ? ref1.admin : void 0)) {
            $state.params['published_status'] = 'published';
            updateState();
          }
        }
        _.extend($state.params, {
          attributesToRetrieve: 'objectID,title,url,slug,image,likes_count,description,has_video,activity_type,premium'
        });
        rememberParams = _.extend({}, $state.params);
        return AlgoliaSearchService.search($state.params, page).then((function(newResults) {
          _this.dataLoading -= 1;
          if (!_.isEqual(rememberParams, $state.params)) {
            return;
          }
          if (page === 0) {
            $window.scrollTo(0, 0);
            _this.results = [];
            _this.noResults = newResults.length === 0;
          }
          Array.prototype.push.apply(_this.results, newResults);
          if (newResults.length === 0) {
            _this.doneLoading = true;
          }
          if (page === 0) {
            return $timeout((function() {
              return $rootScope.$broadcast('contentChange');
            }), 1000);
          }
        }), (function() {
          _this.dataLoading -= 1;
          return _this.doneLoading = true;
        }));
      }
    };
  })(this);
  _.defaults($state.params, AlgoliaSearchService.defaultParams);
  $state.go('.', $state.params);
  notifySegment();
  $timeout(((function(_this) {
    return function() {
      return AlgoliaSearchService.search({
        sort: 'popular'
      }, 0).then(function(results) {
        return _this.emptyResultsSuggestions = results;
      });
    };
  })(this)), 1000);
  $timeout((function() {}), 20000);
  MetadataService.set({
    title: 'Recipe Gallery',
    description: 'Explore recipes from ChefSteps.com',
    keywords: '',
    canonical: "/gallery"
  });
  return this;
}]);




this.app.controller('GiftController', ["$rootScope", "$state", "ModalService", "localStorageService", "$http", "AnalyticsService", "navService", function($rootScope, $state, ModalService, localStorageService, $http, AnalyticsService, navService) {
  var ref;
  this.heroContent = {
    title: "Lucky You!",
    description: "Someone special gave you the gift of better cooking. Sign up (or sign in) to unlock ChefSteps Premium.",
    image: "https://d3awvtnmmsvyot.cloudfront.net/api/file/obQNv5iTXaml6p1MOOV8",
    customButton: {
      theme: "solid orange",
      title: "Let's Go!",
      type: 'emit',
      message: 'giftRedeem'
    }
  };
  if ((ref = $state.currentUser) != null ? ref.premium : void 0) {
    this.heroContent.title = "Welcome Back";
    this.heroContent.description = "You’re already a Premium member.";
  }
  $rootScope.$on('giftRedeem', (function(_this) {
    return function() {
      console.log("redeeem");
      return _this.redeem();
    };
  })(this));
  this.redeem = function() {
    var ref1;
    if ((ref1 = $state.currentUser) != null ? ref1.premium : void 0) {
      window.location = "/classes";
      return;
    }
    return ModalService.open('signup', {
      source: 'giftRedeem'
    }).then(function() {
      var headerParams, userToken;
      userToken = localStorageService.get('user.token');
      headerParams = {
        'Authorization': 'Bearer ' + userToken,
        "x-csrf-token": void 0
      };
      return $http({
        method: 'PUT',
        headers: headerParams,
        url: "/api/v0/charges/" + $state.params['gift_token'] + "/redeem"
      }).success(function(data, status, headers, config) {
        AnalyticsService.track('Gift Redeemed');
        return ModalService.open('buyResult', {
          type: "redeem",
          description: "ChefSteps Premium",
          buttonText: "Let's Get Started"
        }).then(function() {
          return window.location = "/classes";
        });
      }).error(function(data, status, headers, config) {
        AnalyticsService.track('Gift Redeem Error', {
          error: data.error
        });
        return ModalService.open('buyResult', {
          type: "error",
          message: data.error
        });
      });
    });
  };
  navService.setState('nav-ghost');
  return this;
}]);




this.app.controller('HomeController', ["MetadataService", "AnalyticsService", "$rootScope", function(MetadataService, AnalyticsService, $rootScope) {
  AnalyticsService.track('Viewed New Homepage');
  MetadataService.set({
    canonical: '/'
  });
  return this;
}]);




this.app.controller('JouleHeroController', ["$element", function($element) {
  this.content = {
    title: 'Meet Joule,',
    subtitle: 'Your Next Kitchen Essential.',
    image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/62xsiMSwSi2s5mpsLsp6',
    mobileImage: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/oWQCMHzHQC6DO9hW9e0x',
    youtubeId: 'WYXCjZbjPZc',
    international: {
      title: 'Meet Joule,',
      subtitle: 'Your Next Kitchen Essential.',
      description: 'Available outside the US starting in late 2016. Stay tuned for updates on special pricing for international community members.'
    }
  };
  this.theme = 'light';
  this.getAspect = function() {
    if (($element.children()[0].clientHeight / 9) > ($element.children()[0].clientWidth / 16)) {
      return 'portrait';
    }
    return 'landscape';
  };
  this.isVideoVisible = false;
  this.showVideo = (function(_this) {
    return function() {
      return _this.isVideoVisible = true;
    };
  })(this);
  this.hideVideo = (function(_this) {
    return function() {
      return _this.isVideoVisible = false;
    };
  })(this);
  this.handleEmbedVideoClicked = (function(_this) {
    return function() {
      return _this.hideVideo();
    };
  })(this);
  return this;
}]);

this.app.controller('JouleController', ["$scope", "$rootScope", "currentUser", "navService", "MetadataService", "LocationService", "responsiveService", "$window", "AnalyticsService", "PricingService", "mobileDetectionService", function($scope, $rootScope, currentUser, navService, MetadataService, LocationService, responsiveService, $window, AnalyticsService, PricingService, mobileDetectionService) {
  var canonical, description, image, title;
  this.isViewportMobile = responsiveService.isViewportMobile();
  this.isMobileDevice = mobileDetectionService.isMobile;
  this.responsiveWidth = responsiveService;
  angular.element($window).bind('resize', (function(_this) {
    return function() {
      _this.isViewportMobile = responsiveService.isViewportMobile();
      _this.setNav();
      return $rootScope.$safeApply();
    };
  })(this));
  this.setNav = (function(_this) {
    return function() {
      if (_this.isViewportMobile) {
        return navService.setState('nav-ghost');
      } else {
        return navService.setState('nav-ghost');
      }
    };
  })(this);
  this.setNav();
  this.pageNav = {
    type: 'pageNav',
    meta: {
      items: [
        {
          content: {
            type: 'Joule',
            customButton: {
              type: 'shopify',
              title: 'Preorder',
              theme: 'solid orange',
              sku: 'cs10001'
            }
          }
        }
      ]
    },
    theme: 'gray'
  };
  this.timeline = {
    type: 'custom',
    meta: {
      items: [
        {
          content: {
            template: '/templates/pages/joule/jouleTimeline/jouleTimeline.html'
          }
        }
      ]
    },
    theme: 'light',
    size: 'full'
  };
  canonical = '/joule';
  title = 'Joule: Sous Vide by ChefSteps';
  description = 'Joule is the sous vide tool that changes everything. Controlled by a groundbreaking custom app, Joule is a sleek, powerful cooking tool that makes sous vide a real part of today’s kitchen.';
  image = 'https://d3awvtnmmsvyot.cloudfront.net/api/file/GXeldtdqSHyi2QI4cdGt';
  MetadataService.set({
    title: title,
    description: description,
    keywords: "joule, sous vide, chefsteps, circulator",
    canonical: canonical,
    image: image,
    sousVideTargeted: true,
    og: {
      url: canonical
    }
  });
  if (currentUser != null ? currentUser.admin : void 0) {
    this.showMenu = true;
  }
  this.isInUS = LocationService.isInUS();
  this.currentUserPremium = currentUser != null ? currentUser.premium : void 0;
  this.currentUserUsedDiscount = currentUser != null ? currentUser.used_circulator_discount : void 0;
  this.msrp = 199;
  this.price = 199;
  AnalyticsService.track('Viewed Product', {
    sku: 'cs10001',
    name: 'Joule',
    price: this.price
  });
  this.track = function(eventName) {
    console.log('tracking: ', eventName);
    return AnalyticsService.track("Joule " + eventName);
  };
  return this;
}]);




this.app.controller('addressConfirmedController', ["$stateParams", "addressConfirmed", function($stateParams, addressConfirmed) {
  var status;
  status = addressConfirmed.status;
  this.orderId = $stateParams.id;
  if (status === 200) {
    this.success = true;
  } else {
    this.success = false;
  }
  return this;
}]);




this.app.controller('updateAddressController', ["$rootScope", "$state", "customerOrder", "CustomerOrderService", "$stateParams", "currentUser", "ModalService", function($rootScope, $state, customerOrder, CustomerOrderService, $stateParams, currentUser, ModalService) {
  this.orderId = $stateParams.id;
  this.currentUser = currentUser;
  this.success = false;
  if (this.currentUser) {
    this.shippingAddress = customerOrder.shipping_address;
    this.fulfillmentStatus = customerOrder.fulfillment_status;
    this.content = {
      title: 'Your shipping address is:',
      updateTitle: 'Update Your Shipping Address',
      successMessage: "Thank you! Your address update has been successfully submitted."
    };
    this.updateAddress = false;
    this.currentUserName = this.shippingAddress.name;
  } else {
    ModalService.open('login');
  }
  this.submit = (function(_this) {
    return function() {
      var addressData;
      addressData = {
        address1: _this.form.address1.$modelValue,
        address2: _this.form.address2.$modelValue,
        city: _this.form.city.$modelValue,
        province: _this.form.province.$modelValue,
        zip: _this.form.zip.$modelValue
      };
      return CustomerOrderService.updateAddress({
        id: $stateParams.id,
        order: {
          shipping_address: addressData
        }
      }, (function(data) {
        return _this.success = true;
      }), function(error) {
        if (error.status === 400) {
          return _this.errorMessages = error.data.errors;
        } else {
          return _this.showEmailUs = true;
        }
      });
    };
  })(this);
  return this;
}]);




this.app.controller('SSOController', ["currentUser", "$location", "ssoService", function(currentUser, $location, ssoService) {
  var redirect;
  this.state = $location.search().state;
  this.token = $location.search().token;
  this.showForm = false;
  if (currentUser && !ssoService.isAmazon() && !this.token) {
    ssoService.signAndRedirect(this.state);
  } else if (this.token) {
    redirect = $location.search().path;
    if (currentUser) {
      ssoService.redirectOrRoot(redirect);
    } else {
      ssoService.signAndUpgradeToken(this.token, redirect);
    }
  } else {
    this.showForm = true;
  }
  return this;
}]);




this.app.directive('bannerInline', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'bannerInline',
    controller: function() {
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '='
    },
    templateUrl: "/assets/templates/components/banner/bannerInline/bannerInline.html"
  };
});




this.app.directive('bannerInlineForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'bannerInlineForm',
      controller: function() {
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/banner/bannerInline/bannerInlineForm.html"
    };
  }
]);




this.app.directive('bannerJoule1', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'bannerJoule1',
    controller: function() {
      this.track = function() {
        return AnalyticsService.track('Banner Clicked', {
          name: 'bannerJoule1'
        });
      };
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '='
    },
    templateUrl: "/assets/templates/components/banner/bannerJoule1/bannerJoule1.html"
  };
}]);




this.app.directive('bannerJouleNav', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'bannerJouleNav',
    controller: function() {
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '='
    },
    templateUrl: "/assets/templates/components/banner/bannerJouleNav/bannerJouleNav.html"
  };
});




this.app.directive('madlib', ["authenticationService", "$rootScope", "$state", "csAdwords", "csFacebookConversion", "AnalyticsService", "ModalService", "formHelper", "LocationService", function(authenticationService, $rootScope, $state, csAdwords, csFacebookConversion, AnalyticsService, ModalService, formHelper, LocationService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'banner',
    controller: ["$scope", function($scope) {
      LocationService.loadData();
      this.showPassword = false;
      this.showSuccess = false;
      this.showMadlib = false;
      this.showSpinner = false;
      if ($state.currentUser) {
        this.showMadlib = false;
        AnalyticsService.track('Madlib Not Shown', {
          url: $state.current.url
        });
      } else {
        this.showMadlib = true;
        AnalyticsService.track('Madlib Shown', {
          url: $state.current.url
        });
      }
      this.togglePassword = function() {
        AnalyticsService.track('Madlib Toggled Password', {
          url: $state.current.url
        });
        return this.showPassword = !this.showPassword;
      };
      this.isInUS = function() {
        return LocationService.isInUS();
      };
      this.showErrorFor = (function(_this) {
        return function(fieldName, validationParam) {
          return formHelper.showErrorFor(_this.bannerForm, fieldName, validationParam);
        };
      })(this);
      this.submit = (function(_this) {
        return function() {
          var ref, registrationError, registrationSuccess;
          registrationSuccess = function() {
            var properties;
            AnalyticsService.track('Madlib Registration Success', {
              url: $state.current.url
            });
            csAdwords.track(998032928, '77TfCIjjrAgQoIzz2wM');
            csFacebookConversion.track(6014798030226, 0.00);
            properties = {
              source: _this.source,
              method: 'standard'
            };
            AnalyticsService.track('Signed Up JS', properties);
            AnalyticsService.track('Complete', {
              category: 'Sign Up'
            });
            _this.showSuccess = true;
            _this.showMadlib = false;
            _this.showSpinner = false;
            ModalService.open('ftue');
            return $state.reload();
          };
          registrationError = function() {
            console.log(_this.bannerForm);
            AnalyticsService.track('Madlib Registration Error', {
              url: $state.current.url
            });
            $rootScope.$emit('New Alert', {
              type: 'error',
              message: 'An error occured while registering your account.'
            });
            return _this.showSpinner = false;
          };
          if (_this.bannerForm.$valid) {
            AnalyticsService.track('Madlib Form Submitted', {
              url: $state.current.url
            });
            _this.showSpinner = true;
            return authenticationService.registerWithEmail(_this.bannerForm.name.$modelValue, _this.bannerForm.email.$modelValue, _this.bannerForm.password.$modelValue, ((ref = _this.bannerForm.optout) != null ? ref.$modelValue : void 0) || false).then(registrationSuccess, registrationError);
          }
        };
      })(this);
      this.successClose = (function(_this) {
        return function() {
          return _this.showSuccess = false;
        };
      })(this);
      $scope.$watch('banner.bannerForm.$dirty', function(newValue, oldValue) {
        if (newValue) {
          return AnalyticsService.track('Madlib Form Dirty', {
            url: $state.current.url
          });
        }
      });
      $scope.$watch('banner.bannerForm.$valid', function(newValue, oldValue) {
        if (newValue) {
          return AnalyticsService.track('Madlib Submit Button Active', {
            url: $state.current.url
          });
        }
      });
      return this;
    }],
    bindToController: {
      theme: '=',
      content: '=',
      source: '='
    },
    templateUrl: "/assets/templates/components/banner/bannerMadlib/madlib.html"
  };
}]);




this.app.directive('bannerPremiumClass', ["PricingService", "AnalyticsService", function(PricingService, AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'bannerPremiumClass',
    replace: true,
    controller: function() {
      this.trackMoreInfo = function() {
        return AnalyticsService.track('Banner Clicked', {
          name: 'bannerPremiumClass'
        });
      };
      this.price = PricingService.getPrice(PricingService.PREMIUM_SKU, {
        userIsPremium: false,
        usedCirculatorDiscount: false
      }).price;
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '='
    },
    templateUrl: "/assets/templates/components/banner/bannerPremiumClass/bannerPremiumClass.html"
  };
}]);




this.app.directive('bannerPremiumPaywall', ["PricingService", "AnalyticsService", function(PricingService, AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'bannerPremiumPaywall',
    replace: true,
    controller: function() {
      this.trackMoreInfo = function() {
        return AnalyticsService.track('Banner Clicked', {
          name: 'bannerPremiumPaywall'
        });
      };
      this.price = PricingService.getPrice(PricingService.PREMIUM_SKU, {
        userIsPremium: false,
        usedCirculatorDiscount: false
      }).price;
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '='
    },
    templateUrl: "/assets/templates/components/banner/bannerPremiumPaywall/bannerPremiumPaywall.html"
  };
}]);




this.app.directive('bannerText', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'bannerText',
    controller: function() {
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '='
    },
    templateUrl: "/assets/templates/components/banner/bannerText/bannerText.html"
  };
});




this.app.directive('bannerTextForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'bannerTextForm',
      controller: function() {
        return this;
      },
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/banner/bannerText/bannerTextForm.html"
    };
  }
]);




this.app.directive('comment', ["$compile", "$state", "$http", "CommentService", "$timeout", "ModalService", function($compile, $state, $http, CommentService, $timeout, ModalService) {
  return {
    restrict: 'E',
    replace: true,
    scope: {},
    controllerAs: 'comment',
    controller: ["$element", function($element) {
      this.currentUser = $state.currentUser;
      this.showInput = false;
      this.editing = false;
      this.toolbar = CommentService.toolbar;
      this.like = (function(_this) {
        return function(commentId) {
          return CommentService.like(commentId).then(function(likeResponse) {
            return _this.commentData.likes.push(likeResponse);
          });
        };
      })(this);
      this.unlike = (function(_this) {
        return function(commentId) {
          return CommentService.unlike(commentId).then(function(unlikeResponse) {
            console.log('unlike! ', unlikeResponse);
            return console.log('unlike likes: ', _this.commentData.likes);
          });
        };
      })(this);
      this.liked = (function(_this) {
        return function() {
          return CommentService.liked(_this.commentData.likes);
        };
      })(this);
      this.reply = (function(_this) {
        return function() {
          return _this.showInput = !_this.showInput;
        };
      })(this);
      this.focus = function() {
        return $timeout((function() {
          return $element[0].querySelector("[ta-bind]").focus();
        }), 300);
      };
      this.submit = (function(_this) {
        return function() {
          var comment;
          comment = {
            content: _this.input,
            discussionId: _this.commentData.discussionId,
            discussionType: 'post',
            parentCommentAuthor: _this.commentData.author.id,
            parentCommentId: _this.commentData.id
          };
          return CommentService.post(comment).then(function(response) {
            var newComment;
            newComment = response.data.commentData;
            newComment.children = [];
            _this.commentData.children.push(newComment);
            _this.input = null;
            return _this.showInput = false;
          });
        };
      })(this);
      this.cancel = (function(_this) {
        return function() {
          return _this.showInput = false;
        };
      })(this);
      this.canEdit = function() {
        return CommentService.canEdit(this.commentData);
      };
      this.edit = (function(_this) {
        return function() {
          _this.editInput = angular.copy(_this.commentData.content);
          return _this.editing = !_this.editing;
        };
      })(this);
      this.cancelEdit = (function(_this) {
        return function() {
          return _this.editing = false;
        };
      })(this);
      this.update = (function(_this) {
        return function() {
          var commentId, content;
          commentId = _this.commentData.id;
          content = _this.editInput;
          return CommentService.put(commentId, content).then(function(response) {
            _this.commentData.content = content;
            _this.editing = false;
            return _this.editInput = null;
          });
        };
      })(this);
      this["delete"] = (function(_this) {
        return function() {
          var commentId;
          if (confirm('Are you sure you want to delete this comment?')) {
            commentId = _this.commentData.id;
            return CommentService["delete"](commentId).then(function(response) {
              return _this.commentData.deleted = true;
            });
          }
        };
      })(this);
      this.login = function() {
        return ModalService.open('login');
      };
      return this;
    }],
    link: function(scope, element, attrs) {
      var commentsTemplate;
      if (angular.isArray(scope.comment.commentData.children) && !scope.comment.commentData.deleted) {
        scope.comment.childDepth = scope.comment.parentDepth + 1;
        commentsTemplate = $compile("<comments-list class='comment-children' comments='comment.commentData.children' depth='comment.childDepth'></comments-list>")(scope);
        return element.append(commentsTemplate);
      }
    },
    bindToController: {
      commentData: '=',
      parentDepth: '='
    },
    templateUrl: "/assets/templates/components/comments/comment/comment.html"
  };
}]);




this.app.directive('commentsList', ["responsiveService", function(responsiveService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'commentsList',
    controller: function() {
      var maxIndentations;
      if (responsiveService.isViewportLTE(320)) {
        maxIndentations = 2;
      } else {
        maxIndentations = 3;
      }
      this.indentClass = (function(_this) {
        return function() {
          var ref;
          if ((0 < (ref = _this.depth) && ref < maxIndentations)) {
            return 'comment-indent';
          }
        };
      })(this);
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      comments: '=',
      depth: '='
    },
    templateUrl: "/assets/templates/components/comments/commentsList/commentsList.html"
  };
}]);




this.app.directive('downloadButton', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'downloadButton',
      controller: function() {
        var blob, fileContent;
        fileContent = 'file content for example';
        blob = new Blob([fileContent], {
          type: 'text/plain'
        });
        return this.blobUrl = (window.URL || window.webkitURL).createObjectURL(blob);
      },
      bindToController: {
        title: '=',
        url: '=',
        filename: '=',
        theme: '='
      },
      templateUrl: "/assets/templates/components/customButton/downloadButton/downloadButton.html"
    };
  }
]);




this.app.directive('downloadButtonForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'downloadButtonForm',
      controller: function() {},
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/customButton/downloadButton/downloadButtonForm.html"
    };
  }
]);




this.app.directive('emitButton', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'emitButton',
      bindToController: {
        title: '=',
        message: '=',
        theme: '='
      },
      templateUrl: "/assets/templates/components/customButton/emitButton/emitButton.html",
      controller: ["$scope", function($scope) {
        this.emitMessage = (function(_this) {
          return function() {
            return $scope.$emit(_this.message);
          };
        })(this);
        return this;
      }]
    };
  }
]);




this.app.directive('shopifyButton', ["$state", "csConfig", "ShopifyService", "LocationService", "ModalService", "AnalyticsService", "$location", "DiscountService", function($state, csConfig, ShopifyService, LocationService, ModalService, AnalyticsService, $location, DiscountService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'shopifyButton',
    controller: function() {
      this.discountCode = DiscountService.discountCode;
      this.discount = DiscountService.discount;
      this.isInUS = function() {
        return LocationService.isInUS();
      };
      this.isJoule = (function(_this) {
        return function() {
          return _this.sku === 'cs10001';
        };
      })(this);
      this.currentUser = $state.currentUser;
      if (this.sku) {
        this.variant = ShopifyService.variantForSku(this.sku);
        if (this.variant) {
          if (this.discount && this.discount.valid) {
            this.url = csConfig.shopifyEndpoint + "/cart/" + this.variant.id + ":1?discount=" + this.discount.code;
          } else if (this.discountCode) {
            this.url = csConfig.shopifyEndpoint + "/cart/" + this.variant.id + ":1?discount=" + this.discountCode;
          } else if (this.currentUser) {
            this.url = csConfig.chefstepsEndpoint + "/api/v0/shopping/users/add_to_cart?variant_id=" + this.variant.id;
          } else {
            this.url = csConfig.shopifyEndpoint + "/cart/add?id=" + this.variant.id;
          }
          switch (this.sku) {
            case 'cs10001':
              if (this.isInUS()) {
                this.showInternational = false;
                this.buttonPrice = this.variant.price;
              } else {
                this.showInternational = true;
                this.openInternationalJoule = function() {
                  return ModalService.open('internationalJoule', {
                    type: 'normal',
                    sku: this.sku,
                    user: this.currentUser,
                    checkoutUrl: this.url,
                    outOfStock: this.variant.inventory_quantity <= 0
                  });
                };
              }
              break;
            default:
              this.buttonPrice = this.variant.price;
          }
        } else {
          Rollbar.error("ShopifyButton - @variant not set for button at url: " + $state.current.url);
        }
      }
      this.openJouleWaitlist = function() {
        AnalyticsService.track('Joule Waitlist Modal Opened');
        return ModalService.open('jouleWaitlist');
      };
      this.showOutOfStock = (function(_this) {
        return function() {
          if (!_this.variant) {
            return false;
          }
          if (_this.variant.inventory_quantity > 0) {
            return false;
          }
          if (_this.showInternational) {
            return false;
          }
          if (_this.allowOutOfStockPurchase()) {
            return false;
          }
          return _this.showQuantity || _this.isJoule();
        };
      })(this);
      this.allowOutOfStockPurchase = (function(_this) {
        return function() {
          var ref;
          return (ref = _this.discount) != null ? ref.valid : void 0;
        };
      })(this);
      this.showDiscountMessage = (function(_this) {
        return function() {
          var ref, ref1, ref2;
          if (_this.discount) {
            return (ref = ((ref1 = _this.discount) != null ? ref1.valid : void 0) && ((ref2 = _this.discount) != null ? ref2.code : void 0) !== 'allowOutOfStockPurchase') != null ? ref : {
              "true": false
            };
          }
        };
      })(this);
      return this;
    },
    bindToController: {
      title: '=',
      theme: '=',
      sku: '=',
      showPrice: '=',
      showQuantity: '='
    },
    templateUrl: "/assets/templates/components/customButton/shopifyButton/shopifyButton.html"
  };
}]);




this.app.directive('shopifyButtonForm', ["ShopifyService", function(ShopifyService) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'shopifyButtonForm',
    controller: function() {
      this.productOptions = ShopifyService.products;
      return this;
    },
    bindToController: {
      content: '='
    },
    templateUrl: "/assets/templates/components/customButton/shopifyButton/shopifyButtonForm.html"
  };
}]);




this.app.directive('signupButton', ["ModalService", "$state", function(ModalService, $state) {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'signupButton',
    controller: function() {
      this.currentUser = $state.currentUser;
      this.handleClick = function() {
        return ModalService.open('signup', {
          source: 'customButton signupButton'
        });
      };
      return this;
    },
    bindToController: {
      signedInTitle: '=',
      signedOutTitle: '=',
      theme: '='
    },
    templateUrl: "/assets/templates/components/customButton/signupButton/signupButton.html"
  };
}]);




this.app.directive('signupButtonForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'signupButtonForm',
      controller: function() {},
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/customButton/signupButton/signupButtonForm.html"
    };
  }
]);




this.app.directive('standardButton', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'standardButton',
      controller: function() {},
      bindToController: {
        title: '=',
        url: '=',
        theme: '='
      },
      templateUrl: "/assets/templates/components/customButton/standardButton/standardButton.html"
    };
  }
]);




this.app.directive('standardButtonForm', [
  function() {
    return {
      restrict: 'E',
      scope: {},
      controllerAs: 'standardButtonForm',
      controller: function() {},
      bindToController: {
        content: '='
      },
      templateUrl: "/assets/templates/components/customButton/standardButton/standardButtonForm.html"
    };
  }
]);









this.app.directive('matrixItem', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.itemType = this.itemType || 'Media';
      this.track = (function(_this) {
        return function() {
          return AnalyticsService.track('Component Item Clicked', {
            type: _this.itemType,
            title: _this.content.title,
            buttonMessage: _this.content.buttonMessage,
            url: _this.content.url,
            source: _this.source
          });
        };
      })(this);
      this.onHover = (function(_this) {
        return function() {
          return _this.hover = !_this.hover;
        };
      })(this);
      return this;
    },
    controllerAs: 'matrixItem',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItem.html",
    bindToController: {
      itemType: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      itemNumber: '=',
      loadImageOnEnterViewport: '=',
      source: '@',
      content: '='
    }
  };
}]);




this.app.directive('matrixItemForm', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      return this;
    },
    controllerAs: 'matrixItemForm',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemForm.html",
    bindToController: {
      content: '=',
      itemType: '='
    }
  };
}]);




this.app.service('matrixItemService', function() {
  this.isRecipe = function(activityType) {
    return (activityType != null ? activityType.indexOf('Technique') : void 0) === -1 && (activityType != null ? activityType.indexOf('Recipe') : void 0) > -1;
  };
  return this;
});




this.app.directive('pageNavJoule', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'pageNavJoule',
    controller: function() {
      return this;
    },
    link: function(scope, element, attrs) {},
    bindToController: {
      theme: '=',
      content: '='
    },
    templateUrl: "/assets/templates/components/pageNav/pageNavJoule/pageNavJoule.html"
  };
});




this.app.directive('csComments', ["$compile", "$rootScope", "csBloomManager", function($compile, $rootScope, csBloomManager) {
  return {
    restrict: 'E',
    scope: {
      commentsType: '@',
      commentsId: '@',
      discussionId: '@',
      seoBot: '='
    },
    controller: ["$scope", "$http", "$sce", function($scope, $http, $sce) {
      $scope.renderSeoComments = function() {
        var identifier;
        $scope.seoComments = [];
        identifier = $scope.commentsType + '_' + $scope.commentsId;
        return csBloomManager.loadBloom().then(function() {
          return $http.get(csConfig.bloomApiEndpoint + "/discussions/" + identifier + "?apiKey=xchefsteps").then(function(response) {
            var comments;
            comments = response.data.comments;
            return angular.forEach(comments, function(comment) {
              return $scope.seoComments.push($sce.trustAsHtml(comment.content));
            });
          });
        });
      };
      return $scope.openLogin = function() {
        $scope.$emit('openLoginModal');
        return $rootScope.$safeApply();
      };
    }],
    link: function(scope, element, attrs) {
      var installComments;
      installComments = function(discussionId) {
        var iframe;
        if (scope.seoBot === true) {
          return scope.renderSeoComments();
        } else {
          iframe = element[0].getElementsByTagName('iframe');
          if (iframe.length > 0) {
            angular.forEach(iframe, function(frame) {
              return frame.remove();
            });
          }
          return csBloomManager.loadBloom().then(function() {
            return Bloom.installComments({
              el: element[0],
              discussionId: discussionId,
              on: {
                login: function() {
                  return scope.openLogin();
                }
              }
            });
          });
        }
      };
      scope.$watch('commentsId', function(newValue, oldValue) {
        var identifier;
        if (newValue) {
          identifier = scope.commentsType + '_' + scope.commentsId;
          return installComments(identifier);
        }
      });
      scope.$watch('discussionId', function(newValue, oldValue) {
        if (newValue) {
          return installComments(scope.discussionId);
        }
      });
      return $rootScope.$on('reloadComments', function(event) {
        return window.location.reload();
      });
    },
    template: "<div class='seo-comment' ng-repeat='c in seoComments' ng-bind-html='c'></div>"
  };
}]);




this.app.directive('csEmbedNative', ["$sce", function($sce) {
  return {
    restrict: 'E',
    replace: false,
    scope: {},
    bindToController: {
      videoSources: '=',
      adjustHeight: '@',
      loop: '=',
      autoplay: '@',
      controls: '@',
      mute: '@',
      playVideo: '='
    },
    controllerAs: 'csEmbedNative',
    controller: ["$scope", function($scope) {
      this.trustedVideoUrl = function(source) {
        return $sce.trustAsResourceUrl(source);
      };
      return this;
    }],
    link: function(scope, element, attrs) {
      var videoElement;
      videoElement = element.find('video');
      videoElement.bind('loadeddata', function() {
        return scope.$emit('videoReady');
      });
      videoElement.bind('ended', function() {
        return scope.$emit('videoEnded');
      });
      scope.$watch('csEmbedNative.playVideo', function(newValue) {
        var ref, ref1;
        if (newValue) {
          return (ref = videoElement[0]) != null ? typeof ref.play === "function" ? ref.play() : void 0 : void 0;
        } else {
          return (ref1 = videoElement[0]) != null ? typeof ref1.pause === "function" ? ref1.pause() : void 0 : void 0;
        }
      });
      return scope.$watch('csEmbedNative.loop', function(loopVideo) {
        var ref;
        return (ref = videoElement[0]) != null ? ref.loop = loopVideo : void 0;
      });
    },
    templateUrl: "/assets/templates/directives/csEmbedVideo/csEmbedNative/csEmbedNative.html"
  };
}]);




this.app.directive('csEmbedVimeo', ["$timeout", function($timeout) {
  return {
    restrict: 'E',
    scope: {},
    bindToController: {
      vimeoId: '@',
      autoplay: '@',
      loop: '@',
      playVideo: '='
    },
    controllerAs: 'csEmbedVimeo',
    link: function(scope, element) {
      var createPlayer;
      createPlayer = (function(_this) {
        return function() {
          var iframe;
          if (typeof $f !== "undefined" && $f !== null) {
            _this.playerId = "VIMEO" + Date.now();
            iframe = $(element).find('.video-iframe iframe')[0];
            $(iframe).attr('id', _this.playerId);
            return _this.player = $f(iframe);
          } else {
            return $timeout(createPlayer, 500);
          }
        };
      })(this);
      return createPlayer();
    },
    controller: ["$scope", function($scope) {
      var handlePlayVideoClicked;
      this.id = this.vimeoId;
      this.loop = this.loop || 0;
      handlePlayVideoClicked = function(e, isVideoPlaying) {
        return this.player.api(isVideoPlaying ? 'pause' : 'play');
      };
      $scope.$on('playVideoClicked', handlePlayVideoClicked);
      return this;
    }],
    templateUrl: "/assets/templates/directives/csEmbedVideo/csEmbedVimeo/csEmbedVimeo.html"
  };
}]);




this.app.directive('csEmbedYoutube', function() {
  return {
    restrict: 'E',
    replace: false,
    scope: {},
    bindToController: {
      youtubeId: '@',
      adjustHeight: '@',
      loop: '@',
      autoplay: '@',
      controls: '@',
      mute: '@',
      playVideo: '='
    },
    controllerAs: 'csEmbedYoutube',
    controller: ["$scope", "$element", "$attrs", "$timeout", function($scope, $element, $attrs, $timeout) {
      var adjustHeight, createPlayer, getWidth, handlePlayVideoClicked, player, playerId;
      player = null;
      playerId = "YT" + Date.now();
      $($element).find('.video-iframe').attr('id', playerId);
      createPlayer = (function(_this) {
        return function() {
          if (window.youtubeAPIReady && $attrs.youtubeId) {
            return player = new YT.Player(playerId, {
              videoId: _this.youtubeId,
              playerVars: {
                'wmode': 'opaque',
                'modestbranding': 1,
                'rel': 0,
                'showinfo': 0,
                'width': 1466,
                'iv_load_policy': 3,
                'autoplay': _this.autoplay || 1,
                'loop': _this.loop || 0,
                'playsinline': 0,
                'playlist': _this.youtubeId,
                'controls': _this.controls || 1
              },
              events: {
                'onReady': function(event) {
                  if (typeof player.setPlaybackQuality === "function") {
                    player.setPlaybackQuality('hd1080');
                  }
                  $scope.$emit('videoReady');
                  if (_this.mute === 'true') {
                    player.mute();
                  }
                  return $scope.$watch('csEmbedYoutube.playVideo', function(playVideo) {
                    if (typeof playVideo !== 'undefined') {
                      if (playVideo) {
                        return player != null ? typeof player.playVideo === "function" ? player.playVideo() : void 0 : void 0;
                      } else {
                        return player != null ? typeof player.pauseVideo === "function" ? player.pauseVideo() : void 0 : void 0;
                      }
                    }
                  });
                }
              }
            });
          } else {
            return $timeout((function() {
              return createPlayer();
            }), 500);
          }
        };
      })(this);
      createPlayer();
      handlePlayVideoClicked = function(e, isVideoPlaying) {
        console.log('videoplayerclickes');
        if (isVideoPlaying) {
          if (!/(iPad|iPhone|iPod)/g.test(navigator.userAgent)) {
            if (player != null) {
              if (typeof player.pauseVideo === "function") {
                player.pauseVideo();
              }
            }
          }
        } else {
          if (player != null) {
            if (typeof player.playVideo === "function") {
              player.playVideo();
            }
          }
        }
        return $timeout((function() {
          return adjustHeight(1);
        }), 1000);
      };
      $attrs.$observe('videoId', function() {
        if ((player != null) && (player.loadVideoById != null)) {
          return player != null ? typeof player.cueVideoById === "function" ? player.cueVideoById($attrs.youtubeId, 0, 'hd1080') : void 0 : void 0;
        }
      });
      adjustHeight = (function(_this) {
        return function() {
          var newHeight;
          if (_this.adjustHeight !== 'false') {
            newHeight = Math.round(getWidth() * ($attrs.aspectRatio || (9.0 / 16.0)));
            return $($element).find('iframe').height(newHeight);
          }
        };
      })(this);
      getWidth = function() {
        return $($element).find('iframe').width();
      };
      $scope.$watch(getWidth, (function() {
        return adjustHeight();
      }), true);
      $scope.$on('playVideoClicked', handlePlayVideoClicked);
      return this;
    }],
    templateUrl: "/assets/templates/directives/csEmbedVideo/csEmbedYoutube/csEmbedYoutube.html"
  };
});




this.app.directive('csIngredient', ["$timeout", "csQuantityService", function($timeout, csQuantityService) {
  return {
    restrict: 'E',
    scope: {},
    bindToController: {
      ingredient: '=',
      ingredients: '=',
      unit: '=',
      isScalingMode: '=',
      containerData: '=',
      trustUnsanitized: '='
    },
    controllerAs: 'csIngredient',
    controller: ["$scope", function($scope) {
      var checkValidity, commitQuantity, getFocusTarget, getRescaleFactor;
      this.isFocused = false;
      this.isInvalid = false;
      this.isFirstIngredient = false;
      getFocusTarget = function(quantity, unit) {
        if (!quantity.hasMass) {
          return 'massless';
        } else {
          if (unit === 'metric') {
            if (quantity.g > 0) {
              return 'g';
            } else if (quantity.kg > 0) {
              return 'kg';
            }
          }
          if (unit === 'imperial') {
            if (quantity.oz > 0) {
              return 'oz';
            } else if (quantity.lb > 0) {
              return 'lb';
            }
          }
        }
      };
      $scope.$on('focusOnCsIngredient', (function(_this) {
        return function() {
          if (_this.isFirstIngredient) {
            return $timeout((function() {
              return $scope.$broadcast(getFocusTarget(_this.localQuantity, _this.unit));
            }), 100);
          }
        };
      })(this));
      $scope.$watch(((function(_this) {
        return function() {
          return _this.ingredient;
        };
      })(this)), (function(_this) {
        return function() {
          return _this.isFirstIngredient = _this.ingredients.indexOf(_this.ingredient) === 0;
        };
      })(this));
      $scope.$watch(((function(_this) {
        return function() {
          return _this.ingredient.quantity;
        };
      })(this)), (function(_this) {
        return function() {
          _this.localQuantity = _.clone(_this.ingredient.quantity);
          _this.isInvalid = false;
          if (_this.ingredient.quantity.unit === 'a/n') {
            _this.isAsNeeded = true;
          }
          if (_this.ingredient.quantity.unit === 'recipe' && _this.ingredient.quantity.massless > 1) {
            return _this.ingredient.quantity.unit = 'recipes';
          }
        };
      })(this));
      this.handleBlur = (function(_this) {
        return function(unit) {
          commitQuantity(unit);
          return _this.isFocused = false;
        };
      })(this);
      this.handleFocus = (function(_this) {
        return function() {
          return _this.isFocused = true;
        };
      })(this);
      this.handleEnter = function(unit) {
        return commitQuantity(unit);
      };
      this.handleChange = function(unit) {
        return this.isInvalid = !checkValidity(unit);
      };
      getRescaleFactor = (function(_this) {
        return function(unit) {
          return csQuantityService.getRescaleFactor(_this.localQuantity, _this.ingredient.origQuantity, unit);
        };
      })(this);
      checkValidity = function(unit) {
        var factor;
        factor = getRescaleFactor(unit);
        return _.isFinite(factor) && factor > 0 && factor < 1000;
      };
      commitQuantity = (function(_this) {
        return function(unit) {
          if (checkValidity(unit)) {
            return $scope.$emit('rescaleIngredients', getRescaleFactor(unit));
          } else {
            return _this.isInvalid = true;
          }
        };
      })(this);
      return this;
    }],
    templateUrl: "/assets/templates/directives/ingredients/csIngredient/csIngredient.html"
  };
}]);




this.app.directive('csIngredientLink', function() {
  return {
    restrict: 'A',
    scope: {},
    bindToController: {
      ingredient: '='
    },
    controllerAs: 'csIngredientLink',
    controller: ["$element", "$scope", function($element, $scope) {
      $element.on('click', (function(_this) {
        return function(event) {
          event.preventDefault();
          return $scope.$emit('showNellPopup', {
            type: 'ingredient',
            data: _this.ingredient
          });
        };
      })(this));
      return this;
    }]
  };
});




this.app.directive('csIngredients', function() {
  return {
    restrict: 'E',
    scope: {},
    bindToController: {
      ingredients: '=',
      unit: '=',
      isScalingMode: '=',
      canRecieveFocusFromScaler: '=',
      containerData: '=',
      trustUnsanitized: '='
    },
    controllerAs: 'csIngredients',
    controller: ["$scope", function($scope) {
      return $scope.$on('focusOnCsIngredients', (function(_this) {
        return function() {
          if (_this.canRecieveFocusFromScaler) {
            return $scope.$broadcast('focusOnCsIngredient');
          }
        };
      })(this));
    }],
    templateUrl: "/assets/templates/directives/ingredients/csIngredients/csIngredients.html"
  };
});




this.app.directive('csIngredientsScaler', function() {
  return {
    restrict: 'E',
    scope: {},
    bindToController: {
      rescaleFactor: '=',
      unit: '=',
      isScalingMode: '='
    },
    controllerAs: 'csIngredientsScaler',
    controller: ["$scope", function($scope) {
      $scope.$watch(((function(_this) {
        return function() {
          return _this.rescaleFactor;
        };
      })(this)), (function(_this) {
        return function() {
          var values;
          if (_.includes([0.5, 1, 2, 4], _this.rescaleFactor)) {
            return _this.scaleButtonValues = [0.5, 1, 2, 4];
          } else {
            values = [0.5, 1, 2];
            values.push(_this.rescaleFactor);
            values.sort(function(a, b) {
              return a - b;
            });
            return _this.scaleButtonValues = values;
          }
        };
      })(this));
      this.handleClickScaleButton = function() {
        return $scope.$emit('toggleScalingMode');
      };
      this.handleClickMultiplierButton = function(factor) {
        return $scope.$emit('rescaleIngredients', factor);
      };
      this.handleClickUnitButton = function(unit) {
        return $scope.$emit('setUnit', unit);
      };
      return this;
    }],
    templateUrl: "/assets/templates/directives/ingredients/csIngredientsScaler/csIngredientsScaler.html"
  };
});




this.app.directive('csNellBackdrop', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'csNellBackdrop',
    bindToController: {
      'isActive': '='
    },
    controller: ["$scope", function($scope) {
      this.handleClick = function() {
        return $scope.$emit('hideNellPopup');
      };
      return this;
    }],
    template: "<div ng-show='csNellBackdrop.isActive' class='nell-backdrop' ng-click='csNellBackdrop.handleClick()'></div>"
  };
});




this.app.directive('csNellPopup', function() {
  return {
    restrict: 'E',
    scope: {},
    bindToController: {
      'isActive': '=',
      'content': '=',
      'createdByAdmin': '='
    },
    controllerAs: 'csNellPopup',
    controller: ["$scope", "$http", "ActivityService", function($scope, $http, ActivityService) {
      var getIngredient, getRecipe;
      this.handleClickClose = function() {
        return $scope.$emit('hideNellPopup');
      };
      getRecipe = (function(_this) {
        return function(slug) {
          var activityRequest;
          activityRequest = ActivityService.get({
            id: slug
          });
          return activityRequest.$promise.then(function(res) {
            _this.description = res.description;
            _this.imageUrl = res.image;
            _this.title = res.title;
            _this.heading = 'CHEFSTEPS RECIPE';
            _this.primaryButtonText = 'See the Recipe';
            _this.linkUrl = res.url;
            return _this.isLoaded = true;
          });
        };
      })(this);
      getIngredient = (function(_this) {
        return function(id) {
          var url;
          url = csConfig.chefstepsEndpoint + "/api/v0/ingredients/" + id;
          return $http.get(url).then(function(res) {
            var ref;
            _this.description = (ref = res.data.textFields) != null ? ref.description : void 0;
            _this.imageUrl = res.data.image;
            _this.title = res.data.title;
            _this.linkUrl = res.data.url;
            _this.productUrl = res.data.productUrl;
            _this.heading = 'CHEFSTEPS INGREDIENT WIKI';
            _this.primaryButtonText = 'Learn More';
            return _this.isLoaded = true;
          });
        };
      })(this);
      $scope.$watch(((function(_this) {
        return function() {
          return _this.content;
        };
      })(this)), (function(_this) {
        return function() {
          var ref, ref1;
          _this.isLoaded = false;
          _this.imageUrl = null;
          _this.title = null;
          _this.description = null;
          if (((ref = _this.content) != null ? ref.type : void 0) === 'ingredient') {
            if (((ref1 = _this.content.data.quantity) != null ? ref1.unit : void 0) === 'recipe' || _this.content.data.subActivity) {
              return getRecipe(_.last(_this.content.data.url.split('/')));
            } else {
              return getIngredient(_this.content.data.id);
            }
          }
        };
      })(this));
      return this;
    }],
    templateUrl: "/assets/templates/directives/nell/csNellPopup/csNellPopup.html"
  };
});




this.app.directive('csFetchActivityShortcode', function() {
  return {
    restrict: 'E',
    scope: {},
    controllerAs: 'csFetchActivityShortcode',
    bindToController: {
      'slug': '@'
    },
    controller: ["ActivityService", "$state", "$element", function(ActivityService, $state, $element) {
      var activityRequest;
      $element.parent().addClass('has-recipe-card');
      this.isLoaded = false;
      activityRequest = ActivityService.get({
        id: this.slug
      });
      activityRequest.$promise.then((function(_this) {
        return function(result) {
          _this.result = result;
          return _this.isLoaded = true;
        };
      })(this));
      return this;
    }],
    templateUrl: "/assets/templates/directives/shortcodeOutputs/csFetchActivityShortcode/csFetchActivityShortcode.html"
  };
});




this.app.directive('csQuantityShortcode', ["csQuantityService", function(csQuantityService) {
  return {
    restrict: 'A',
    scope: {},
    bindToController: {
      unit: '@',
      quantity: '@',
      displayUnit: '=',
      rescaleFactor: '='
    },
    controllerAs: 'csQuantityShortcode',
    controller: ["$scope", function($scope) {
      var scalableQuantity, updateOutput;
      this.output = '';
      scalableQuantity = csQuantityService.toScalableQuantity(this.quantity, this.unit);
      updateOutput = (function(_this) {
        return function() {
          var quantity;
          quantity = csQuantityService.scaleQuantity(scalableQuantity, _this.rescaleFactor);
          if (quantity.hasMass) {
            if (_this.displayUnit === 'metric') {
              if (quantity.g > 0) {
                return _this.output = quantity.g + " g";
              } else if (quantity.kg > 0) {
                return _this.output = quantity.kg + " kg";
              }
            } else if (_this.displayUnit === 'imperial') {
              if (quantity.lb > 0 && quantity.oz > 0) {
                return _this.output = quantity.lb + " lb " + quantity.oz + " oz";
              } else if (quantity.lb > 0) {
                return _this.output = quantity.lb + " lb";
              } else if (quantity.oz > 0) {
                return _this.output = quantity.oz + " oz";
              }
            }
          } else {
            _this.output = "" + quantity.massless;
            if (quantity.unit !== 'ea') {
              return _this.output = _this.output + (" " + quantity.unit);
            }
          }
        };
      })(this);
      $scope.$watch(((function(_this) {
        return function() {
          return _this.displayUnit;
        };
      })(this)), updateOutput);
      $scope.$watch(((function(_this) {
        return function() {
          return _this.rescaleFactor;
        };
      })(this)), updateOutput);
      return this;
    }],
    template: "{{csQuantityShortcode.output}}"
  };
}]);




this.app.directive('facebookAuthButton', ["ModalService", "AnalyticsService", "$state", "$location", "authenticationService", "$http", "$rootScope", "csAdwords", "csFacebookConversion", "formHelper", "localStorageService", "csConfig", "ssoService", function(ModalService, AnalyticsService, $state, $location, authenticationService, $http, $rootScope, csAdwords, csFacebookConversion, formHelper, localStorageService, csConfig, ssoService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.facebook = (function(_this) {
        return function() {
          var facebookResponse, loginError, loginSuccess;
          _this.showSpinner = true;
          loginSuccess = function(response) {
            var properties;
            _this.showSpinner = false;
            if (_this.sso) {
              _this.state = $location.search().state;
              return ssoService.signAndRedirect(_this.state);
            } else {
              if (response.newUser) {
                csAdwords.track(998032928, '77TfCIjjrAgQoIzz2wM');
                csFacebookConversion.track(6014798030226, 0.00);
                properties = {
                  source: 'modal',
                  method: 'facebook'
                };
                AnalyticsService.reidentify();
                AnalyticsService.track('Signed Up JS', properties);
                AnalyticsService.track('Complete', {
                  category: 'Sign Up'
                });
              }
              if (_this.ftue && response.newUser) {
                return ModalService.resolveSuccess('ftue');
              } else {
                return ModalService.resolveSuccess();
              }
            }
          };
          loginError = function(error) {
            _this.showSpinner = false;
            if (error.message === 'User cancelled login or did not fully authorize.') {
              return _this.errorMessage = "Please try again. Click 'okay' to allow ChefSteps to sign in with Facebook";
            }
          };
          facebookResponse = window.facebookResponse;
          return authenticationService.loginWithFacebook(facebookResponse).then(loginSuccess, loginError);
        };
      })(this);
      return this;
    }],
    controllerAs: 'facebookAuthButton',
    bindToController: {
      sso: '=',
      ftue: '='
    },
    templateUrl: "/assets/templates/directives/ssoForm/facebookAuthButton/facebookAuthButton.html"
  };
}]);




this.app.directive('loginForm', ["ModalService", "AnalyticsService", "$state", "$location", "authenticationService", "$http", "$rootScope", "csAdwords", "csFacebookConversion", "formHelper", "localStorageService", "csConfig", "ssoService", function(ModalService, AnalyticsService, $state, $location, authenticationService, $http, $rootScope, csAdwords, csFacebookConversion, formHelper, localStorageService, csConfig, ssoService) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.params = ModalService.params();
      this.showErrorFor = (function(_this) {
        return function(fieldName, validationParam) {
          return formHelper.showErrorFor(_this.form, fieldName, validationParam);
        };
      })(this);
      this.close = function() {
        return ModalService.reject();
      };
      this.submit = (function(_this) {
        return function() {
          var loginError, loginSuccess;
          loginSuccess = function() {
            var properties;
            _this.showSpinner = false;
            properties = ModalService.modal.params;
            AnalyticsService.reidentify();
            AnalyticsService.track('Logged In JS', properties);
            if (_this.sso) {
              _this.state = $location.search().state;
              return ssoService.signAndRedirect(_this.state).then((function(response) {}), function(error) {
                return _this.errorMessage = error;
              });
            } else {
              ModalService.resolveSuccess();
              return window.location.reload();
            }
          };
          loginError = function() {
            _this.errorMessage = 'We were unable to match the email and password you provided. Please check your entries and try again.';
            return _this.showSpinner = false;
          };
          if (_this.form.$valid) {
            _this.showSpinner = true;
            return authenticationService.loginWithEmail(_this.form.email.$modelValue, _this.form.password.$modelValue).then(loginSuccess, loginError);
          }
        };
      })(this);
      this.signup = function() {
        return ModalService.open('signup', ModalService.modal.params);
      };
      this.recover = function() {
        return ModalService.open('recover');
      };
      return this;
    }],
    controllerAs: 'login',
    bindToController: {
      sso: '='
    },
    templateUrl: "/assets/templates/directives/ssoForm/loginForm/loginForm.html"
  };
}]);




this.app.directive('signupForm', ["ModalService", "AnalyticsService", "$state", "authenticationService", "csAdwords", "csFacebookConversion", "formHelper", "LocationService", "ssoService", "$location", function(ModalService, AnalyticsService, $state, authenticationService, csAdwords, csFacebookConversion, formHelper, LocationService, ssoService, $location) {
  return {
    restrict: 'E',
    scope: {},
    controller: ["$scope", function($scope) {
      this.params = ModalService.params();
      LocationService.loadData();
      this.showErrorFor = (function(_this) {
        return function(fieldName, validationParam) {
          return formHelper.showErrorFor(_this.form, fieldName, validationParam);
        };
      })(this);
      this.close = function() {
        return ModalService.reject();
      };
      this.track = (function(_this) {
        return function(extraProperties) {
          var properties;
          csAdwords.track(998032928, '77TfCIjjrAgQoIzz2wM');
          csFacebookConversion.track(6014798030226, 0.00);
          AnalyticsService.reidentify(true);
          if (_this.sso) {
            properties = extraProperties;
          } else {
            properties = angular.extend(ModalService.modal.params, extraProperties);
          }
          AnalyticsService.track('Signed Up JS', properties);
          return AnalyticsService.track('Complete', {
            category: 'Sign Up'
          });
        };
      })(this);
      this.submit = (function(_this) {
        return function() {
          var ref, registrationError, registrationSuccess;
          registrationSuccess = function() {
            _this.track({
              method: 'standard'
            });
            _this.showSuccess = true;
            _this.showSpinner = false;
            if (_this.sso) {
              _this.state = $location.search().state;
              return ssoService.signAndRedirect(_this.state).then((function(response) {}), function(error) {
                return _this.errorMessage = error;
              });
            } else {
              return ModalService.ftueIfFromNav();
            }
          };
          registrationError = function(response) {
            _this.errorMessage = 'This email is already registered. Want to login or recover your password?';
            return _this.showSpinner = false;
          };
          if (_this.form.$valid) {
            _this.showSpinner = true;
            return authenticationService.registerWithEmail(_this.form.name.$modelValue, _this.form.email.$modelValue, _this.form.password.$modelValue, ((ref = _this.form.optout) != null ? ref.$modelValue : void 0) || false).then(registrationSuccess, registrationError);
          }
        };
      })(this);
      this.login = function() {
        return ModalService.open('login', ModalService.modal.params);
      };
      this.terms = function() {
        return ModalService.open('terms');
      };
      this.isInUS = function() {
        return LocationService.isInUS();
      };
      return this;
    }],
    controllerAs: 'signup',
    bindToController: {
      sso: '=',
      ftue: '='
    },
    templateUrl: "/assets/templates/directives/ssoForm/signupForm/signupForm.html"
  };
}]);




this.app.directive('csStep', function() {
  return {
    restrict: 'E',
    replace: true,
    scope: {},
    bindToController: {
      step: '=',
      stepNumber: '=',
      unit: '=',
      createdByAdmin: '=',
      rescaleFactor: '='
    },
    controllerAs: 'csStep',
    controller: ["$scope", "$http", function($scope, $http) {
      var hasImage, isImageOnly, isRecipeCardOnly;
      this.isAsideExpanded = false;
      this.toggleAsideExpanded = (function(_this) {
        return function() {
          return _this.isAsideExpanded = !_this.isAsideExpanded;
        };
      })(this);
      isImageOnly = (function(_this) {
        return function() {
          return !_this.step.directions && !_this.step.title && !_this.stepNumber && !!_this.step.image;
        };
      })(this);
      hasImage = (function(_this) {
        return function() {
          return !!_this.step.image;
        };
      })(this);
      isRecipeCardOnly = (function(_this) {
        return function() {
          var re, ref, ref1;
          re = /\[fetch(\w+)\s+([^\]]*)\]/;
          return ((ref = _this.step.directions) != null ? (ref1 = ref.match(re)) != null ? ref1[0] : void 0 : void 0) === _this.step.directions;
        };
      })(this);
      this.getClasses = function() {
        return {
          'aside': this.step.isAside,
          'aside-expanded': this.isAsideExpanded,
          'no-print': this.step.isAside,
          'theme-gray': this.step.isAside,
          'theme-light': !this.step.isAside,
          'step-image-only': isImageOnly(),
          'has-step-image': hasImage(),
          'step-recipe-card-only': isRecipeCardOnly()
        };
      };
      return this;
    }],
    templateUrl: "/assets/templates/directives/steps/csStep/csStep.html"
  };
});




this.app.directive('csSteps', function() {
  return {
    restrict: 'E',
    scope: {},
    bindToController: {
      steps: '=',
      unit: '=',
      createdByAdmin: '=',
      rescaleFactor: '='
    },
    controllerAs: 'csSteps',
    controller: ["$scope", function($scope) {
      $scope.$watch(((function(_this) {
        return function() {
          return _this.steps;
        };
      })(this)), (function(_this) {
        return function() {
          return _this.stepNumbers = _.map(_this.steps, function(step, index, steps) {
            var prevStepsWithNumbers;
            if (step.hideNumber) {
              return 0;
            } else {
              prevStepsWithNumbers = _.filter(steps.slice(0, index), function(step) {
                return !step.hideNumber;
              });
              return prevStepsWithNumbers.length + 1;
            }
          });
        };
      })(this));
      return this;
    }],
    templateUrl: "/assets/templates/directives/steps/csSteps/csSteps.html"
  };
});




this.app.controller('JouleAppGuidesController', ["$element", "responsiveService", function($element, responsiveService) {
  var guideWidth, guidesCount, guidesElement;
  this.guides = [
    {
      image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/oGfsQINQtK3X11lNPU7Z',
      description: "What's for dinner?"
    }, {
      image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/TbjjdwN1Sluo5H0BAYil',
      description: "Pick the perfect meal."
    }, {
      image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/Sq1VQNezQn6lZ8d2HyBn',
      description: "Learn new techniques with step-by-step instructions from ChefSteps."
    }, {
      image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/D752zZxS4SVhFxKNeqtx',
      description: "How rare? How well done? How perfect."
    }, {
      image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/7eqCE1TZR5yNCbMliq4j',
      description: "Dial in that timer."
    }, {
      image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/7unI8yNXR56HVUKZUyoU',
      description: "Prep the rest of your meal and just sit back and relax."
    }, {
      image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/aCCb7DfSSpuqFutQDfJM',
      description: "We'll let you know when dinner's ready."
    }
  ];
  this.currentIndex = 0;
  if (responsiveService.isViewportLTE(500)) {
    guideWidth = 220;
  } else {
    guideWidth = 350;
  }
  guidesCount = this.guides.length;
  guidesElement = $($element).find('.joule-app-guides');
  this.prev = (function(_this) {
    return function() {
      if (_this.currentIndex > 0) {
        _this.currentIndex -= 1;
        guidesElement.css('transform', "translateX(-" + (_this.currentIndex * guideWidth) + "px)");
      }
    };
  })(this);
  this.next = function() {
    if (this.currentIndex < guidesCount - 1) {
      this.currentIndex += 1;
      guidesElement.css('transform', "translateX(-" + (this.currentIndex * guideWidth) + "px)");
    }
  };
  this.currentClass = (function(_this) {
    return function(index) {
      if (_this.currentIndex === index) {
        return 'active';
      }
    };
  })(this);
  this.firstItem = (function(_this) {
    return function() {
      if (_this.currentIndex === 0) {
        return 'hide-controls';
      }
    };
  })(this);
  this.lastItem = (function(_this) {
    return function() {
      if (_this.currentIndex === guidesCount - 1) {
        return 'hide-controls';
      }
    };
  })(this);
  return this;
}]);




this.app.controller('JouleAppMainHeroController', ["mobileDetectionService", "responsiveService", function(mobileDetectionService, responsiveService) {
  this.isMobileDevice = mobileDetectionService.isMobile;
  this.isViewportMobile = responsiveService.isViewportMobile();
  this.showDesktopImage = responsiveService.isViewportGT(500);
  this.youtubeId = '9D-Btpd0_rY';
  this.image = 'https://d3awvtnmmsvyot.cloudfront.net/api/file/3yRy3rarRsmzSl9DTZj7';
  this.mobileImage = 'https://d3awvtnmmsvyot.cloudfront.net/api/file/iZ5sj1ePQRCFMzbXtDFJ';
  return this;
}]);




this.app.controller('JouleCutawayController', ["$element", "$rootScope", "responsiveService", "$window", "mobileDetectionService", function($element, $rootScope, responsiveService, $window, mobileDetectionService) {
  this.isViewportMobile = responsiveService.isViewportMobile();
  this.isMobileDevice = mobileDetectionService.isMobile;
  this.responsiveWidth = responsiveService;
  angular.element($window).bind('resize', (function(_this) {
    return function() {
      _this.isViewportMobile = responsiveService.isViewportMobile();
      return $rootScope.$safeApply();
    };
  })(this));
  return this;
}]);




this.app.directive('jouleAppDemo', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    replace: true,
    scope: {},
    controllerAs: 'jouleAppDemo',
    bindToController: {
      videoPlaying: '='
    },
    controller: ["$scope", function($scope) {
      this.playEnabled = false;
      this.backgroundImage = 'https://d3awvtnmmsvyot.cloudfront.net/api/file/Biv95SWnQbSKJ8BMc8cK';
      this.videoA = {
        poster: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/60pEySmRSCKhIDsUapP9',
        mp4: 'https://d92f495ogyf88.cloudfront.net/static/wc1AbibpGkMij2n3ei2s/mcc2mbs.mp4'
      };
      this.videoB = {
        poster: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/iXGCIHGFQ2OjaInN9FXS',
        mp4: 'https://d92f495ogyf88.cloudfront.net/static/wc1AbibpGkMij2n3ei2s/jfc2mbs.mp4'
      };
      this.videoPlaying = 'B';
      this.playVideo = (function(_this) {
        return function(video) {
          return _this.videoPlaying = video;
        };
      })(this);
      this.buttonClass = (function(_this) {
        return function(video) {
          if (video === _this.videoPlaying) {
            return 'active';
          }
        };
      })(this);
      this.enablePlay = function() {
        return this.playEnabled = true;
      };
      this.disablePlay = function() {
        return this.playEnabled = false;
      };
      this.track = function() {
        return AnalyticsService.track('Joule App Demo Shown');
      };
      return this;
    }],
    link: function(scope, element, attrs) {},
    templateUrl: "/assets/templates/pages/joule/jouleAppDemo/jouleAppDemo.html"
  };
}]);




this.app.controller('JouleLandingLastHeroController', ["$element", "$rootScope", "LocationService", "responsiveService", "$window", "mobileDetectionService", "$state", "ShopifyService", function($element, $rootScope, LocationService, responsiveService, $window, mobileDetectionService, $state, ShopifyService) {
  var ref, ref1;
  console.log($state.currentUser);
  this.isInUS = LocationService.isInUS();
  this.currentUserPremium = (ref = $state.currentUser) != null ? ref.premium : void 0;
  this.currentUserUsedDiscount = (ref1 = $state.currentUser) != null ? ref1.used_circulator_discount : void 0;
  this.product = ShopifyService.variantForSku('cs10001');
  this.price = this.product.price;
  this.inStock = false;
  if (this.product.inventory_quantity > 0) {
    this.inStock = true;
  } else {
    this.inStock = false;
  }
  this.isViewportMobile = responsiveService.isViewportMobile();
  this.isMobileDevice = mobileDetectionService.isMobile;
  this.responsiveWidth = responsiveService;
  angular.element($window).bind('resize', (function(_this) {
    return function() {
      _this.isViewportMobile = responsiveService.isViewportMobile();
      return $rootScope.$safeApply();
    };
  })(this));
  return this;
}]);




this.app.controller('JouleLandingHeroController', ["$element", "$rootScope", "LocationService", "responsiveService", "$window", "mobileDetectionService", "MetadataService", "ShopifyService", function($element, $rootScope, LocationService, responsiveService, $window, mobileDetectionService, MetadataService, ShopifyService) {
  var canonical, description, image, title;
  this.content = {
    title: "Joule. Your Next Kitchen Essential.",
    image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/LHLAwBpQvGfv281fldum',
    mobileImage: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/ymSFiIwTQmqHYBTdK2Lk',
    youtubeId: 'QBjjIWMYH8s',
    international: {
      title: 'Joule.',
      subtitle: 'Perfect food. Every time.'
    }
  };
  this.theme = 'light';
  this.product = ShopifyService.variantForSku('cs10001');
  this.price = this.product.price;
  this.inStock = false;
  if (this.product.inventory_quantity > 0) {
    this.inStock = true;
  } else {
    this.inStock = false;
  }
  this.getAspect = function() {
    if (($element.children()[0].clientHeight / 9) > ($element.children()[0].clientWidth / 16)) {
      return 'portrait';
    }
    return 'landscape';
  };
  this.isVideoVisible = false;
  this.showVideo = (function(_this) {
    return function() {
      _this.isVideoVisible = true;
      return $rootScope.$broadcast('nav.hideNav', _this.isVideoVisible);
    };
  })(this);
  this.hideVideo = (function(_this) {
    return function() {
      _this.isVideoVisible = false;
      return $rootScope.$broadcast('nav.hideNav', _this.isVideoVisible);
    };
  })(this);
  this.handleEmbedVideoClicked = (function(_this) {
    return function() {
      return _this.hideVideo();
    };
  })(this);
  this.isInUS = LocationService.isInUS();
  this.isViewportMobile = responsiveService.isViewportMobile();
  this.isMobileDevice = mobileDetectionService.isMobile;
  this.responsiveWidth = responsiveService;
  angular.element($window).bind('resize', (function(_this) {
    return function() {
      _this.isViewportMobile = responsiveService.isViewportMobile();
      return $rootScope.$safeApply();
    };
  })(this));
  canonical = '/joule';
  title = 'Joule: Sous Vide by ChefSteps';
  description = 'Joule is the sous vide tool that changes everything. Controlled by a groundbreaking custom app, Joule is a sleek, powerful cooking tool that makes sous vide a real part of today’s kitchen.';
  image = 'https://d3awvtnmmsvyot.cloudfront.net/api/file/eP71dY8XQhx1vuvVFNxt';
  MetadataService.set({
    title: title,
    description: description,
    keywords: "joule, sous vide, chefsteps, circulator",
    canonical: canonical,
    image: image,
    sousVideTargeted: true,
    og: {
      url: canonical
    }
  });
  return this;
}]);




this.app.controller('JouleLandingSVController', ["$element", "$rootScope", "responsiveService", "$window", "mobileDetectionService", function($element, $rootScope, responsiveService, $window, mobileDetectionService) {
  this.content = {
    title: "What is sous vide?",
    description: "Sous vide is a simple cooking technique in which food is cooked in precisely controlled, low-temperature water. Because the food can never get hotter than the water, under- or overcooking is almost impossible.",
    image: 'https://d3awvtnmmsvyot.cloudfront.net/api/file/bHkbSdSO3UcbcV1CKgvN',
    youtubeId: 'QBjjIWMYH8s'
  };
  this.theme = 'light';
  this.getAspect = function() {
    if (($element.children()[0].clientHeight / 9) > ($element.children()[0].clientWidth / 16)) {
      return 'portrait';
    }
    return 'landscape';
  };
  this.isVideoVisible = false;
  this.showVideo = (function(_this) {
    return function() {
      _this.isVideoVisible = true;
      return $rootScope.$broadcast('nav.hideNav', _this.isVideoVisible);
    };
  })(this);
  this.hideVideo = (function(_this) {
    return function() {
      _this.isVideoVisible = false;
      return $rootScope.$broadcast('nav.hideNav', _this.isVideoVisible);
    };
  })(this);
  this.handleEmbedVideoClicked = (function(_this) {
    return function() {
      return _this.hideVideo();
    };
  })(this);
  this.isViewportMobile = responsiveService.isViewportMobile();
  this.isMobileDevice = mobileDetectionService.isMobile;
  this.responsiveWidth = responsiveService;
  angular.element($window).bind('resize', (function(_this) {
    return function() {
      _this.isViewportMobile = responsiveService.isViewportMobile();
      return $rootScope.$safeApply();
    };
  })(this));
  return this;
}]);




this.app.directive('matrixItemCard', ["matrixItemService", "mobileDetectionService", function(matrixItemService, mobileDetectionService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.isRecipe = matrixItemService.isRecipe;
      this.isMobile = mobileDetectionService.isMobile;
      return this;
    },
    controllerAs: 'matrixItemCard',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemCard/matrixItemCard.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      track: '&'
    }
  };
}]);




this.app.directive('matrixItemCardForm', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.setItem = function(selectedItem, currentItem) {
        console.log('setting item');
        return angular.forEach(currentItem.content, function(value, key) {
          if (selectedItem.hasOwnProperty(key)) {
            return currentItem.content[key] = selectedItem[key];
          }
        });
      };
      return this;
    },
    controllerAs: 'matrixItemCardForm',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemCard/matrixItemCardForm.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      source: '@'
    }
  };
}]);




this.app.directive('matrixItemCircle', function() {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      return this;
    },
    controllerAs: 'matrixItemCircle',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemCircle/matrixItemCircle.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      track: '&'
    }
  };
});




this.app.directive('matrixItemCircleForm', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.setItem = function(selectedItem, currentItem) {
        return angular.forEach(currentItem.content, function(value, key) {
          if (selectedItem.hasOwnProperty(key)) {
            return currentItem.content[key] = selectedItem[key];
          }
        });
      };
      return this;
    },
    controllerAs: 'matrixItemCircleForm',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemCircle/matrixItemCircleForm.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      source: '@'
    }
  };
}]);




this.app.directive('matrixItemIcon', ["matrixItemService", function(matrixItemService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.isRecipe = matrixItemService.isRecipe;
      return this;
    },
    controllerAs: 'matrixItemIcon',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemIcon/matrixItemIcon.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      track: '&'
    }
  };
}]);




this.app.directive('matrixItemIconForm', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.setItem = function(selectedItem, currentItem) {
        return angular.forEach(currentItem.content, function(value, key) {
          if (selectedItem.hasOwnProperty(key)) {
            return currentItem.content[key] = selectedItem[key];
          }
        });
      };
      return this;
    },
    controllerAs: 'matrixItemIconForm',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemIcon/matrixItemIconForm.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      source: '@'
    }
  };
}]);




this.app.directive('matrixItemList', ["matrixItemService", "$location", function(matrixItemService, $location) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.isRecipe = matrixItemService.isRecipe;
      this.urlMatches = function() {
        return $location.path() === this.content.url;
      };
      return this;
    },
    controllerAs: 'matrixItemList',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemList/matrixItemList.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      itemNumber: '=',
      loadImageOnEnterViewport: '=',
      track: '&'
    }
  };
}]);




this.app.directive('matrixItemListForm', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.setItem = function(selectedItem, currentItem) {
        console.log('setting item');
        return angular.forEach(currentItem.content, function(value, key) {
          if (selectedItem.hasOwnProperty(key)) {
            return currentItem.content[key] = selectedItem[key];
          }
        });
      };
      return this;
    },
    controllerAs: 'matrixItemListForm',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemList/matrixItemListForm.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      source: '@'
    }
  };
}]);




this.app.directive('matrixItemMedia', ["matrixItemService", function(matrixItemService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.isRecipe = matrixItemService.isRecipe;
      return this;
    },
    controllerAs: 'matrixItemMedia',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemMedia/matrixItemMedia.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      track: '&'
    }
  };
}]);




this.app.directive('matrixItemMediaForm', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.setItem = function(selectedItem, currentItem) {
        return angular.forEach(currentItem.content, function(value, key) {
          if (selectedItem.hasOwnProperty(key)) {
            return currentItem.content[key] = selectedItem[key];
          }
        });
      };
      return this;
    },
    controllerAs: 'matrixItemMediaForm',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemMedia/matrixItemMediaForm.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      source: '@'
    }
  };
}]);




this.app.directive('matrixItemPopup', ["ModalService", function(ModalService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.openPopup = function() {
        var data;
        data = {
          title: this.content.title,
          description: this.content.description,
          image: this.content.image
        };
        return ModalService.open('content', {
          content: data
        });
      };
      return this;
    },
    controllerAs: 'matrixItemPopup',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemPopup/matrixItemPopup.html",
    bindToController: {
      content: '=',
      loadImageOnEnterViewport: '=',
      track: '&'
    }
  };
}]);




this.app.directive('matrixItemPopupForm', ["AnalyticsService", function(AnalyticsService) {
  return {
    restrict: 'E',
    scope: {},
    controller: function() {
      this.setItem = function(selectedItem, currentItem) {
        return angular.forEach(currentItem.content, function(value, key) {
          if (selectedItem.hasOwnProperty(key)) {
            return currentItem.content[key] = selectedItem[key];
          }
        });
      };
      return this;
    },
    controllerAs: 'matrixItemPopupForm',
    templateUrl: "/assets/templates/components/matrix/matrixItem/matrixItemPopup/matrixItemPopupForm.html",
    bindToController: {
      content: '=',
      descriptionCharLimit: '=',
      showLikes: '=',
      loadImageOnEnterViewport: '=',
      source: '@'
    }
  };
}]);





//# sourceMappingURL=chefsteps.js.map
